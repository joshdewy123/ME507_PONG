
Term_Project_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006090  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08006230  08006230  00007230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006434  08006434  0000809c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006434  08006434  00007434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800643c  0800643c  0000809c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800643c  0800643c  0000743c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006440  08006440  00007440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08006444  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  2000009c  080064e0  0000809c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  080064e0  00008554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011698  00000000  00000000  000080cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002385  00000000  00000000  00019764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  0001baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d18  00000000  00000000  0001cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001868c  00000000  00000000  0001d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001417c  00000000  00000000  00035f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb2d  00000000  00000000  0004a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6bbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d68  00000000  00000000  000e6c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000eb968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006218 	.word	0x08006218

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	08006218 	.word	0x08006218

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b988 	b.w	8000bc4 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	468e      	mov	lr, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	4688      	mov	r8, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4617      	mov	r7, r2
 80008e0:	d962      	bls.n	80009a8 <__udivmoddi4+0xdc>
 80008e2:	fab2 f682 	clz	r6, r2
 80008e6:	b14e      	cbz	r6, 80008fc <__udivmoddi4+0x30>
 80008e8:	f1c6 0320 	rsb	r3, r6, #32
 80008ec:	fa01 f806 	lsl.w	r8, r1, r6
 80008f0:	fa20 f303 	lsr.w	r3, r0, r3
 80008f4:	40b7      	lsls	r7, r6
 80008f6:	ea43 0808 	orr.w	r8, r3, r8
 80008fa:	40b4      	lsls	r4, r6
 80008fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000900:	fa1f fc87 	uxth.w	ip, r7
 8000904:	fbb8 f1fe 	udiv	r1, r8, lr
 8000908:	0c23      	lsrs	r3, r4, #16
 800090a:	fb0e 8811 	mls	r8, lr, r1, r8
 800090e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000912:	fb01 f20c 	mul.w	r2, r1, ip
 8000916:	429a      	cmp	r2, r3
 8000918:	d909      	bls.n	800092e <__udivmoddi4+0x62>
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000920:	f080 80ea 	bcs.w	8000af8 <__udivmoddi4+0x22c>
 8000924:	429a      	cmp	r2, r3
 8000926:	f240 80e7 	bls.w	8000af8 <__udivmoddi4+0x22c>
 800092a:	3902      	subs	r1, #2
 800092c:	443b      	add	r3, r7
 800092e:	1a9a      	subs	r2, r3, r2
 8000930:	b2a3      	uxth	r3, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800093e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000942:	459c      	cmp	ip, r3
 8000944:	d909      	bls.n	800095a <__udivmoddi4+0x8e>
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	f100 32ff 	add.w	r2, r0, #4294967295
 800094c:	f080 80d6 	bcs.w	8000afc <__udivmoddi4+0x230>
 8000950:	459c      	cmp	ip, r3
 8000952:	f240 80d3 	bls.w	8000afc <__udivmoddi4+0x230>
 8000956:	443b      	add	r3, r7
 8000958:	3802      	subs	r0, #2
 800095a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800095e:	eba3 030c 	sub.w	r3, r3, ip
 8000962:	2100      	movs	r1, #0
 8000964:	b11d      	cbz	r5, 800096e <__udivmoddi4+0xa2>
 8000966:	40f3      	lsrs	r3, r6
 8000968:	2200      	movs	r2, #0
 800096a:	e9c5 3200 	strd	r3, r2, [r5]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d905      	bls.n	8000982 <__udivmoddi4+0xb6>
 8000976:	b10d      	cbz	r5, 800097c <__udivmoddi4+0xb0>
 8000978:	e9c5 0100 	strd	r0, r1, [r5]
 800097c:	2100      	movs	r1, #0
 800097e:	4608      	mov	r0, r1
 8000980:	e7f5      	b.n	800096e <__udivmoddi4+0xa2>
 8000982:	fab3 f183 	clz	r1, r3
 8000986:	2900      	cmp	r1, #0
 8000988:	d146      	bne.n	8000a18 <__udivmoddi4+0x14c>
 800098a:	4573      	cmp	r3, lr
 800098c:	d302      	bcc.n	8000994 <__udivmoddi4+0xc8>
 800098e:	4282      	cmp	r2, r0
 8000990:	f200 8105 	bhi.w	8000b9e <__udivmoddi4+0x2d2>
 8000994:	1a84      	subs	r4, r0, r2
 8000996:	eb6e 0203 	sbc.w	r2, lr, r3
 800099a:	2001      	movs	r0, #1
 800099c:	4690      	mov	r8, r2
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d0e5      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a2:	e9c5 4800 	strd	r4, r8, [r5]
 80009a6:	e7e2      	b.n	800096e <__udivmoddi4+0xa2>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	f000 8090 	beq.w	8000ace <__udivmoddi4+0x202>
 80009ae:	fab2 f682 	clz	r6, r2
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	f040 80a4 	bne.w	8000b00 <__udivmoddi4+0x234>
 80009b8:	1a8a      	subs	r2, r1, r2
 80009ba:	0c03      	lsrs	r3, r0, #16
 80009bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c0:	b280      	uxth	r0, r0
 80009c2:	b2bc      	uxth	r4, r7
 80009c4:	2101      	movs	r1, #1
 80009c6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ca:	fb0e 221c 	mls	r2, lr, ip, r2
 80009ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009d2:	fb04 f20c 	mul.w	r2, r4, ip
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d907      	bls.n	80009ea <__udivmoddi4+0x11e>
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009e0:	d202      	bcs.n	80009e8 <__udivmoddi4+0x11c>
 80009e2:	429a      	cmp	r2, r3
 80009e4:	f200 80e0 	bhi.w	8000ba8 <__udivmoddi4+0x2dc>
 80009e8:	46c4      	mov	ip, r8
 80009ea:	1a9b      	subs	r3, r3, r2
 80009ec:	fbb3 f2fe 	udiv	r2, r3, lr
 80009f0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009f4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009f8:	fb02 f404 	mul.w	r4, r2, r4
 80009fc:	429c      	cmp	r4, r3
 80009fe:	d907      	bls.n	8000a10 <__udivmoddi4+0x144>
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0x142>
 8000a08:	429c      	cmp	r4, r3
 8000a0a:	f200 80ca 	bhi.w	8000ba2 <__udivmoddi4+0x2d6>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	1b1b      	subs	r3, r3, r4
 8000a12:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a16:	e7a5      	b.n	8000964 <__udivmoddi4+0x98>
 8000a18:	f1c1 0620 	rsb	r6, r1, #32
 8000a1c:	408b      	lsls	r3, r1
 8000a1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a22:	431f      	orrs	r7, r3
 8000a24:	fa0e f401 	lsl.w	r4, lr, r1
 8000a28:	fa20 f306 	lsr.w	r3, r0, r6
 8000a2c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a30:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a34:	4323      	orrs	r3, r4
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	fa1f fc87 	uxth.w	ip, r7
 8000a3e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a42:	0c1c      	lsrs	r4, r3, #16
 8000a44:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a48:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a4c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a50:	45a6      	cmp	lr, r4
 8000a52:	fa02 f201 	lsl.w	r2, r2, r1
 8000a56:	d909      	bls.n	8000a6c <__udivmoddi4+0x1a0>
 8000a58:	193c      	adds	r4, r7, r4
 8000a5a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a5e:	f080 809c 	bcs.w	8000b9a <__udivmoddi4+0x2ce>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f240 8099 	bls.w	8000b9a <__udivmoddi4+0x2ce>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	443c      	add	r4, r7
 8000a6c:	eba4 040e 	sub.w	r4, r4, lr
 8000a70:	fa1f fe83 	uxth.w	lr, r3
 8000a74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a78:	fb09 4413 	mls	r4, r9, r3, r4
 8000a7c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a80:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a84:	45a4      	cmp	ip, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x1ce>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a8e:	f080 8082 	bcs.w	8000b96 <__udivmoddi4+0x2ca>
 8000a92:	45a4      	cmp	ip, r4
 8000a94:	d97f      	bls.n	8000b96 <__udivmoddi4+0x2ca>
 8000a96:	3b02      	subs	r3, #2
 8000a98:	443c      	add	r4, r7
 8000a9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a9e:	eba4 040c 	sub.w	r4, r4, ip
 8000aa2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000aa6:	4564      	cmp	r4, ip
 8000aa8:	4673      	mov	r3, lr
 8000aaa:	46e1      	mov	r9, ip
 8000aac:	d362      	bcc.n	8000b74 <__udivmoddi4+0x2a8>
 8000aae:	d05f      	beq.n	8000b70 <__udivmoddi4+0x2a4>
 8000ab0:	b15d      	cbz	r5, 8000aca <__udivmoddi4+0x1fe>
 8000ab2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ab6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aba:	fa04 f606 	lsl.w	r6, r4, r6
 8000abe:	fa22 f301 	lsr.w	r3, r2, r1
 8000ac2:	431e      	orrs	r6, r3
 8000ac4:	40cc      	lsrs	r4, r1
 8000ac6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aca:	2100      	movs	r1, #0
 8000acc:	e74f      	b.n	800096e <__udivmoddi4+0xa2>
 8000ace:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ad2:	0c01      	lsrs	r1, r0, #16
 8000ad4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ad8:	b280      	uxth	r0, r0
 8000ada:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	463c      	mov	r4, r7
 8000ae4:	46b8      	mov	r8, r7
 8000ae6:	46be      	mov	lr, r7
 8000ae8:	2620      	movs	r6, #32
 8000aea:	fbb1 f1f7 	udiv	r1, r1, r7
 8000aee:	eba2 0208 	sub.w	r2, r2, r8
 8000af2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000af6:	e766      	b.n	80009c6 <__udivmoddi4+0xfa>
 8000af8:	4601      	mov	r1, r0
 8000afa:	e718      	b.n	800092e <__udivmoddi4+0x62>
 8000afc:	4610      	mov	r0, r2
 8000afe:	e72c      	b.n	800095a <__udivmoddi4+0x8e>
 8000b00:	f1c6 0220 	rsb	r2, r6, #32
 8000b04:	fa2e f302 	lsr.w	r3, lr, r2
 8000b08:	40b7      	lsls	r7, r6
 8000b0a:	40b1      	lsls	r1, r6
 8000b0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b14:	430a      	orrs	r2, r1
 8000b16:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b1a:	b2bc      	uxth	r4, r7
 8000b1c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b20:	0c11      	lsrs	r1, r2, #16
 8000b22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b26:	fb08 f904 	mul.w	r9, r8, r4
 8000b2a:	40b0      	lsls	r0, r6
 8000b2c:	4589      	cmp	r9, r1
 8000b2e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b32:	b280      	uxth	r0, r0
 8000b34:	d93e      	bls.n	8000bb4 <__udivmoddi4+0x2e8>
 8000b36:	1879      	adds	r1, r7, r1
 8000b38:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b3c:	d201      	bcs.n	8000b42 <__udivmoddi4+0x276>
 8000b3e:	4589      	cmp	r9, r1
 8000b40:	d81f      	bhi.n	8000b82 <__udivmoddi4+0x2b6>
 8000b42:	eba1 0109 	sub.w	r1, r1, r9
 8000b46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b4a:	fb09 f804 	mul.w	r8, r9, r4
 8000b4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b52:	b292      	uxth	r2, r2
 8000b54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b58:	4542      	cmp	r2, r8
 8000b5a:	d229      	bcs.n	8000bb0 <__udivmoddi4+0x2e4>
 8000b5c:	18ba      	adds	r2, r7, r2
 8000b5e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b62:	d2c4      	bcs.n	8000aee <__udivmoddi4+0x222>
 8000b64:	4542      	cmp	r2, r8
 8000b66:	d2c2      	bcs.n	8000aee <__udivmoddi4+0x222>
 8000b68:	f1a9 0102 	sub.w	r1, r9, #2
 8000b6c:	443a      	add	r2, r7
 8000b6e:	e7be      	b.n	8000aee <__udivmoddi4+0x222>
 8000b70:	45f0      	cmp	r8, lr
 8000b72:	d29d      	bcs.n	8000ab0 <__udivmoddi4+0x1e4>
 8000b74:	ebbe 0302 	subs.w	r3, lr, r2
 8000b78:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	46e1      	mov	r9, ip
 8000b80:	e796      	b.n	8000ab0 <__udivmoddi4+0x1e4>
 8000b82:	eba7 0909 	sub.w	r9, r7, r9
 8000b86:	4449      	add	r1, r9
 8000b88:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b8c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b90:	fb09 f804 	mul.w	r8, r9, r4
 8000b94:	e7db      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b96:	4673      	mov	r3, lr
 8000b98:	e77f      	b.n	8000a9a <__udivmoddi4+0x1ce>
 8000b9a:	4650      	mov	r0, sl
 8000b9c:	e766      	b.n	8000a6c <__udivmoddi4+0x1a0>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e6fd      	b.n	800099e <__udivmoddi4+0xd2>
 8000ba2:	443b      	add	r3, r7
 8000ba4:	3a02      	subs	r2, #2
 8000ba6:	e733      	b.n	8000a10 <__udivmoddi4+0x144>
 8000ba8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bac:	443b      	add	r3, r7
 8000bae:	e71c      	b.n	80009ea <__udivmoddi4+0x11e>
 8000bb0:	4649      	mov	r1, r9
 8000bb2:	e79c      	b.n	8000aee <__udivmoddi4+0x222>
 8000bb4:	eba1 0109 	sub.w	r1, r1, r9
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bbe:	fb09 f804 	mul.w	r8, r9, r4
 8000bc2:	e7c4      	b.n	8000b4e <__udivmoddi4+0x282>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
  HAL_Init();
 8000bce:	f001 fb0d 	bl	80021ec <HAL_Init>
  SystemClock_Config();
 8000bd2:	f000 f8e7 	bl	8000da4 <SystemClock_Config>

  MX_GPIO_Init();
 8000bd6:	f000 fc7d 	bl	80014d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bda:	f000 f94b 	bl	8000e74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000bde:	f000 f99b 	bl	8000f18 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000be2:	f000 f9c7 	bl	8000f74 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000be6:	f000 f9f3 	bl	8000fd0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bea:	f000 fa81 	bl	80010f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bee:	f000 fad3 	bl	8001198 <MX_TIM3_Init>
  MX_TIM9_Init();
 8000bf2:	f000 fb59 	bl	80012a8 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000bf6:	f000 fba7 	bl	8001348 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000bfa:	f000 fbf3 	bl	80013e4 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 8000bfe:	f000 fc3f 	bl	8001480 <MX_USART1_UART_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c02:	2100      	movs	r1, #0
 8000c04:	4850      	ldr	r0, [pc, #320]	@ (8000d48 <main+0x180>)
 8000c06:	f002 ff75 	bl	8003af4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000c0a:	210c      	movs	r1, #12
 8000c0c:	484e      	ldr	r0, [pc, #312]	@ (8000d48 <main+0x180>)
 8000c0e:	f002 ff71 	bl	8003af4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8000c12:	2100      	movs	r1, #0
 8000c14:	484d      	ldr	r0, [pc, #308]	@ (8000d4c <main+0x184>)
 8000c16:	f002 ff6d 	bl	8003af4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	484b      	ldr	r0, [pc, #300]	@ (8000d4c <main+0x184>)
 8000c1e:	f002 ff69 	bl	8003af4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c22:	2108      	movs	r1, #8
 8000c24:	484a      	ldr	r0, [pc, #296]	@ (8000d50 <main+0x188>)
 8000c26:	f002 ff65 	bl	8003af4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000c2a:	210c      	movs	r1, #12
 8000c2c:	4848      	ldr	r0, [pc, #288]	@ (8000d50 <main+0x188>)
 8000c2e:	f002 ff61 	bl	8003af4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000c32:	2100      	movs	r1, #0
 8000c34:	4847      	ldr	r0, [pc, #284]	@ (8000d54 <main+0x18c>)
 8000c36:	f002 ff5d 	bl	8003af4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4846      	ldr	r0, [pc, #280]	@ (8000d58 <main+0x190>)
 8000c3e:	f002 ff59 	bl	8003af4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c42:	213c      	movs	r1, #60	@ 0x3c
 8000c44:	4845      	ldr	r0, [pc, #276]	@ (8000d5c <main+0x194>)
 8000c46:	f003 f90f 	bl	8003e68 <HAL_TIM_Encoder_Start>

  HAL_Delay(100);
 8000c4a:	2064      	movs	r0, #100	@ 0x64
 8000c4c:	f001 fb40 	bl	80022d0 <HAL_Delay>
  int len = sprintf(msg, "Enter 4 characters: M, motor ID, hex value duty cycle\r\n");
 8000c50:	4943      	ldr	r1, [pc, #268]	@ (8000d60 <main+0x198>)
 8000c52:	4844      	ldr	r0, [pc, #272]	@ (8000d64 <main+0x19c>)
 8000c54:	f004 fe40 	bl	80058d8 <siprintf>
 8000c58:	60b8      	str	r0, [r7, #8]
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	4940      	ldr	r1, [pc, #256]	@ (8000d64 <main+0x19c>)
 8000c64:	4840      	ldr	r0, [pc, #256]	@ (8000d68 <main+0x1a0>)
 8000c66:	f003 fd97 	bl	8004798 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, &rx_buffer[rx_index], 1);
 8000c6a:	4b40      	ldr	r3, [pc, #256]	@ (8000d6c <main+0x1a4>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b3f      	ldr	r3, [pc, #252]	@ (8000d70 <main+0x1a8>)
 8000c72:	4413      	add	r3, r2
 8000c74:	2201      	movs	r2, #1
 8000c76:	4619      	mov	r1, r3
 8000c78:	483b      	ldr	r0, [pc, #236]	@ (8000d68 <main+0x1a0>)
 8000c7a:	f003 fe18 	bl	80048ae <HAL_UART_Receive_IT>

  int32_t turret1_enc_last = -1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	60fb      	str	r3, [r7, #12]
  while (1)
  {
    // Update encoder count and angle (tenths of degrees)
    turret1_enc_count = __HAL_TIM_GET_COUNTER(&htim2);
 8000c84:	4b35      	ldr	r3, [pc, #212]	@ (8000d5c <main+0x194>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b39      	ldr	r3, [pc, #228]	@ (8000d74 <main+0x1ac>)
 8000c8e:	601a      	str	r2, [r3, #0]
    if (turret1_enc_count != turret1_enc_last) {
 8000c90:	4b38      	ldr	r3, [pc, #224]	@ (8000d74 <main+0x1ac>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d010      	beq.n	8000cbc <main+0xf4>
      turret1_enc_deg = (7200 * turret1_enc_count) / (3200*10); // 7200 = 360.0 deg × 20 (tenths)
 8000c9a:	4b36      	ldr	r3, [pc, #216]	@ (8000d74 <main+0x1ac>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	4a34      	ldr	r2, [pc, #208]	@ (8000d78 <main+0x1b0>)
 8000ca8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cac:	12d2      	asrs	r2, r2, #11
 8000cae:	17db      	asrs	r3, r3, #31
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	4a32      	ldr	r2, [pc, #200]	@ (8000d7c <main+0x1b4>)
 8000cb4:	6013      	str	r3, [r2, #0]
      turret1_enc_last = turret1_enc_count;
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d74 <main+0x1ac>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	60fb      	str	r3, [r7, #12]
    }

    // Simple proportional controller
    int32_t error = turret1_target - turret1_enc_deg;
 8000cbc:	4b30      	ldr	r3, [pc, #192]	@ (8000d80 <main+0x1b8>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8000d7c <main+0x1b4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	607b      	str	r3, [r7, #4]
    duty_turret1 = 0.08*error;  // P-gain = 0.5
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff fd55 	bl	8000778 <__aeabi_i2d>
 8000cce:	a31c      	add	r3, pc, #112	@ (adr r3, 8000d40 <main+0x178>)
 8000cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd4:	f7ff fad4 	bl	8000280 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4610      	mov	r0, r2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f7ff fdb4 	bl	800084c <__aeabi_d2iz>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4a27      	ldr	r2, [pc, #156]	@ (8000d84 <main+0x1bc>)
 8000ce8:	6013      	str	r3, [r2, #0]

    // Saturate duty to ±100
    if (duty_turret1 > 80) duty_turret1 = 80;
 8000cea:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <main+0x1bc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b50      	cmp	r3, #80	@ 0x50
 8000cf0:	dd02      	ble.n	8000cf8 <main+0x130>
 8000cf2:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <main+0x1bc>)
 8000cf4:	2250      	movs	r2, #80	@ 0x50
 8000cf6:	601a      	str	r2, [r3, #0]
    if (duty_turret1 < -80) duty_turret1 = -80;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	@ (8000d84 <main+0x1bc>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f113 0f50 	cmn.w	r3, #80	@ 0x50
 8000d00:	da03      	bge.n	8000d0a <main+0x142>
 8000d02:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <main+0x1bc>)
 8000d04:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 8000d08:	601a      	str	r2, [r3, #0]

    // Apply motor control
    set_duty(&flywheel1, duty_flywheel1);
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <main+0x1c0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	481e      	ldr	r0, [pc, #120]	@ (8000d8c <main+0x1c4>)
 8000d12:	f000 fd7b 	bl	800180c <set_duty>
    set_duty(&flywheel2, duty_flywheel2);
 8000d16:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <main+0x1c8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	481d      	ldr	r0, [pc, #116]	@ (8000d94 <main+0x1cc>)
 8000d1e:	f000 fd75 	bl	800180c <set_duty>
    set_duty(&turret1, duty_turret1);
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <main+0x1bc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4619      	mov	r1, r3
 8000d28:	481b      	ldr	r0, [pc, #108]	@ (8000d98 <main+0x1d0>)
 8000d2a:	f000 fd6f 	bl	800180c <set_duty>
    set_duty(&turret2, duty_turret2);
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <main+0x1d4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4619      	mov	r1, r3
 8000d34:	481a      	ldr	r0, [pc, #104]	@ (8000da0 <main+0x1d8>)
 8000d36:	f000 fd69 	bl	800180c <set_duty>
  {
 8000d3a:	e7a3      	b.n	8000c84 <main+0xbc>
 8000d3c:	f3af 8000 	nop.w
 8000d40:	47ae147b 	.word	0x47ae147b
 8000d44:	3fb47ae1 	.word	0x3fb47ae1
 8000d48:	200001a8 	.word	0x200001a8
 8000d4c:	20000280 	.word	0x20000280
 8000d50:	20000238 	.word	0x20000238
 8000d54:	200002c8 	.word	0x200002c8
 8000d58:	20000310 	.word	0x20000310
 8000d5c:	200001f0 	.word	0x200001f0
 8000d60:	08006230 	.word	0x08006230
 8000d64:	200003c4 	.word	0x200003c4
 8000d68:	20000358 	.word	0x20000358
 8000d6c:	200003c1 	.word	0x200003c1
 8000d70:	200003bc 	.word	0x200003bc
 8000d74:	200003b0 	.word	0x200003b0
 8000d78:	10624dd3 	.word	0x10624dd3
 8000d7c:	200003b4 	.word	0x200003b4
 8000d80:	200003b8 	.word	0x200003b8
 8000d84:	200003a8 	.word	0x200003a8
 8000d88:	200003a0 	.word	0x200003a0
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	200003a4 	.word	0x200003a4
 8000d94:	20000010 	.word	0x20000010
 8000d98:	20000020 	.word	0x20000020
 8000d9c:	200003ac 	.word	0x200003ac
 8000da0:	20000030 	.word	0x20000030

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	@ 0x50
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	2230      	movs	r2, #48	@ 0x30
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 fdb2 	bl	800591c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <SystemClock_Config+0xc8>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	4a26      	ldr	r2, [pc, #152]	@ (8000e6c <SystemClock_Config+0xc8>)
 8000dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd8:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <SystemClock_Config+0xc8>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <SystemClock_Config+0xcc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a20      	ldr	r2, [pc, #128]	@ (8000e70 <SystemClock_Config+0xcc>)
 8000dee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e70 <SystemClock_Config+0xcc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e00:	2302      	movs	r3, #2
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e14:	2308      	movs	r3, #8
 8000e16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000e18:	2360      	movs	r3, #96	@ 0x60
 8000e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e20:	2304      	movs	r3, #4
 8000e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 f96d 	bl	8003108 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e34:	f000 fce4 	bl	8001800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	2103      	movs	r1, #3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f002 fbcf 	bl	80035f8 <HAL_RCC_ClockConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e60:	f000 fcce 	bl	8001800 <Error_Handler>
  }
}
 8000e64:	bf00      	nop
 8000e66:	3750      	adds	r7, #80	@ 0x50
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40007000 	.word	0x40007000

08000e74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e86:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000e88:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <MX_ADC1_Init+0x9c>)
 8000e8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000e8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eae:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000eb6:	4a17      	ldr	r2, [pc, #92]	@ (8000f14 <MX_ADC1_Init+0xa0>)
 8000eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eba:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed4:	480d      	ldr	r0, [pc, #52]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ed6:	f001 fa1f 	bl	8002318 <HAL_ADC_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ee0:	f000 fc8e 	bl	8001800 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ef6:	f001 fa53 	bl	80023a0 <HAL_ADC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f00:	f000 fc7e 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000b8 	.word	0x200000b8
 8000f10:	40012000 	.word	0x40012000
 8000f14:	0f000001 	.word	0x0f000001

08000f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	@ (8000f6c <MX_I2C1_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <MX_I2C1_Init+0x58>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f56:	f001 ff93 	bl	8002e80 <HAL_I2C_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f60:	f000 fc4e 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000100 	.word	0x20000100
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	000186a0 	.word	0x000186a0

08000f74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <MX_I2C2_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <MX_I2C2_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fb2:	f001 ff65 	bl	8002e80 <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 fc20 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000154 	.word	0x20000154
 8000fc8:	40005800 	.word	0x40005800
 8000fcc:	000186a0 	.word	0x000186a0

08000fd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b092      	sub	sp, #72	@ 0x48
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 fc8e 	bl	800591c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001000:	4b39      	ldr	r3, [pc, #228]	@ (80010e8 <MX_TIM1_Init+0x118>)
 8001002:	4a3a      	ldr	r2, [pc, #232]	@ (80010ec <MX_TIM1_Init+0x11c>)
 8001004:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001006:	4b38      	ldr	r3, [pc, #224]	@ (80010e8 <MX_TIM1_Init+0x118>)
 8001008:	2201      	movs	r2, #1
 800100a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b36      	ldr	r3, [pc, #216]	@ (80010e8 <MX_TIM1_Init+0x118>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2399;
 8001012:	4b35      	ldr	r3, [pc, #212]	@ (80010e8 <MX_TIM1_Init+0x118>)
 8001014:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001018:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	4b33      	ldr	r3, [pc, #204]	@ (80010e8 <MX_TIM1_Init+0x118>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001020:	4b31      	ldr	r3, [pc, #196]	@ (80010e8 <MX_TIM1_Init+0x118>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b30      	ldr	r3, [pc, #192]	@ (80010e8 <MX_TIM1_Init+0x118>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800102c:	482e      	ldr	r0, [pc, #184]	@ (80010e8 <MX_TIM1_Init+0x118>)
 800102e:	f002 fd12 	bl	8003a56 <HAL_TIM_PWM_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001038:	f000 fbe2 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001044:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001048:	4619      	mov	r1, r3
 800104a:	4827      	ldr	r0, [pc, #156]	@ (80010e8 <MX_TIM1_Init+0x118>)
 800104c:	f003 fa94 	bl	8004578 <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001056:	f000 fbd3 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105a:	2360      	movs	r3, #96	@ 0x60
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001066:	2300      	movs	r3, #0
 8001068:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	481a      	ldr	r0, [pc, #104]	@ (80010e8 <MX_TIM1_Init+0x118>)
 8001080:	f002 ff80 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800108a:	f000 fbb9 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800108e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001092:	220c      	movs	r2, #12
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	@ (80010e8 <MX_TIM1_Init+0x118>)
 8001098:	f002 ff74 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80010a2:	f000 fbad 	bl	8001800 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <MX_TIM1_Init+0x118>)
 80010ca:	f003 fac3 	bl	8004654 <HAL_TIMEx_ConfigBreakDeadTime>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80010d4:	f000 fb94 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <MX_TIM1_Init+0x118>)
 80010da:	f000 feb5 	bl	8001e48 <HAL_TIM_MspPostInit>

}
 80010de:	bf00      	nop
 80010e0:	3748      	adds	r7, #72	@ 0x48
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200001a8 	.word	0x200001a8
 80010ec:	40010000 	.word	0x40010000

080010f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	@ 0x30
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	2224      	movs	r2, #36	@ 0x24
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 fc0c 	bl	800591c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800110c:	4b21      	ldr	r3, [pc, #132]	@ (8001194 <MX_TIM2_Init+0xa4>)
 800110e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001114:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <MX_TIM2_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <MX_TIM2_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001120:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <MX_TIM2_Init+0xa4>)
 8001122:	f04f 32ff 	mov.w	r2, #4294967295
 8001126:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <MX_TIM2_Init+0xa4>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <MX_TIM2_Init+0xa4>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001134:	2301      	movs	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800114c:	2301      	movs	r3, #1
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	@ (8001194 <MX_TIM2_Init+0xa4>)
 8001160:	f002 fddc 	bl	8003d1c <HAL_TIM_Encoder_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800116a:	f000 fb49 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	@ (8001194 <MX_TIM2_Init+0xa4>)
 800117c:	f003 f9fc 	bl	8004578 <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001186:	f000 fb3b 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	3730      	adds	r7, #48	@ 0x30
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200001f0 	.word	0x200001f0

08001198 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b092      	sub	sp, #72	@ 0x48
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800119e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a2:	2224      	movs	r2, #36	@ 0x24
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 fbb8 	bl	800591c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]
 80011c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c8:	4b35      	ldr	r3, [pc, #212]	@ (80012a0 <MX_TIM3_Init+0x108>)
 80011ca:	4a36      	ldr	r2, [pc, #216]	@ (80012a4 <MX_TIM3_Init+0x10c>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80011ce:	4b34      	ldr	r3, [pc, #208]	@ (80012a0 <MX_TIM3_Init+0x108>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b32      	ldr	r3, [pc, #200]	@ (80012a0 <MX_TIM3_Init+0x108>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2399;
 80011da:	4b31      	ldr	r3, [pc, #196]	@ (80012a0 <MX_TIM3_Init+0x108>)
 80011dc:	f640 125f 	movw	r2, #2399	@ 0x95f
 80011e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e2:	4b2f      	ldr	r3, [pc, #188]	@ (80012a0 <MX_TIM3_Init+0x108>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <MX_TIM3_Init+0x108>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011ee:	482c      	ldr	r0, [pc, #176]	@ (80012a0 <MX_TIM3_Init+0x108>)
 80011f0:	f002 fc31 	bl	8003a56 <HAL_TIM_PWM_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011fa:	f000 fb01 	bl	8001800 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011fe:	2301      	movs	r3, #1
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001206:	2301      	movs	r3, #1
 8001208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001212:	2300      	movs	r3, #0
 8001214:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001216:	2301      	movs	r3, #1
 8001218:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	481d      	ldr	r0, [pc, #116]	@ (80012a0 <MX_TIM3_Init+0x108>)
 800122a:	f002 fd77 	bl	8003d1c <HAL_TIM_Encoder_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001234:	f000 fae4 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	4816      	ldr	r0, [pc, #88]	@ (80012a0 <MX_TIM3_Init+0x108>)
 8001248:	f003 f996 	bl	8004578 <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8001252:	f000 fad5 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001256:	2360      	movs	r3, #96	@ 0x60
 8001258:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	2208      	movs	r2, #8
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <MX_TIM3_Init+0x108>)
 800126e:	f002 fe89 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001278:	f000 fac2 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	220c      	movs	r2, #12
 8001280:	4619      	mov	r1, r3
 8001282:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <MX_TIM3_Init+0x108>)
 8001284:	f002 fe7e 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 800128e:	f000 fab7 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001292:	4803      	ldr	r0, [pc, #12]	@ (80012a0 <MX_TIM3_Init+0x108>)
 8001294:	f000 fdd8 	bl	8001e48 <HAL_TIM_MspPostInit>

}
 8001298:	bf00      	nop
 800129a:	3748      	adds	r7, #72	@ 0x48
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000238 	.word	0x20000238
 80012a4:	40000400 	.word	0x40000400

080012a8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]
 80012be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <MX_TIM9_Init+0x98>)
 80012c2:	4a20      	ldr	r2, [pc, #128]	@ (8001344 <MX_TIM9_Init+0x9c>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <MX_TIM9_Init+0x98>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <MX_TIM9_Init+0x98>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2399;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <MX_TIM9_Init+0x98>)
 80012d4:	f640 125f 	movw	r2, #2399	@ 0x95f
 80012d8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <MX_TIM9_Init+0x98>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <MX_TIM9_Init+0x98>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80012e6:	4816      	ldr	r0, [pc, #88]	@ (8001340 <MX_TIM9_Init+0x98>)
 80012e8:	f002 fbb5 	bl	8003a56 <HAL_TIM_PWM_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80012f2:	f000 fa85 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f6:	2360      	movs	r3, #96	@ 0x60
 80012f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	4619      	mov	r1, r3
 800130c:	480c      	ldr	r0, [pc, #48]	@ (8001340 <MX_TIM9_Init+0x98>)
 800130e:	f002 fe39 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001318:	f000 fa72 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2204      	movs	r2, #4
 8001320:	4619      	mov	r1, r3
 8001322:	4807      	ldr	r0, [pc, #28]	@ (8001340 <MX_TIM9_Init+0x98>)
 8001324:	f002 fe2e 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800132e:	f000 fa67 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <MX_TIM9_Init+0x98>)
 8001334:	f000 fd88 	bl	8001e48 <HAL_TIM_MspPostInit>

}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000280 	.word	0x20000280
 8001344:	40014000 	.word	0x40014000

08001348 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <MX_TIM10_Init+0x94>)
 8001362:	4a1f      	ldr	r2, [pc, #124]	@ (80013e0 <MX_TIM10_Init+0x98>)
 8001364:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_TIM10_Init+0x94>)
 8001368:	2201      	movs	r2, #1
 800136a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_TIM10_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2399;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_TIM10_Init+0x94>)
 8001374:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001378:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <MX_TIM10_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_TIM10_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001386:	4815      	ldr	r0, [pc, #84]	@ (80013dc <MX_TIM10_Init+0x94>)
 8001388:	f002 fb16 	bl	80039b8 <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001392:	f000 fa35 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001396:	4811      	ldr	r0, [pc, #68]	@ (80013dc <MX_TIM10_Init+0x94>)
 8001398:	f002 fb5d 	bl	8003a56 <HAL_TIM_PWM_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80013a2:	f000 fa2d 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a6:	2360      	movs	r3, #96	@ 0x60
 80013a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	@ (80013dc <MX_TIM10_Init+0x94>)
 80013be:	f002 fde1 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80013c8:	f000 fa1a 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80013cc:	4803      	ldr	r0, [pc, #12]	@ (80013dc <MX_TIM10_Init+0x94>)
 80013ce:	f000 fd3b 	bl	8001e48 <HAL_TIM_MspPostInit>

}
 80013d2:	bf00      	nop
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200002c8 	.word	0x200002c8
 80013e0:	40014400 	.word	0x40014400

080013e4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	615a      	str	r2, [r3, #20]
 80013fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_TIM11_Init+0x94>)
 80013fe:	4a1f      	ldr	r2, [pc, #124]	@ (800147c <MX_TIM11_Init+0x98>)
 8001400:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_TIM11_Init+0x94>)
 8001404:	2201      	movs	r2, #1
 8001406:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_TIM11_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2399;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_TIM11_Init+0x94>)
 8001410:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001414:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_TIM11_Init+0x94>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_TIM11_Init+0x94>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001422:	4815      	ldr	r0, [pc, #84]	@ (8001478 <MX_TIM11_Init+0x94>)
 8001424:	f002 fac8 	bl	80039b8 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800142e:	f000 f9e7 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001432:	4811      	ldr	r0, [pc, #68]	@ (8001478 <MX_TIM11_Init+0x94>)
 8001434:	f002 fb0f 	bl	8003a56 <HAL_TIM_PWM_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800143e:	f000 f9df 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001442:	2360      	movs	r3, #96	@ 0x60
 8001444:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	@ (8001478 <MX_TIM11_Init+0x94>)
 800145a:	f002 fd93 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001464:	f000 f9cc 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <MX_TIM11_Init+0x94>)
 800146a:	f000 fced 	bl	8001e48 <HAL_TIM_MspPostInit>

}
 800146e:	bf00      	nop
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000310 	.word	0x20000310
 800147c:	40014800 	.word	0x40014800

08001480 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 8001486:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <MX_USART1_UART_Init+0x50>)
 8001488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 80014b8:	f003 f91e 	bl	80046f8 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014c2:	f000 f99d 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000358 	.word	0x20000358
 80014d0:	40011000 	.word	0x40011000

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <MX_GPIO_Init+0xc4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a29      	ldr	r2, [pc, #164]	@ (8001598 <MX_GPIO_Init+0xc4>)
 80014f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <MX_GPIO_Init+0xc4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <MX_GPIO_Init+0xc4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a22      	ldr	r2, [pc, #136]	@ (8001598 <MX_GPIO_Init+0xc4>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <MX_GPIO_Init+0xc4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <MX_GPIO_Init+0xc4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <MX_GPIO_Init+0xc4>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <MX_GPIO_Init+0xc4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	21c0      	movs	r1, #192	@ 0xc0
 8001542:	4816      	ldr	r0, [pc, #88]	@ (800159c <MX_GPIO_Init+0xc8>)
 8001544:	f001 fc82 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800154e:	4814      	ldr	r0, [pc, #80]	@ (80015a0 <MX_GPIO_Init+0xcc>)
 8001550:	f001 fc7c 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001554:	23c0      	movs	r3, #192	@ 0xc0
 8001556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4619      	mov	r1, r3
 800156a:	480c      	ldr	r0, [pc, #48]	@ (800159c <MX_GPIO_Init+0xc8>)
 800156c:	f001 faea 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001570:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <MX_GPIO_Init+0xcc>)
 800158a:	f001 fadb 	bl	8002b44 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800158e:	bf00      	nop
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020400 	.word	0x40020400

080015a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	@ 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a83      	ldr	r2, [pc, #524]	@ (80017c0 <HAL_UART_RxCpltCallback+0x21c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	f040 8100 	bne.w	80017b8 <HAL_UART_RxCpltCallback+0x214>
  {
    uint8_t received = rx_buffer[rx_index];
 80015b8:	4b82      	ldr	r3, [pc, #520]	@ (80017c4 <HAL_UART_RxCpltCallback+0x220>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b82      	ldr	r3, [pc, #520]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 80015c0:	5c9b      	ldrb	r3, [r3, r2]
 80015c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (received == '\r')
 80015c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80015ca:	2b0d      	cmp	r3, #13
 80015cc:	f040 80dd 	bne.w	800178a <HAL_UART_RxCpltCallback+0x1e6>
    {
      if (rx_index != 4)
 80015d0:	4b7c      	ldr	r3, [pc, #496]	@ (80017c4 <HAL_UART_RxCpltCallback+0x220>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d00d      	beq.n	80015f4 <HAL_UART_RxCpltCallback+0x50>
      {
        int len = sprintf(msg, "Invalid length\r\n");
 80015d8:	497c      	ldr	r1, [pc, #496]	@ (80017cc <HAL_UART_RxCpltCallback+0x228>)
 80015da:	487d      	ldr	r0, [pc, #500]	@ (80017d0 <HAL_UART_RxCpltCallback+0x22c>)
 80015dc:	f004 f97c 	bl	80058d8 <siprintf>
 80015e0:	6138      	str	r0, [r7, #16]
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	4979      	ldr	r1, [pc, #484]	@ (80017d0 <HAL_UART_RxCpltCallback+0x22c>)
 80015ec:	4879      	ldr	r0, [pc, #484]	@ (80017d4 <HAL_UART_RxCpltCallback+0x230>)
 80015ee:	f003 f8d3 	bl	8004798 <HAL_UART_Transmit>
 80015f2:	e0c6      	b.n	8001782 <HAL_UART_RxCpltCallback+0x1de>
      }
      else if ((rx_buffer[0] == 'M' || rx_buffer[0] == 'm') && (rx_buffer[1] >= '1' && rx_buffer[1] <= '4'))
 80015f4:	4b74      	ldr	r3, [pc, #464]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b4d      	cmp	r3, #77	@ 0x4d
 80015fa:	d003      	beq.n	8001604 <HAL_UART_RxCpltCallback+0x60>
 80015fc:	4b72      	ldr	r3, [pc, #456]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b6d      	cmp	r3, #109	@ 0x6d
 8001602:	d162      	bne.n	80016ca <HAL_UART_RxCpltCallback+0x126>
 8001604:	4b70      	ldr	r3, [pc, #448]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	2b30      	cmp	r3, #48	@ 0x30
 800160a:	d95e      	bls.n	80016ca <HAL_UART_RxCpltCallback+0x126>
 800160c:	4b6e      	ldr	r3, [pc, #440]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 800160e:	785b      	ldrb	r3, [r3, #1]
 8001610:	2b34      	cmp	r3, #52	@ 0x34
 8001612:	d85a      	bhi.n	80016ca <HAL_UART_RxCpltCallback+0x126>
      {
        uint8_t motor_id = rx_buffer[1] - '0';
 8001614:	4b6c      	ldr	r3, [pc, #432]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 8001616:	785b      	ldrb	r3, [r3, #1]
 8001618:	3b30      	subs	r3, #48	@ 0x30
 800161a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        char hex_str[3] = { rx_buffer[2], rx_buffer[3], '\0' };
 800161e:	4b6a      	ldr	r3, [pc, #424]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 8001620:	789b      	ldrb	r3, [r3, #2]
 8001622:	733b      	strb	r3, [r7, #12]
 8001624:	4b68      	ldr	r3, [pc, #416]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 8001626:	78db      	ldrb	r3, [r3, #3]
 8001628:	737b      	strb	r3, [r7, #13]
 800162a:	2300      	movs	r3, #0
 800162c:	73bb      	strb	r3, [r7, #14]
        uint8_t raw = (uint8_t)strtol(hex_str, NULL, 16);
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2210      	movs	r2, #16
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f004 f944 	bl	80058c4 <strtol>
 800163c:	4603      	mov	r3, r0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	72fb      	strb	r3, [r7, #11]
        int8_t signed_val = *(int8_t*)&raw;
 8001642:	f107 030b 	add.w	r3, r7, #11
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        int32_t duty = (int32_t)signed_val;
 800164c:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8001650:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (duty > 100) duty = 100;
 8001652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001654:	2b64      	cmp	r3, #100	@ 0x64
 8001656:	dd01      	ble.n	800165c <HAL_UART_RxCpltCallback+0xb8>
 8001658:	2364      	movs	r3, #100	@ 0x64
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (duty < -100) duty = -100;
 800165c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001662:	da02      	bge.n	800166a <HAL_UART_RxCpltCallback+0xc6>
 8001664:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (motor_id == 1) duty_flywheel1 = duty;
 800166a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800166e:	2b01      	cmp	r3, #1
 8001670:	d103      	bne.n	800167a <HAL_UART_RxCpltCallback+0xd6>
 8001672:	4a59      	ldr	r2, [pc, #356]	@ (80017d8 <HAL_UART_RxCpltCallback+0x234>)
 8001674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	e016      	b.n	80016a8 <HAL_UART_RxCpltCallback+0x104>
        else if (motor_id == 2) duty_flywheel2 = duty;
 800167a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800167e:	2b02      	cmp	r3, #2
 8001680:	d103      	bne.n	800168a <HAL_UART_RxCpltCallback+0xe6>
 8001682:	4a56      	ldr	r2, [pc, #344]	@ (80017dc <HAL_UART_RxCpltCallback+0x238>)
 8001684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e00e      	b.n	80016a8 <HAL_UART_RxCpltCallback+0x104>
        else if (motor_id == 3) duty_turret1 = duty;
 800168a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800168e:	2b03      	cmp	r3, #3
 8001690:	d103      	bne.n	800169a <HAL_UART_RxCpltCallback+0xf6>
 8001692:	4a53      	ldr	r2, [pc, #332]	@ (80017e0 <HAL_UART_RxCpltCallback+0x23c>)
 8001694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e006      	b.n	80016a8 <HAL_UART_RxCpltCallback+0x104>
        else if (motor_id == 4) duty_turret2 = duty;
 800169a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d102      	bne.n	80016a8 <HAL_UART_RxCpltCallback+0x104>
 80016a2:	4a50      	ldr	r2, [pc, #320]	@ (80017e4 <HAL_UART_RxCpltCallback+0x240>)
 80016a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a6:	6013      	str	r3, [r2, #0]

        int len = sprintf(msg, "Motor %d set to %ld%%\r\n", motor_id, duty);
 80016a8:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80016ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ae:	494e      	ldr	r1, [pc, #312]	@ (80017e8 <HAL_UART_RxCpltCallback+0x244>)
 80016b0:	4847      	ldr	r0, [pc, #284]	@ (80017d0 <HAL_UART_RxCpltCallback+0x22c>)
 80016b2:	f004 f911 	bl	80058d8 <siprintf>
 80016b6:	6278      	str	r0, [r7, #36]	@ 0x24
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	4943      	ldr	r1, [pc, #268]	@ (80017d0 <HAL_UART_RxCpltCallback+0x22c>)
 80016c2:	4844      	ldr	r0, [pc, #272]	@ (80017d4 <HAL_UART_RxCpltCallback+0x230>)
 80016c4:	f003 f868 	bl	8004798 <HAL_UART_Transmit>
      {
 80016c8:	e05b      	b.n	8001782 <HAL_UART_RxCpltCallback+0x1de>
      }
      else if (rx_buffer[0] == 'E' && rx_buffer[1] == '1' && rx_buffer[2] == 'r' && rx_buffer[3] == 'a')
 80016ca:	4b3f      	ldr	r3, [pc, #252]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b45      	cmp	r3, #69	@ 0x45
 80016d0:	d11d      	bne.n	800170e <HAL_UART_RxCpltCallback+0x16a>
 80016d2:	4b3d      	ldr	r3, [pc, #244]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 80016d4:	785b      	ldrb	r3, [r3, #1]
 80016d6:	2b31      	cmp	r3, #49	@ 0x31
 80016d8:	d119      	bne.n	800170e <HAL_UART_RxCpltCallback+0x16a>
 80016da:	4b3b      	ldr	r3, [pc, #236]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 80016dc:	789b      	ldrb	r3, [r3, #2]
 80016de:	2b72      	cmp	r3, #114	@ 0x72
 80016e0:	d115      	bne.n	800170e <HAL_UART_RxCpltCallback+0x16a>
 80016e2:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 80016e4:	78db      	ldrb	r3, [r3, #3]
 80016e6:	2b61      	cmp	r3, #97	@ 0x61
 80016e8:	d111      	bne.n	800170e <HAL_UART_RxCpltCallback+0x16a>
      {
        int len = sprintf(msg, "Turret 1 angle: %d.%01d deg\r\n", turret1_enc_deg, turret1_enc_deg);
 80016ea:	4b40      	ldr	r3, [pc, #256]	@ (80017ec <HAL_UART_RxCpltCallback+0x248>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b3f      	ldr	r3, [pc, #252]	@ (80017ec <HAL_UART_RxCpltCallback+0x248>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	493f      	ldr	r1, [pc, #252]	@ (80017f0 <HAL_UART_RxCpltCallback+0x24c>)
 80016f4:	4836      	ldr	r0, [pc, #216]	@ (80017d0 <HAL_UART_RxCpltCallback+0x22c>)
 80016f6:	f004 f8ef 	bl	80058d8 <siprintf>
 80016fa:	6238      	str	r0, [r7, #32]
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	4932      	ldr	r1, [pc, #200]	@ (80017d0 <HAL_UART_RxCpltCallback+0x22c>)
 8001706:	4833      	ldr	r0, [pc, #204]	@ (80017d4 <HAL_UART_RxCpltCallback+0x230>)
 8001708:	f003 f846 	bl	8004798 <HAL_UART_Transmit>
      {
 800170c:	e039      	b.n	8001782 <HAL_UART_RxCpltCallback+0x1de>
      }
      else if (rx_buffer[0] == 'E' && rx_buffer[1] == '1')
 800170e:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b45      	cmp	r3, #69	@ 0x45
 8001714:	d128      	bne.n	8001768 <HAL_UART_RxCpltCallback+0x1c4>
 8001716:	4b2c      	ldr	r3, [pc, #176]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	2b31      	cmp	r3, #49	@ 0x31
 800171c:	d124      	bne.n	8001768 <HAL_UART_RxCpltCallback+0x1c4>
      {
        char hex_str[3] = { rx_buffer[2], rx_buffer[3], '\0' };
 800171e:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 8001720:	789b      	ldrb	r3, [r3, #2]
 8001722:	723b      	strb	r3, [r7, #8]
 8001724:	4b28      	ldr	r3, [pc, #160]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 8001726:	78db      	ldrb	r3, [r3, #3]
 8001728:	727b      	strb	r3, [r7, #9]
 800172a:	2300      	movs	r3, #0
 800172c:	72bb      	strb	r3, [r7, #10]
        uint8_t raw = (uint8_t)strtol(hex_str, NULL, 16);
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	2210      	movs	r2, #16
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f004 f8c4 	bl	80058c4 <strtol>
 800173c:	4603      	mov	r3, r0
 800173e:	77fb      	strb	r3, [r7, #31]
        turret1_target = (int32_t)raw;
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	4a2c      	ldr	r2, [pc, #176]	@ (80017f4 <HAL_UART_RxCpltCallback+0x250>)
 8001744:	6013      	str	r3, [r2, #0]

        int len = sprintf(msg, "Turret 1 target set to: %ld\r\n", turret1_target);
 8001746:	4b2b      	ldr	r3, [pc, #172]	@ (80017f4 <HAL_UART_RxCpltCallback+0x250>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	492a      	ldr	r1, [pc, #168]	@ (80017f8 <HAL_UART_RxCpltCallback+0x254>)
 800174e:	4820      	ldr	r0, [pc, #128]	@ (80017d0 <HAL_UART_RxCpltCallback+0x22c>)
 8001750:	f004 f8c2 	bl	80058d8 <siprintf>
 8001754:	61b8      	str	r0, [r7, #24]
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	b29a      	uxth	r2, r3
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	491c      	ldr	r1, [pc, #112]	@ (80017d0 <HAL_UART_RxCpltCallback+0x22c>)
 8001760:	481c      	ldr	r0, [pc, #112]	@ (80017d4 <HAL_UART_RxCpltCallback+0x230>)
 8001762:	f003 f819 	bl	8004798 <HAL_UART_Transmit>
      {
 8001766:	e00c      	b.n	8001782 <HAL_UART_RxCpltCallback+0x1de>
      }
      else
      {
        int len = sprintf(msg, "Invalid command\r\n");
 8001768:	4924      	ldr	r1, [pc, #144]	@ (80017fc <HAL_UART_RxCpltCallback+0x258>)
 800176a:	4819      	ldr	r0, [pc, #100]	@ (80017d0 <HAL_UART_RxCpltCallback+0x22c>)
 800176c:	f004 f8b4 	bl	80058d8 <siprintf>
 8001770:	6178      	str	r0, [r7, #20]
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	b29a      	uxth	r2, r3
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	4915      	ldr	r1, [pc, #84]	@ (80017d0 <HAL_UART_RxCpltCallback+0x22c>)
 800177c:	4815      	ldr	r0, [pc, #84]	@ (80017d4 <HAL_UART_RxCpltCallback+0x230>)
 800177e:	f003 f80b 	bl	8004798 <HAL_UART_Transmit>
      }
      rx_index = 0;
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <HAL_UART_RxCpltCallback+0x220>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e00c      	b.n	80017a4 <HAL_UART_RxCpltCallback+0x200>
    }
    else
    {
      rx_index++;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <HAL_UART_RxCpltCallback+0x220>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_UART_RxCpltCallback+0x220>)
 8001794:	701a      	strb	r2, [r3, #0]
      if (rx_index >= RX_BUFFER_SIZE)
 8001796:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <HAL_UART_RxCpltCallback+0x220>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b04      	cmp	r3, #4
 800179c:	d902      	bls.n	80017a4 <HAL_UART_RxCpltCallback+0x200>
        rx_index = 0;
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_UART_RxCpltCallback+0x220>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, &rx_buffer[rx_index], 1);
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <HAL_UART_RxCpltCallback+0x220>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <HAL_UART_RxCpltCallback+0x224>)
 80017ac:	4413      	add	r3, r2
 80017ae:	2201      	movs	r2, #1
 80017b0:	4619      	mov	r1, r3
 80017b2:	4808      	ldr	r0, [pc, #32]	@ (80017d4 <HAL_UART_RxCpltCallback+0x230>)
 80017b4:	f003 f87b 	bl	80048ae <HAL_UART_Receive_IT>
  }
}
 80017b8:	bf00      	nop
 80017ba:	3730      	adds	r7, #48	@ 0x30
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40011000 	.word	0x40011000
 80017c4:	200003c1 	.word	0x200003c1
 80017c8:	200003bc 	.word	0x200003bc
 80017cc:	08006268 	.word	0x08006268
 80017d0:	200003c4 	.word	0x200003c4
 80017d4:	20000358 	.word	0x20000358
 80017d8:	200003a0 	.word	0x200003a0
 80017dc:	200003a4 	.word	0x200003a4
 80017e0:	200003a8 	.word	0x200003a8
 80017e4:	200003ac 	.word	0x200003ac
 80017e8:	0800627c 	.word	0x0800627c
 80017ec:	200003b4 	.word	0x200003b4
 80017f0:	08006294 	.word	0x08006294
 80017f4:	200003b8 	.word	0x200003b8
 80017f8:	080062b4 	.word	0x080062b4
 80017fc:	080062d4 	.word	0x080062d4

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <Error_Handler+0x8>

0800180c <set_duty>:
#include <stdlib.h>

#define PWM_MAX 2399

void set_duty(motor_t* p_mot, int32_t duty)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    if (duty > 100) duty = 100;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b64      	cmp	r3, #100	@ 0x64
 800181a:	dd01      	ble.n	8001820 <set_duty+0x14>
 800181c:	2364      	movs	r3, #100	@ 0x64
 800181e:	603b      	str	r3, [r7, #0]
    if (duty < -100) duty = -100;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001826:	da02      	bge.n	800182e <set_duty+0x22>
 8001828:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800182c:	603b      	str	r3, [r7, #0]

    uint32_t pwm_val = PWM_MAX * abs(duty) / 100;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	bfb8      	it	lt
 8001834:	425b      	neglt	r3, r3
 8001836:	f640 125f 	movw	r2, #2399	@ 0x95f
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	4a87      	ldr	r2, [pc, #540]	@ (8001a5c <set_duty+0x250>)
 8001840:	fb82 1203 	smull	r1, r2, r2, r3
 8001844:	1152      	asrs	r2, r2, #5
 8001846:	17db      	asrs	r3, r3, #31
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	60fb      	str	r3, [r7, #12]
    p_mot->duty = pwm_val;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	605a      	str	r2, [r3, #4]

    if (duty > 0)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	dd56      	ble.n	8001906 <set_duty+0xfa>
    {
        // Forward: PWM on IN1, LOW on IN2
        HAL_TIM_PWM_Start(p_mot->htim, p_mot->channel_forward);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4619      	mov	r1, r3
 8001862:	4610      	mov	r0, r2
 8001864:	f002 f946 	bl	8003af4 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(p_mot->htim, p_mot->channel_reverse);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f002 f9ee 	bl	8003c54 <HAL_TIM_PWM_Stop>

        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_forward, pwm_val);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <set_duty+0x80>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	635a      	str	r2, [r3, #52]	@ 0x34
 800188a:	e018      	b.n	80018be <set_duty+0xb2>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b04      	cmp	r3, #4
 8001892:	d105      	bne.n	80018a0 <set_duty+0x94>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6393      	str	r3, [r2, #56]	@ 0x38
 800189e:	e00e      	b.n	80018be <set_duty+0xb2>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d105      	bne.n	80018b4 <set_duty+0xa8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018b2:	e004      	b.n	80018be <set_duty+0xb2>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_reverse, 0); // Always low
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <set_duty+0xc6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Stop(p_mot->htim, p_mot->channel_reverse);

        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_forward, 0);
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_reverse, 0);
    }
}
 80018d0:	e0cc      	b.n	8001a6c <set_duty+0x260>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_reverse, 0); // Always low
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d105      	bne.n	80018e6 <set_duty+0xda>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2300      	movs	r3, #0
 80018e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80018e4:	e0c2      	b.n	8001a6c <set_duty+0x260>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d105      	bne.n	80018fa <set_duty+0xee>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2300      	movs	r3, #0
 80018f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018f8:	e0b8      	b.n	8001a6c <set_duty+0x260>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2300      	movs	r3, #0
 8001902:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001904:	e0b2      	b.n	8001a6c <set_duty+0x260>
    else if (duty < 0)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	da56      	bge.n	80019ba <set_duty+0x1ae>
        HAL_TIM_PWM_Stop(p_mot->htim, p_mot->channel_forward);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4619      	mov	r1, r3
 8001916:	4610      	mov	r0, r2
 8001918:	f002 f99c 	bl	8003c54 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Start(p_mot->htim, p_mot->channel_reverse);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f002 f8e4 	bl	8003af4 <HAL_TIM_PWM_Start>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_forward, 0); // Always low
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <set_duty+0x134>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	635a      	str	r2, [r3, #52]	@ 0x34
 800193e:	e018      	b.n	8001972 <set_duty+0x166>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d105      	bne.n	8001954 <set_duty+0x148>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	2300      	movs	r3, #0
 8001950:	6393      	str	r3, [r2, #56]	@ 0x38
 8001952:	e00e      	b.n	8001972 <set_duty+0x166>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b08      	cmp	r3, #8
 800195a:	d105      	bne.n	8001968 <set_duty+0x15c>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001966:	e004      	b.n	8001972 <set_duty+0x166>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_reverse, pwm_val);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <set_duty+0x17a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001984:	e072      	b.n	8001a6c <set_duty+0x260>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_reverse, pwm_val);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b04      	cmp	r3, #4
 800198c:	d105      	bne.n	800199a <set_duty+0x18e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6393      	str	r3, [r2, #56]	@ 0x38
 8001998:	e068      	b.n	8001a6c <set_duty+0x260>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d105      	bne.n	80019ae <set_duty+0x1a2>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019ac:	e05e      	b.n	8001a6c <set_duty+0x260>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80019b8:	e058      	b.n	8001a6c <set_duty+0x260>
        HAL_TIM_PWM_Stop(p_mot->htim, p_mot->channel_forward);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4619      	mov	r1, r3
 80019c4:	4610      	mov	r0, r2
 80019c6:	f002 f945 	bl	8003c54 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Stop(p_mot->htim, p_mot->channel_reverse);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f002 f93d 	bl	8003c54 <HAL_TIM_PWM_Stop>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_forward, 0);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d105      	bne.n	80019ee <set_duty+0x1e2>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2200      	movs	r2, #0
 80019ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80019ec:	e018      	b.n	8001a20 <set_duty+0x214>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d105      	bne.n	8001a02 <set_duty+0x1f6>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2300      	movs	r3, #0
 80019fe:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a00:	e00e      	b.n	8001a20 <set_duty+0x214>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d105      	bne.n	8001a16 <set_duty+0x20a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2300      	movs	r3, #0
 8001a12:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001a14:	e004      	b.n	8001a20 <set_duty+0x214>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_reverse, 0);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <set_duty+0x228>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a32:	e01b      	b.n	8001a6c <set_duty+0x260>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_reverse, 0);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d105      	bne.n	8001a48 <set_duty+0x23c>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	2300      	movs	r3, #0
 8001a44:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a46:	e011      	b.n	8001a6c <set_duty+0x260>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_reverse, 0);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d107      	bne.n	8001a60 <set_duty+0x254>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001a5a:	e007      	b.n	8001a6c <set_duty+0x260>
 8001a5c:	51eb851f 	.word	0x51eb851f
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->channel_reverse, 0);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	2300      	movs	r3, #0
 8001a68:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a6a:	e7ff      	b.n	8001a6c <set_duty+0x260>
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a17      	ldr	r2, [pc, #92]	@ (8001b40 <HAL_ADC_MspInit+0x7c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d127      	bne.n	8001b36 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <HAL_ADC_MspInit+0x80>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a15      	ldr	r2, [pc, #84]	@ (8001b44 <HAL_ADC_MspInit+0x80>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <HAL_ADC_MspInit+0x80>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_ADC_MspInit+0x80>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b44 <HAL_ADC_MspInit+0x80>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b12:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <HAL_ADC_MspInit+0x80>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b22:	2303      	movs	r3, #3
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <HAL_ADC_MspInit+0x84>)
 8001b32:	f001 f807 	bl	8002b44 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	@ 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40012000 	.word	0x40012000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000

08001b4c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	@ 0x30
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a3a      	ldr	r2, [pc, #232]	@ (8001c54 <HAL_I2C_MspInit+0x108>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d12c      	bne.n	8001bc8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	4b39      	ldr	r3, [pc, #228]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a38      	ldr	r2, [pc, #224]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b36      	ldr	r3, [pc, #216]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8a:	23c0      	movs	r3, #192	@ 0xc0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8e:	2312      	movs	r3, #18
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	482d      	ldr	r0, [pc, #180]	@ (8001c5c <HAL_I2C_MspInit+0x110>)
 8001ba6:	f000 ffcd 	bl	8002b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	4b2a      	ldr	r3, [pc, #168]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	4a29      	ldr	r2, [pc, #164]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001bb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bba:	4b27      	ldr	r3, [pc, #156]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bc6:	e041      	b.n	8001c4c <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a24      	ldr	r2, [pc, #144]	@ (8001c60 <HAL_I2C_MspInit+0x114>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d13c      	bne.n	8001c4c <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a1f      	ldr	r2, [pc, #124]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf4:	2312      	movs	r3, #18
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c00:	2304      	movs	r3, #4
 8001c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4814      	ldr	r0, [pc, #80]	@ (8001c5c <HAL_I2C_MspInit+0x110>)
 8001c0c:	f000 ff9a 	bl	8002b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c10:	2308      	movs	r3, #8
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c14:	2312      	movs	r3, #18
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001c20:	2309      	movs	r3, #9
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480c      	ldr	r0, [pc, #48]	@ (8001c5c <HAL_I2C_MspInit+0x110>)
 8001c2c:	f000 ff8a 	bl	8002b44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	4a07      	ldr	r2, [pc, #28]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001c3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_I2C_MspInit+0x10c>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	@ 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40005400 	.word	0x40005400
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40005800 	.word	0x40005800

08001c64 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08c      	sub	sp, #48	@ 0x30
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2d      	ldr	r2, [pc, #180]	@ (8001d38 <HAL_TIM_PWM_MspInit+0xd4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10e      	bne.n	8001ca4 <HAL_TIM_PWM_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b29      	ldr	r3, [pc, #164]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001ca2:	e044      	b.n	8001d2e <HAL_TIM_PWM_MspInit+0xca>
  else if(htim_pwm->Instance==TIM3)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a25      	ldr	r2, [pc, #148]	@ (8001d40 <HAL_TIM_PWM_MspInit+0xdc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d12c      	bne.n	8001d08 <HAL_TIM_PWM_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	4a21      	ldr	r2, [pc, #132]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ce6:	2330      	movs	r3, #48	@ 0x30
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4810      	ldr	r0, [pc, #64]	@ (8001d44 <HAL_TIM_PWM_MspInit+0xe0>)
 8001d02:	f000 ff1f 	bl	8002b44 <HAL_GPIO_Init>
}
 8001d06:	e012      	b.n	8001d2e <HAL_TIM_PWM_MspInit+0xca>
  else if(htim_pwm->Instance==TIM9)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <HAL_TIM_PWM_MspInit+0xe4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10d      	bne.n	8001d2e <HAL_TIM_PWM_MspInit+0xca>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	4a08      	ldr	r2, [pc, #32]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_TIM_PWM_MspInit+0xd8>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
}
 8001d2e:	bf00      	nop
 8001d30:	3730      	adds	r7, #48	@ 0x30
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40014000 	.word	0x40014000

08001d4c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d6c:	d12c      	bne.n	8001dc8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	4a16      	ldr	r2, [pc, #88]	@ (8001dd0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001da6:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001db8:	2301      	movs	r3, #1
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4804      	ldr	r0, [pc, #16]	@ (8001dd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001dc4:	f000 febe 	bl	8002b44 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001dc8:	bf00      	nop
 8001dca:	3728      	adds	r7, #40	@ 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a15      	ldr	r2, [pc, #84]	@ (8001e3c <HAL_TIM_Base_MspInit+0x64>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <HAL_TIM_Base_MspInit+0x68>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4a13      	ldr	r2, [pc, #76]	@ (8001e40 <HAL_TIM_Base_MspInit+0x68>)
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <HAL_TIM_Base_MspInit+0x68>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001e06:	e012      	b.n	8001e2e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <HAL_TIM_Base_MspInit+0x6c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10d      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <HAL_TIM_Base_MspInit+0x68>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4a09      	ldr	r2, [pc, #36]	@ (8001e40 <HAL_TIM_Base_MspInit+0x68>)
 8001e1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <HAL_TIM_Base_MspInit+0x68>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40014400 	.word	0x40014400
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40014800 	.word	0x40014800

08001e48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	@ 0x30
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a5b      	ldr	r2, [pc, #364]	@ (8001fd4 <HAL_TIM_MspPostInit+0x18c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d11f      	bne.n	8001eaa <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	4a59      	ldr	r2, [pc, #356]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7a:	4b57      	ldr	r3, [pc, #348]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001e86:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	484e      	ldr	r0, [pc, #312]	@ (8001fdc <HAL_TIM_MspPostInit+0x194>)
 8001ea4:	f000 fe4e 	bl	8002b44 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM11_MspPostInit 1 */

    /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001ea8:	e090      	b.n	8001fcc <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a4c      	ldr	r2, [pc, #304]	@ (8001fe0 <HAL_TIM_MspPostInit+0x198>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d11e      	bne.n	8001ef2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	4b47      	ldr	r3, [pc, #284]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebc:	4a46      	ldr	r2, [pc, #280]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec4:	4b44      	ldr	r3, [pc, #272]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	483e      	ldr	r0, [pc, #248]	@ (8001fe4 <HAL_TIM_MspPostInit+0x19c>)
 8001eec:	f000 fe2a 	bl	8002b44 <HAL_GPIO_Init>
}
 8001ef0:	e06c      	b.n	8001fcc <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM9)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a3c      	ldr	r2, [pc, #240]	@ (8001fe8 <HAL_TIM_MspPostInit+0x1a0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d11e      	bne.n	8001f3a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	4b35      	ldr	r3, [pc, #212]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f04:	4a34      	ldr	r2, [pc, #208]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0c:	4b32      	ldr	r3, [pc, #200]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f18:	230c      	movs	r3, #12
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	482a      	ldr	r0, [pc, #168]	@ (8001fdc <HAL_TIM_MspPostInit+0x194>)
 8001f34:	f000 fe06 	bl	8002b44 <HAL_GPIO_Init>
}
 8001f38:	e048      	b.n	8001fcc <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM10)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8001fec <HAL_TIM_MspPostInit+0x1a4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d11f      	bne.n	8001f84 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b23      	ldr	r3, [pc, #140]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	4a22      	ldr	r2, [pc, #136]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001f4e:	f043 0302 	orr.w	r3, r3, #2
 8001f52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f54:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001f72:	2303      	movs	r3, #3
 8001f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4819      	ldr	r0, [pc, #100]	@ (8001fe4 <HAL_TIM_MspPostInit+0x19c>)
 8001f7e:	f000 fde1 	bl	8002b44 <HAL_GPIO_Init>
}
 8001f82:	e023      	b.n	8001fcc <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM11)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <HAL_TIM_MspPostInit+0x1a8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d11e      	bne.n	8001fcc <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_TIM_MspPostInit+0x190>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001faa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4807      	ldr	r0, [pc, #28]	@ (8001fe4 <HAL_TIM_MspPostInit+0x19c>)
 8001fc8:	f000 fdbc 	bl	8002b44 <HAL_GPIO_Init>
}
 8001fcc:	bf00      	nop
 8001fce:	3730      	adds	r7, #48	@ 0x30
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40014000 	.word	0x40014000
 8001fec:	40014400 	.word	0x40014400
 8001ff0:	40014800 	.word	0x40014800

08001ff4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	@ 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <HAL_UART_MspInit+0x94>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d134      	bne.n	8002080 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b1c      	ldr	r3, [pc, #112]	@ (800208c <HAL_UART_MspInit+0x98>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	4a1b      	ldr	r2, [pc, #108]	@ (800208c <HAL_UART_MspInit+0x98>)
 8002020:	f043 0310 	orr.w	r3, r3, #16
 8002024:	6453      	str	r3, [r2, #68]	@ 0x44
 8002026:	4b19      	ldr	r3, [pc, #100]	@ (800208c <HAL_UART_MspInit+0x98>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <HAL_UART_MspInit+0x98>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a14      	ldr	r2, [pc, #80]	@ (800208c <HAL_UART_MspInit+0x98>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b12      	ldr	r3, [pc, #72]	@ (800208c <HAL_UART_MspInit+0x98>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800204e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002060:	2307      	movs	r3, #7
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	4809      	ldr	r0, [pc, #36]	@ (8002090 <HAL_UART_MspInit+0x9c>)
 800206c:	f000 fd6a 	bl	8002b44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002070:	2200      	movs	r2, #0
 8002072:	2100      	movs	r1, #0
 8002074:	2025      	movs	r0, #37	@ 0x25
 8002076:	f000 fc9c 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800207a:	2025      	movs	r0, #37	@ 0x25
 800207c:	f000 fcb5 	bl	80029ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002080:	bf00      	nop
 8002082:	3728      	adds	r7, #40	@ 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40011000 	.word	0x40011000
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <NMI_Handler+0x4>

0800209c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <MemManage_Handler+0x4>

080020ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <BusFault_Handler+0x4>

080020b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <UsageFault_Handler+0x4>

080020bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ea:	f000 f8d1 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020f8:	4802      	ldr	r0, [pc, #8]	@ (8002104 <USART1_IRQHandler+0x10>)
 80020fa:	f002 fbfd 	bl	80048f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000358 	.word	0x20000358

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f003 fbf8 	bl	800592c <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	@ (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20020000 	.word	0x20020000
 8002168:	00000400 	.word	0x00000400
 800216c:	20000404 	.word	0x20000404
 8002170:	20000558 	.word	0x20000558

08002174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	@ (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800219c:	f7ff ffea 	bl	8002174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	@ (80021d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	@ (80021d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	@ (80021e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c6:	f003 fbb7 	bl	8005938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7fe fcfd 	bl	8000bc8 <main>
  bx  lr    
 80021ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80021dc:	08006444 	.word	0x08006444
  ldr r2, =_sbss
 80021e0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80021e4:	20000554 	.word	0x20000554

080021e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f0:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <HAL_Init+0x40>)
 80021f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <HAL_Init+0x40>)
 8002202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	@ (800222c <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a07      	ldr	r2, [pc, #28]	@ (800222c <HAL_Init+0x40>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 fbc1 	bl	800299c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	200f      	movs	r0, #15
 800221c:	f000 f808 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7ff fc28 	bl	8001a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fbd9 	bl	8002a06 <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f000 fba1 	bl	80029b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	@ (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000040 	.word	0x20000040
 8002288:	20000048 	.word	0x20000048
 800228c:	20000044 	.word	0x20000044

08002290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_IncTick+0x20>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_IncTick+0x24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <HAL_IncTick+0x24>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000048 	.word	0x20000048
 80022b4:	20000408 	.word	0x20000408

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <HAL_GetTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000408 	.word	0x20000408

080022d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff ffee 	bl	80022b8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f6:	bf00      	nop
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000048 	.word	0x20000048

08002318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e033      	b.n	8002396 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fbc4 	bl	8001ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800235e:	f023 0302 	bic.w	r3, r3, #2
 8002362:	f043 0202 	orr.w	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f94a 	bl	8002604 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	f023 0303 	bic.w	r3, r3, #3
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	@ 0x40
 8002386:	e001      	b.n	800238c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x1c>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e113      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x244>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b09      	cmp	r3, #9
 80023ca:	d925      	bls.n	8002418 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	3b1e      	subs	r3, #30
 80023e2:	2207      	movs	r2, #7
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43da      	mvns	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	400a      	ands	r2, r1
 80023f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68d9      	ldr	r1, [r3, #12]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	4618      	mov	r0, r3
 8002404:	4603      	mov	r3, r0
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4403      	add	r3, r0
 800240a:	3b1e      	subs	r3, #30
 800240c:	409a      	lsls	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	e022      	b.n	800245e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6919      	ldr	r1, [r3, #16]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	2207      	movs	r2, #7
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	400a      	ands	r2, r1
 800243a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6919      	ldr	r1, [r3, #16]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	4603      	mov	r3, r0
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4403      	add	r3, r0
 8002454:	409a      	lsls	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b06      	cmp	r3, #6
 8002464:	d824      	bhi.n	80024b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	3b05      	subs	r3, #5
 8002478:	221f      	movs	r2, #31
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	400a      	ands	r2, r1
 8002486:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	3b05      	subs	r3, #5
 80024a2:	fa00 f203 	lsl.w	r2, r0, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80024ae:	e04c      	b.n	800254a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	d824      	bhi.n	8002502 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	3b23      	subs	r3, #35	@ 0x23
 80024ca:	221f      	movs	r2, #31
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43da      	mvns	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	400a      	ands	r2, r1
 80024d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b23      	subs	r3, #35	@ 0x23
 80024f4:	fa00 f203 	lsl.w	r2, r0, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002500:	e023      	b.n	800254a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	3b41      	subs	r3, #65	@ 0x41
 8002514:	221f      	movs	r2, #31
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	400a      	ands	r2, r1
 8002522:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	4618      	mov	r0, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b41      	subs	r3, #65	@ 0x41
 800253e:	fa00 f203 	lsl.w	r2, r0, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800254a:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <HAL_ADC_ConfigChannel+0x250>)
 800254c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a28      	ldr	r2, [pc, #160]	@ (80025f4 <HAL_ADC_ConfigChannel+0x254>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d10f      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x1d8>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b12      	cmp	r3, #18
 800255e:	d10b      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1d      	ldr	r2, [pc, #116]	@ (80025f4 <HAL_ADC_ConfigChannel+0x254>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d12b      	bne.n	80025da <HAL_ADC_ConfigChannel+0x23a>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1c      	ldr	r2, [pc, #112]	@ (80025f8 <HAL_ADC_ConfigChannel+0x258>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d003      	beq.n	8002594 <HAL_ADC_ConfigChannel+0x1f4>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b11      	cmp	r3, #17
 8002592:	d122      	bne.n	80025da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a11      	ldr	r2, [pc, #68]	@ (80025f8 <HAL_ADC_ConfigChannel+0x258>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d111      	bne.n	80025da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025b6:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <HAL_ADC_ConfigChannel+0x25c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a11      	ldr	r2, [pc, #68]	@ (8002600 <HAL_ADC_ConfigChannel+0x260>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	0c9a      	lsrs	r2, r3, #18
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f9      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40012300 	.word	0x40012300
 80025f4:	40012000 	.word	0x40012000
 80025f8:	10000012 	.word	0x10000012
 80025fc:	20000040 	.word	0x20000040
 8002600:	431bde83 	.word	0x431bde83

08002604 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800260c:	4b79      	ldr	r3, [pc, #484]	@ (80027f4 <ADC_Init+0x1f0>)
 800260e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	431a      	orrs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002638:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6859      	ldr	r1, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	021a      	lsls	r2, r3, #8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800265c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800267e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6899      	ldr	r1, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002696:	4a58      	ldr	r2, [pc, #352]	@ (80027f8 <ADC_Init+0x1f4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d022      	beq.n	80026e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6899      	ldr	r1, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6899      	ldr	r1, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	e00f      	b.n	8002702 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002700:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0202 	bic.w	r2, r2, #2
 8002710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6899      	ldr	r1, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	7e1b      	ldrb	r3, [r3, #24]
 800271c:	005a      	lsls	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01b      	beq.n	8002768 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800273e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800274e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	3b01      	subs	r3, #1
 800275c:	035a      	lsls	r2, r3, #13
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	e007      	b.n	8002778 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002776:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002786:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	3b01      	subs	r3, #1
 8002794:	051a      	lsls	r2, r3, #20
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027ba:	025a      	lsls	r2, r3, #9
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6899      	ldr	r1, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	029a      	lsls	r2, r3, #10
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40012300 	.word	0x40012300
 80027f8:	0f000001 	.word	0x0f000001

080027fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	@ (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	@ (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4907      	ldr	r1, [pc, #28]	@ (8002898 <__NVIC_EnableIRQ+0x38>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0a      	blt.n	80028c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	490c      	ldr	r1, [pc, #48]	@ (80028e8 <__NVIC_SetPriority+0x4c>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	440b      	add	r3, r1
 80028c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c4:	e00a      	b.n	80028dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4908      	ldr	r1, [pc, #32]	@ (80028ec <__NVIC_SetPriority+0x50>)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3b04      	subs	r3, #4
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	440b      	add	r3, r1
 80028da:	761a      	strb	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	@ 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f1c3 0307 	rsb	r3, r3, #7
 800290a:	2b04      	cmp	r3, #4
 800290c:	bf28      	it	cs
 800290e:	2304      	movcs	r3, #4
 8002910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3304      	adds	r3, #4
 8002916:	2b06      	cmp	r3, #6
 8002918:	d902      	bls.n	8002920 <NVIC_EncodePriority+0x30>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3b03      	subs	r3, #3
 800291e:	e000      	b.n	8002922 <NVIC_EncodePriority+0x32>
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002938:	f04f 31ff 	mov.w	r1, #4294967295
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	43d9      	mvns	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	4313      	orrs	r3, r2
         );
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	@ 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002968:	d301      	bcc.n	800296e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296a:	2301      	movs	r3, #1
 800296c:	e00f      	b.n	800298e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296e:	4a0a      	ldr	r2, [pc, #40]	@ (8002998 <SysTick_Config+0x40>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002976:	210f      	movs	r1, #15
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	f7ff ff8e 	bl	800289c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <SysTick_Config+0x40>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002986:	4b04      	ldr	r3, [pc, #16]	@ (8002998 <SysTick_Config+0x40>)
 8002988:	2207      	movs	r2, #7
 800298a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	e000e010 	.word	0xe000e010

0800299c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff29 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c4:	f7ff ff3e 	bl	8002844 <__NVIC_GetPriorityGrouping>
 80029c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff8e 	bl	80028f0 <NVIC_EncodePriority>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff5d 	bl	800289c <__NVIC_SetPriority>
}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff31 	bl	8002860 <__NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff ffa2 	bl	8002958 <SysTick_Config>
 8002a14:	4603      	mov	r3, r0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a2c:	f7ff fc44 	bl	80022b8 <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d008      	beq.n	8002a50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2280      	movs	r2, #128	@ 0x80
 8002a42:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e052      	b.n	8002af6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0216 	bic.w	r2, r2, #22
 8002a5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d103      	bne.n	8002a80 <HAL_DMA_Abort+0x62>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0208 	bic.w	r2, r2, #8
 8002a8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa0:	e013      	b.n	8002aca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aa2:	f7ff fc09 	bl	80022b8 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d90c      	bls.n	8002aca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e015      	b.n	8002af6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e4      	bne.n	8002aa2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002adc:	223f      	movs	r2, #63	@ 0x3f
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d004      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2280      	movs	r2, #128	@ 0x80
 8002b16:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e00c      	b.n	8002b36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2205      	movs	r2, #5
 8002b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	@ 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	e159      	b.n	8002e14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	f040 8148 	bne.w	8002e0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d005      	beq.n	8002b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d130      	bne.n	8002bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bcc:	2201      	movs	r2, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 0201 	and.w	r2, r3, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d017      	beq.n	8002c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d123      	bne.n	8002c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	08da      	lsrs	r2, r3, #3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3208      	adds	r2, #8
 8002c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	220f      	movs	r2, #15
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	08da      	lsrs	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3208      	adds	r2, #8
 8002c82:	69b9      	ldr	r1, [r7, #24]
 8002c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0203 	and.w	r2, r3, #3
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80a2 	beq.w	8002e0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	4b57      	ldr	r3, [pc, #348]	@ (8002e2c <HAL_GPIO_Init+0x2e8>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	4a56      	ldr	r2, [pc, #344]	@ (8002e2c <HAL_GPIO_Init+0x2e8>)
 8002cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cda:	4b54      	ldr	r3, [pc, #336]	@ (8002e2c <HAL_GPIO_Init+0x2e8>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ce6:	4a52      	ldr	r2, [pc, #328]	@ (8002e30 <HAL_GPIO_Init+0x2ec>)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	3302      	adds	r3, #2
 8002cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a49      	ldr	r2, [pc, #292]	@ (8002e34 <HAL_GPIO_Init+0x2f0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d019      	beq.n	8002d46 <HAL_GPIO_Init+0x202>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a48      	ldr	r2, [pc, #288]	@ (8002e38 <HAL_GPIO_Init+0x2f4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0x1fe>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a47      	ldr	r2, [pc, #284]	@ (8002e3c <HAL_GPIO_Init+0x2f8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00d      	beq.n	8002d3e <HAL_GPIO_Init+0x1fa>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a46      	ldr	r2, [pc, #280]	@ (8002e40 <HAL_GPIO_Init+0x2fc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <HAL_GPIO_Init+0x1f6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a45      	ldr	r2, [pc, #276]	@ (8002e44 <HAL_GPIO_Init+0x300>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_GPIO_Init+0x1f2>
 8002d32:	2304      	movs	r3, #4
 8002d34:	e008      	b.n	8002d48 <HAL_GPIO_Init+0x204>
 8002d36:	2307      	movs	r3, #7
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x204>
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e004      	b.n	8002d48 <HAL_GPIO_Init+0x204>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_Init+0x204>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_GPIO_Init+0x204>
 8002d46:	2300      	movs	r3, #0
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f002 0203 	and.w	r2, r2, #3
 8002d4e:	0092      	lsls	r2, r2, #2
 8002d50:	4093      	lsls	r3, r2
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d58:	4935      	ldr	r1, [pc, #212]	@ (8002e30 <HAL_GPIO_Init+0x2ec>)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d66:	4b38      	ldr	r3, [pc, #224]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d90:	4b2d      	ldr	r3, [pc, #180]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db4:	4a24      	ldr	r2, [pc, #144]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dba:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dde:	4a1a      	ldr	r2, [pc, #104]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de4:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e08:	4a0f      	ldr	r2, [pc, #60]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3301      	adds	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	f67f aea2 	bls.w	8002b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	3724      	adds	r7, #36	@ 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40013800 	.word	0x40013800
 8002e34:	40020000 	.word	0x40020000
 8002e38:	40020400 	.word	0x40020400
 8002e3c:	40020800 	.word	0x40020800
 8002e40:	40020c00 	.word	0x40020c00
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40013c00 	.word	0x40013c00

08002e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e5c:	787b      	ldrb	r3, [r7, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e68:	e003      	b.n	8002e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	041a      	lsls	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	619a      	str	r2, [r3, #24]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e12b      	b.n	80030ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fe fe50 	bl	8001b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	@ 0x24
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0201 	bic.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ed2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ee4:	f000 fd40 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8002ee8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4a81      	ldr	r2, [pc, #516]	@ (80030f4 <HAL_I2C_Init+0x274>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d807      	bhi.n	8002f04 <HAL_I2C_Init+0x84>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4a80      	ldr	r2, [pc, #512]	@ (80030f8 <HAL_I2C_Init+0x278>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	bf94      	ite	ls
 8002efc:	2301      	movls	r3, #1
 8002efe:	2300      	movhi	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e006      	b.n	8002f12 <HAL_I2C_Init+0x92>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a7d      	ldr	r2, [pc, #500]	@ (80030fc <HAL_I2C_Init+0x27c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	bf94      	ite	ls
 8002f0c:	2301      	movls	r3, #1
 8002f0e:	2300      	movhi	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0e7      	b.n	80030ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4a78      	ldr	r2, [pc, #480]	@ (8003100 <HAL_I2C_Init+0x280>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	0c9b      	lsrs	r3, r3, #18
 8002f24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a6a      	ldr	r2, [pc, #424]	@ (80030f4 <HAL_I2C_Init+0x274>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d802      	bhi.n	8002f54 <HAL_I2C_Init+0xd4>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	3301      	adds	r3, #1
 8002f52:	e009      	b.n	8002f68 <HAL_I2C_Init+0xe8>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	4a69      	ldr	r2, [pc, #420]	@ (8003104 <HAL_I2C_Init+0x284>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	3301      	adds	r3, #1
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	495c      	ldr	r1, [pc, #368]	@ (80030f4 <HAL_I2C_Init+0x274>)
 8002f84:	428b      	cmp	r3, r1
 8002f86:	d819      	bhi.n	8002fbc <HAL_I2C_Init+0x13c>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e59      	subs	r1, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f96:	1c59      	adds	r1, r3, #1
 8002f98:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_I2C_Init+0x138>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1e59      	subs	r1, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb6:	e051      	b.n	800305c <HAL_I2C_Init+0x1dc>
 8002fb8:	2304      	movs	r3, #4
 8002fba:	e04f      	b.n	800305c <HAL_I2C_Init+0x1dc>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d111      	bne.n	8002fe8 <HAL_I2C_Init+0x168>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1e58      	subs	r0, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	440b      	add	r3, r1
 8002fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e012      	b.n	800300e <HAL_I2C_Init+0x18e>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1e58      	subs	r0, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	0099      	lsls	r1, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffe:	3301      	adds	r3, #1
 8003000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Init+0x196>
 8003012:	2301      	movs	r3, #1
 8003014:	e022      	b.n	800305c <HAL_I2C_Init+0x1dc>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10e      	bne.n	800303c <HAL_I2C_Init+0x1bc>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1e58      	subs	r0, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6859      	ldr	r1, [r3, #4]
 8003026:	460b      	mov	r3, r1
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	440b      	add	r3, r1
 800302c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003030:	3301      	adds	r3, #1
 8003032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800303a:	e00f      	b.n	800305c <HAL_I2C_Init+0x1dc>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1e58      	subs	r0, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	0099      	lsls	r1, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003052:	3301      	adds	r3, #1
 8003054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003058:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	6809      	ldr	r1, [r1, #0]
 8003060:	4313      	orrs	r3, r2
 8003062:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800308a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6911      	ldr	r1, [r2, #16]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68d2      	ldr	r2, [r2, #12]
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	000186a0 	.word	0x000186a0
 80030f8:	001e847f 	.word	0x001e847f
 80030fc:	003d08ff 	.word	0x003d08ff
 8003100:	431bde83 	.word	0x431bde83
 8003104:	10624dd3 	.word	0x10624dd3

08003108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e267      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d075      	beq.n	8003212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003126:	4b88      	ldr	r3, [pc, #544]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b04      	cmp	r3, #4
 8003130:	d00c      	beq.n	800314c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003132:	4b85      	ldr	r3, [pc, #532]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800313a:	2b08      	cmp	r3, #8
 800313c:	d112      	bne.n	8003164 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313e:	4b82      	ldr	r3, [pc, #520]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800314a:	d10b      	bne.n	8003164 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	4b7e      	ldr	r3, [pc, #504]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d05b      	beq.n	8003210 <HAL_RCC_OscConfig+0x108>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d157      	bne.n	8003210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e242      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800316c:	d106      	bne.n	800317c <HAL_RCC_OscConfig+0x74>
 800316e:	4b76      	ldr	r3, [pc, #472]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a75      	ldr	r2, [pc, #468]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e01d      	b.n	80031b8 <HAL_RCC_OscConfig+0xb0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x98>
 8003186:	4b70      	ldr	r3, [pc, #448]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6f      	ldr	r2, [pc, #444]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 800318c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b6d      	ldr	r3, [pc, #436]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6c      	ldr	r2, [pc, #432]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_OscConfig+0xb0>
 80031a0:	4b69      	ldr	r3, [pc, #420]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a68      	ldr	r2, [pc, #416]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b66      	ldr	r3, [pc, #408]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a65      	ldr	r2, [pc, #404]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 80031b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7ff f87a 	bl	80022b8 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7ff f876 	bl	80022b8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	@ 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e207      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b5b      	ldr	r3, [pc, #364]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0xc0>
 80031e6:	e014      	b.n	8003212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7ff f866 	bl	80022b8 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7ff f862 	bl	80022b8 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	@ 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e1f3      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	4b51      	ldr	r3, [pc, #324]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0xe8>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d063      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800321e:	4b4a      	ldr	r3, [pc, #296]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322a:	4b47      	ldr	r3, [pc, #284]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003232:	2b08      	cmp	r3, #8
 8003234:	d11c      	bne.n	8003270 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003236:	4b44      	ldr	r3, [pc, #272]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d116      	bne.n	8003270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_RCC_OscConfig+0x152>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e1c7      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325a:	4b3b      	ldr	r3, [pc, #236]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4937      	ldr	r1, [pc, #220]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	e03a      	b.n	80032e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d020      	beq.n	80032ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003278:	4b34      	ldr	r3, [pc, #208]	@ (800334c <HAL_RCC_OscConfig+0x244>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7ff f81b 	bl	80022b8 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003286:	f7ff f817 	bl	80022b8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e1a8      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	4b2b      	ldr	r3, [pc, #172]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	4b28      	ldr	r3, [pc, #160]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4925      	ldr	r1, [pc, #148]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]
 80032b8:	e015      	b.n	80032e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ba:	4b24      	ldr	r3, [pc, #144]	@ (800334c <HAL_RCC_OscConfig+0x244>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fffa 	bl	80022b8 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c8:	f7fe fff6 	bl	80022b8 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e187      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d036      	beq.n	8003360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fa:	4b15      	ldr	r3, [pc, #84]	@ (8003350 <HAL_RCC_OscConfig+0x248>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7fe ffda 	bl	80022b8 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003308:	f7fe ffd6 	bl	80022b8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e167      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <HAL_RCC_OscConfig+0x240>)
 800331c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x200>
 8003326:	e01b      	b.n	8003360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003328:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <HAL_RCC_OscConfig+0x248>)
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332e:	f7fe ffc3 	bl	80022b8 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003334:	e00e      	b.n	8003354 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003336:	f7fe ffbf 	bl	80022b8 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d907      	bls.n	8003354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e150      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
 8003348:	40023800 	.word	0x40023800
 800334c:	42470000 	.word	0x42470000
 8003350:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	4b88      	ldr	r3, [pc, #544]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ea      	bne.n	8003336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8097 	beq.w	800349c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003372:	4b81      	ldr	r3, [pc, #516]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10f      	bne.n	800339e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	4b7d      	ldr	r3, [pc, #500]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003386:	4a7c      	ldr	r2, [pc, #496]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800338c:	6413      	str	r3, [r2, #64]	@ 0x40
 800338e:	4b7a      	ldr	r3, [pc, #488]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339a:	2301      	movs	r3, #1
 800339c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	4b77      	ldr	r3, [pc, #476]	@ (800357c <HAL_RCC_OscConfig+0x474>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d118      	bne.n	80033dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033aa:	4b74      	ldr	r3, [pc, #464]	@ (800357c <HAL_RCC_OscConfig+0x474>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a73      	ldr	r2, [pc, #460]	@ (800357c <HAL_RCC_OscConfig+0x474>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b6:	f7fe ff7f 	bl	80022b8 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033be:	f7fe ff7b 	bl	80022b8 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e10c      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	4b6a      	ldr	r3, [pc, #424]	@ (800357c <HAL_RCC_OscConfig+0x474>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x2ea>
 80033e4:	4b64      	ldr	r3, [pc, #400]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e8:	4a63      	ldr	r2, [pc, #396]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f0:	e01c      	b.n	800342c <HAL_RCC_OscConfig+0x324>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x30c>
 80033fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003400:	f043 0304 	orr.w	r3, r3, #4
 8003404:	6713      	str	r3, [r2, #112]	@ 0x70
 8003406:	4b5c      	ldr	r3, [pc, #368]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340a:	4a5b      	ldr	r2, [pc, #364]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	6713      	str	r3, [r2, #112]	@ 0x70
 8003412:	e00b      	b.n	800342c <HAL_RCC_OscConfig+0x324>
 8003414:	4b58      	ldr	r3, [pc, #352]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003418:	4a57      	ldr	r2, [pc, #348]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003420:	4b55      	ldr	r3, [pc, #340]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003424:	4a54      	ldr	r2, [pc, #336]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003426:	f023 0304 	bic.w	r3, r3, #4
 800342a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d015      	beq.n	8003460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fe ff40 	bl	80022b8 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fe ff3c 	bl	80022b8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e0cb      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003452:	4b49      	ldr	r3, [pc, #292]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0ee      	beq.n	800343c <HAL_RCC_OscConfig+0x334>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7fe ff2a 	bl	80022b8 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003466:	e00a      	b.n	800347e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003468:	f7fe ff26 	bl	80022b8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0b5      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347e:	4b3e      	ldr	r3, [pc, #248]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1ee      	bne.n	8003468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003490:	4b39      	ldr	r3, [pc, #228]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	4a38      	ldr	r2, [pc, #224]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800349a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80a1 	beq.w	80035e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034a6:	4b34      	ldr	r3, [pc, #208]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d05c      	beq.n	800356c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d141      	bne.n	800353e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ba:	4b31      	ldr	r3, [pc, #196]	@ (8003580 <HAL_RCC_OscConfig+0x478>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe fefa 	bl	80022b8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fef6 	bl	80022b8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e087      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	4b27      	ldr	r3, [pc, #156]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	019b      	lsls	r3, r3, #6
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	3b01      	subs	r3, #1
 8003500:	041b      	lsls	r3, r3, #16
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003508:	061b      	lsls	r3, r3, #24
 800350a:	491b      	ldr	r1, [pc, #108]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003510:	4b1b      	ldr	r3, [pc, #108]	@ (8003580 <HAL_RCC_OscConfig+0x478>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003516:	f7fe fecf 	bl	80022b8 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351e:	f7fe fecb 	bl	80022b8 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e05c      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003530:	4b11      	ldr	r3, [pc, #68]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x416>
 800353c:	e054      	b.n	80035e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b10      	ldr	r3, [pc, #64]	@ (8003580 <HAL_RCC_OscConfig+0x478>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fe feb8 	bl	80022b8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe feb4 	bl	80022b8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e045      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <HAL_RCC_OscConfig+0x470>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x444>
 800356a:	e03d      	b.n	80035e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e038      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
 8003578:	40023800 	.word	0x40023800
 800357c:	40007000 	.word	0x40007000
 8003580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003584:	4b1b      	ldr	r3, [pc, #108]	@ (80035f4 <HAL_RCC_OscConfig+0x4ec>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d028      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d121      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d11a      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035b4:	4013      	ands	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035bc:	4293      	cmp	r3, r2
 80035be:	d111      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	3b01      	subs	r3, #1
 80035ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800

080035f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0cc      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800360c:	4b68      	ldr	r3, [pc, #416]	@ (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d90c      	bls.n	8003634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b65      	ldr	r3, [pc, #404]	@ (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b63      	ldr	r3, [pc, #396]	@ (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0b8      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800364c:	4b59      	ldr	r3, [pc, #356]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4a58      	ldr	r2, [pc, #352]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003664:	4b53      	ldr	r3, [pc, #332]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a52      	ldr	r2, [pc, #328]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800366e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003670:	4b50      	ldr	r3, [pc, #320]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	494d      	ldr	r1, [pc, #308]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d044      	beq.n	8003718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b47      	ldr	r3, [pc, #284]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d119      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e07f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d003      	beq.n	80036b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	4b3f      	ldr	r3, [pc, #252]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e06f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c6:	4b3b      	ldr	r3, [pc, #236]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e067      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d6:	4b37      	ldr	r3, [pc, #220]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 0203 	bic.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4934      	ldr	r1, [pc, #208]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e8:	f7fe fde6 	bl	80022b8 <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f0:	f7fe fde2 	bl	80022b8 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e04f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	4b2b      	ldr	r3, [pc, #172]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 020c 	and.w	r2, r3, #12
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	429a      	cmp	r2, r3
 8003716:	d1eb      	bne.n	80036f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003718:	4b25      	ldr	r3, [pc, #148]	@ (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d20c      	bcs.n	8003740 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b22      	ldr	r3, [pc, #136]	@ (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b20      	ldr	r3, [pc, #128]	@ (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e032      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800374c:	4b19      	ldr	r3, [pc, #100]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4916      	ldr	r1, [pc, #88]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376a:	4b12      	ldr	r3, [pc, #72]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	490e      	ldr	r1, [pc, #56]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800377e:	f000 f821 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8003782:	4602      	mov	r2, r0
 8003784:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	490a      	ldr	r1, [pc, #40]	@ (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003790:	5ccb      	ldrb	r3, [r1, r3]
 8003792:	fa22 f303 	lsr.w	r3, r2, r3
 8003796:	4a09      	ldr	r2, [pc, #36]	@ (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800379a:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe fd46 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023c00 	.word	0x40023c00
 80037b4:	40023800 	.word	0x40023800
 80037b8:	080062e8 	.word	0x080062e8
 80037bc:	20000040 	.word	0x20000040
 80037c0:	20000044 	.word	0x20000044

080037c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c8:	b090      	sub	sp, #64	@ 0x40
 80037ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037dc:	4b59      	ldr	r3, [pc, #356]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x180>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d00d      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x40>
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	f200 80a1 	bhi.w	8003930 <HAL_RCC_GetSysClockFreq+0x16c>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0x34>
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d003      	beq.n	80037fe <HAL_RCC_GetSysClockFreq+0x3a>
 80037f6:	e09b      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f8:	4b53      	ldr	r3, [pc, #332]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x184>)
 80037fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037fc:	e09b      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037fe:	4b53      	ldr	r3, [pc, #332]	@ (800394c <HAL_RCC_GetSysClockFreq+0x188>)
 8003800:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003802:	e098      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003804:	4b4f      	ldr	r3, [pc, #316]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x180>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800380c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800380e:	4b4d      	ldr	r3, [pc, #308]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x180>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d028      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381a:	4b4a      	ldr	r3, [pc, #296]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x180>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	099b      	lsrs	r3, r3, #6
 8003820:	2200      	movs	r2, #0
 8003822:	623b      	str	r3, [r7, #32]
 8003824:	627a      	str	r2, [r7, #36]	@ 0x24
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800382c:	2100      	movs	r1, #0
 800382e:	4b47      	ldr	r3, [pc, #284]	@ (800394c <HAL_RCC_GetSysClockFreq+0x188>)
 8003830:	fb03 f201 	mul.w	r2, r3, r1
 8003834:	2300      	movs	r3, #0
 8003836:	fb00 f303 	mul.w	r3, r0, r3
 800383a:	4413      	add	r3, r2
 800383c:	4a43      	ldr	r2, [pc, #268]	@ (800394c <HAL_RCC_GetSysClockFreq+0x188>)
 800383e:	fba0 1202 	umull	r1, r2, r0, r2
 8003842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003844:	460a      	mov	r2, r1
 8003846:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800384a:	4413      	add	r3, r2
 800384c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800384e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003850:	2200      	movs	r2, #0
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	61fa      	str	r2, [r7, #28]
 8003856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800385a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800385e:	f7fd f81d 	bl	800089c <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4613      	mov	r3, r2
 8003868:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800386a:	e053      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386c:	4b35      	ldr	r3, [pc, #212]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x180>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	2200      	movs	r2, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	617a      	str	r2, [r7, #20]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800387e:	f04f 0b00 	mov.w	fp, #0
 8003882:	4652      	mov	r2, sl
 8003884:	465b      	mov	r3, fp
 8003886:	f04f 0000 	mov.w	r0, #0
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	0159      	lsls	r1, r3, #5
 8003890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003894:	0150      	lsls	r0, r2, #5
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	ebb2 080a 	subs.w	r8, r2, sl
 800389e:	eb63 090b 	sbc.w	r9, r3, fp
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038b6:	ebb2 0408 	subs.w	r4, r2, r8
 80038ba:	eb63 0509 	sbc.w	r5, r3, r9
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	00eb      	lsls	r3, r5, #3
 80038c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038cc:	00e2      	lsls	r2, r4, #3
 80038ce:	4614      	mov	r4, r2
 80038d0:	461d      	mov	r5, r3
 80038d2:	eb14 030a 	adds.w	r3, r4, sl
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	eb45 030b 	adc.w	r3, r5, fp
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ea:	4629      	mov	r1, r5
 80038ec:	028b      	lsls	r3, r1, #10
 80038ee:	4621      	mov	r1, r4
 80038f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038f4:	4621      	mov	r1, r4
 80038f6:	028a      	lsls	r2, r1, #10
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fe:	2200      	movs	r2, #0
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	60fa      	str	r2, [r7, #12]
 8003904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003908:	f7fc ffc8 	bl	800089c <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4613      	mov	r3, r2
 8003912:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003914:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x180>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	3301      	adds	r3, #1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003924:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800392e:	e002      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x184>)
 8003932:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003938:	4618      	mov	r0, r3
 800393a:	3740      	adds	r7, #64	@ 0x40
 800393c:	46bd      	mov	sp, r7
 800393e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	00f42400 	.word	0x00f42400
 800394c:	017d7840 	.word	0x017d7840

08003950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003954:	4b03      	ldr	r3, [pc, #12]	@ (8003964 <HAL_RCC_GetHCLKFreq+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000040 	.word	0x20000040

08003968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800396c:	f7ff fff0 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0a9b      	lsrs	r3, r3, #10
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	@ (800398c <HAL_RCC_GetPCLK1Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	080062f8 	.word	0x080062f8

08003990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003994:	f7ff ffdc 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0b5b      	lsrs	r3, r3, #13
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4903      	ldr	r1, [pc, #12]	@ (80039b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	080062f8 	.word	0x080062f8

080039b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e041      	b.n	8003a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe f9fa 	bl	8001dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f000 fb86 	bl	8004108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e041      	b.n	8003aec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fe f8f1 	bl	8001c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f000 fb37 	bl	8004108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d109      	bne.n	8003b18 <HAL_TIM_PWM_Start+0x24>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e022      	b.n	8003b5e <HAL_TIM_PWM_Start+0x6a>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d109      	bne.n	8003b32 <HAL_TIM_PWM_Start+0x3e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	bf14      	ite	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	2300      	moveq	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e015      	b.n	8003b5e <HAL_TIM_PWM_Start+0x6a>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d109      	bne.n	8003b4c <HAL_TIM_PWM_Start+0x58>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e008      	b.n	8003b5e <HAL_TIM_PWM_Start+0x6a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	bf14      	ite	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	2300      	moveq	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e068      	b.n	8003c38 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x82>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b74:	e013      	b.n	8003b9e <HAL_TIM_PWM_Start+0xaa>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_PWM_Start+0x92>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b84:	e00b      	b.n	8003b9e <HAL_TIM_PWM_Start+0xaa>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_PWM_Start+0xa2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b94:	e003      	b.n	8003b9e <HAL_TIM_PWM_Start+0xaa>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fcc0 	bl	800452c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a23      	ldr	r2, [pc, #140]	@ (8003c40 <HAL_TIM_PWM_Start+0x14c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1d      	ldr	r2, [pc, #116]	@ (8003c40 <HAL_TIM_PWM_Start+0x14c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d018      	beq.n	8003c02 <HAL_TIM_PWM_Start+0x10e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd8:	d013      	beq.n	8003c02 <HAL_TIM_PWM_Start+0x10e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a19      	ldr	r2, [pc, #100]	@ (8003c44 <HAL_TIM_PWM_Start+0x150>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00e      	beq.n	8003c02 <HAL_TIM_PWM_Start+0x10e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a17      	ldr	r2, [pc, #92]	@ (8003c48 <HAL_TIM_PWM_Start+0x154>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d009      	beq.n	8003c02 <HAL_TIM_PWM_Start+0x10e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a16      	ldr	r2, [pc, #88]	@ (8003c4c <HAL_TIM_PWM_Start+0x158>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_TIM_PWM_Start+0x10e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a14      	ldr	r2, [pc, #80]	@ (8003c50 <HAL_TIM_PWM_Start+0x15c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d111      	bne.n	8003c26 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d010      	beq.n	8003c36 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c24:	e007      	b.n	8003c36 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800
 8003c4c:	40000c00 	.word	0x40000c00
 8003c50:	40014000 	.word	0x40014000

08003c54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2200      	movs	r2, #0
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fc60 	bl	800452c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a29      	ldr	r2, [pc, #164]	@ (8003d18 <HAL_TIM_PWM_Stop+0xc4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d117      	bne.n	8003ca6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6a1a      	ldr	r2, [r3, #32]
 8003c7c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <HAL_TIM_PWM_Stop+0x52>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a1a      	ldr	r2, [r3, #32]
 8003c8c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d107      	bne.n	8003ca6 <HAL_TIM_PWM_Stop+0x52>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ca4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a1a      	ldr	r2, [r3, #32]
 8003cac:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10f      	bne.n	8003cd6 <HAL_TIM_PWM_Stop+0x82>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	f240 4344 	movw	r3, #1092	@ 0x444
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d107      	bne.n	8003cd6 <HAL_TIM_PWM_Stop+0x82>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d104      	bne.n	8003ce6 <HAL_TIM_PWM_Stop+0x92>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ce4:	e013      	b.n	8003d0e <HAL_TIM_PWM_Stop+0xba>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d104      	bne.n	8003cf6 <HAL_TIM_PWM_Stop+0xa2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cf4:	e00b      	b.n	8003d0e <HAL_TIM_PWM_Stop+0xba>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d104      	bne.n	8003d06 <HAL_TIM_PWM_Stop+0xb2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d04:	e003      	b.n	8003d0e <HAL_TIM_PWM_Stop+0xba>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40010000 	.word	0x40010000

08003d1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e097      	b.n	8003e60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d106      	bne.n	8003d4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7fe f801 	bl	8001d4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d60:	f023 0307 	bic.w	r3, r3, #7
 8003d64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f000 f9c9 	bl	8004108 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	4313      	orrs	r3, r2
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003dbc:	f023 030c 	bic.w	r3, r3, #12
 8003dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	011a      	lsls	r2, r3, #4
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	031b      	lsls	r3, r3, #12
 8003dec:	4313      	orrs	r3, r2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d110      	bne.n	8003eba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e9e:	7b7b      	ldrb	r3, [r7, #13]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d001      	beq.n	8003ea8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e069      	b.n	8003f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eb8:	e031      	b.n	8003f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d110      	bne.n	8003ee2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ec0:	7bbb      	ldrb	r3, [r7, #14]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d102      	bne.n	8003ecc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ec6:	7b3b      	ldrb	r3, [r7, #12]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d001      	beq.n	8003ed0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e055      	b.n	8003f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ee0:	e01d      	b.n	8003f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d108      	bne.n	8003efa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ee8:	7bbb      	ldrb	r3, [r7, #14]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d105      	bne.n	8003efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eee:	7b7b      	ldrb	r3, [r7, #13]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d102      	bne.n	8003efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ef4:	7b3b      	ldrb	r3, [r7, #12]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e03e      	b.n	8003f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_TIM_Encoder_Start+0xc4>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d008      	beq.n	8003f3c <HAL_TIM_Encoder_Start+0xd4>
 8003f2a:	e00f      	b.n	8003f4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2201      	movs	r2, #1
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 faf9 	bl	800452c <TIM_CCxChannelCmd>
      break;
 8003f3a:	e016      	b.n	8003f6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2201      	movs	r2, #1
 8003f42:	2104      	movs	r1, #4
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 faf1 	bl	800452c <TIM_CCxChannelCmd>
      break;
 8003f4a:	e00e      	b.n	8003f6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2201      	movs	r2, #1
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fae9 	bl	800452c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	2104      	movs	r1, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fae2 	bl	800452c <TIM_CCxChannelCmd>
      break;
 8003f68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e0ae      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	f200 809f 	bhi.w	80040f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003fed 	.word	0x08003fed
 8003fbc:	080040f1 	.word	0x080040f1
 8003fc0:	080040f1 	.word	0x080040f1
 8003fc4:	080040f1 	.word	0x080040f1
 8003fc8:	0800402d 	.word	0x0800402d
 8003fcc:	080040f1 	.word	0x080040f1
 8003fd0:	080040f1 	.word	0x080040f1
 8003fd4:	080040f1 	.word	0x080040f1
 8003fd8:	0800406f 	.word	0x0800406f
 8003fdc:	080040f1 	.word	0x080040f1
 8003fe0:	080040f1 	.word	0x080040f1
 8003fe4:	080040f1 	.word	0x080040f1
 8003fe8:	080040af 	.word	0x080040af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f90e 	bl	8004214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0208 	orr.w	r2, r2, #8
 8004006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0204 	bic.w	r2, r2, #4
 8004016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6999      	ldr	r1, [r3, #24]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	619a      	str	r2, [r3, #24]
      break;
 800402a:	e064      	b.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f954 	bl	80042e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6999      	ldr	r1, [r3, #24]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	021a      	lsls	r2, r3, #8
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	619a      	str	r2, [r3, #24]
      break;
 800406c:	e043      	b.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f99f 	bl	80043b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0208 	orr.w	r2, r2, #8
 8004088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0204 	bic.w	r2, r2, #4
 8004098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69d9      	ldr	r1, [r3, #28]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	61da      	str	r2, [r3, #28]
      break;
 80040ac:	e023      	b.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f9e9 	bl	800448c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69d9      	ldr	r1, [r3, #28]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	021a      	lsls	r2, r3, #8
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	61da      	str	r2, [r3, #28]
      break;
 80040ee:	e002      	b.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
      break;
 80040f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a37      	ldr	r2, [pc, #220]	@ (80041f8 <TIM_Base_SetConfig+0xf0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00f      	beq.n	8004140 <TIM_Base_SetConfig+0x38>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004126:	d00b      	beq.n	8004140 <TIM_Base_SetConfig+0x38>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a34      	ldr	r2, [pc, #208]	@ (80041fc <TIM_Base_SetConfig+0xf4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_Base_SetConfig+0x38>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a33      	ldr	r2, [pc, #204]	@ (8004200 <TIM_Base_SetConfig+0xf8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_Base_SetConfig+0x38>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a32      	ldr	r2, [pc, #200]	@ (8004204 <TIM_Base_SetConfig+0xfc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d108      	bne.n	8004152 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a28      	ldr	r2, [pc, #160]	@ (80041f8 <TIM_Base_SetConfig+0xf0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01b      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004160:	d017      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a25      	ldr	r2, [pc, #148]	@ (80041fc <TIM_Base_SetConfig+0xf4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a24      	ldr	r2, [pc, #144]	@ (8004200 <TIM_Base_SetConfig+0xf8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00f      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a23      	ldr	r2, [pc, #140]	@ (8004204 <TIM_Base_SetConfig+0xfc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00b      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a22      	ldr	r2, [pc, #136]	@ (8004208 <TIM_Base_SetConfig+0x100>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d007      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a21      	ldr	r2, [pc, #132]	@ (800420c <TIM_Base_SetConfig+0x104>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_Base_SetConfig+0x8a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a20      	ldr	r2, [pc, #128]	@ (8004210 <TIM_Base_SetConfig+0x108>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d108      	bne.n	80041a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a0c      	ldr	r2, [pc, #48]	@ (80041f8 <TIM_Base_SetConfig+0xf0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d103      	bne.n	80041d2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f043 0204 	orr.w	r2, r3, #4
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	601a      	str	r2, [r3, #0]
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800
 8004204:	40000c00 	.word	0x40000c00
 8004208:	40014000 	.word	0x40014000
 800420c:	40014400 	.word	0x40014400
 8004210:	40014800 	.word	0x40014800

08004214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f023 0201 	bic.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f023 0302 	bic.w	r3, r3, #2
 800425c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a1c      	ldr	r2, [pc, #112]	@ (80042dc <TIM_OC1_SetConfig+0xc8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d10c      	bne.n	800428a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f023 0308 	bic.w	r3, r3, #8
 8004276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 0304 	bic.w	r3, r3, #4
 8004288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a13      	ldr	r2, [pc, #76]	@ (80042dc <TIM_OC1_SetConfig+0xc8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d111      	bne.n	80042b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	621a      	str	r2, [r3, #32]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40010000 	.word	0x40010000

080042e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	f023 0210 	bic.w	r2, r3, #16
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f023 0320 	bic.w	r3, r3, #32
 800432a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a1e      	ldr	r2, [pc, #120]	@ (80043b4 <TIM_OC2_SetConfig+0xd4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d10d      	bne.n	800435c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800435a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a15      	ldr	r2, [pc, #84]	@ (80043b4 <TIM_OC2_SetConfig+0xd4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d113      	bne.n	800438c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800436a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40010000 	.word	0x40010000

080043b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1d      	ldr	r2, [pc, #116]	@ (8004488 <TIM_OC3_SetConfig+0xd0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d10d      	bne.n	8004432 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800441c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a14      	ldr	r2, [pc, #80]	@ (8004488 <TIM_OC3_SetConfig+0xd0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d113      	bne.n	8004462 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	621a      	str	r2, [r3, #32]
}
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	40010000 	.word	0x40010000

0800448c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	031b      	lsls	r3, r3, #12
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a10      	ldr	r2, [pc, #64]	@ (8004528 <TIM_OC4_SetConfig+0x9c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d109      	bne.n	8004500 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	019b      	lsls	r3, r3, #6
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	621a      	str	r2, [r3, #32]
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000

0800452c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2201      	movs	r2, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1a      	ldr	r2, [r3, #32]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	43db      	mvns	r3, r3
 800454e:	401a      	ands	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a1a      	ldr	r2, [r3, #32]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	fa01 f303 	lsl.w	r3, r1, r3
 8004564:	431a      	orrs	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800458c:	2302      	movs	r3, #2
 800458e:	e050      	b.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d018      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045dc:	d013      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a18      	ldr	r2, [pc, #96]	@ (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00e      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a16      	ldr	r2, [pc, #88]	@ (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a15      	ldr	r2, [pc, #84]	@ (800464c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a13      	ldr	r2, [pc, #76]	@ (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10c      	bne.n	8004620 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800460c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	4313      	orrs	r3, r2
 8004616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40010000 	.word	0x40010000
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	40000c00 	.word	0x40000c00
 8004650:	40014000 	.word	0x40014000

08004654 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800466c:	2302      	movs	r3, #2
 800466e:	e03d      	b.n	80046ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e042      	b.n	8004790 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fd fc68 	bl	8001ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	@ 0x24
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800473a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fdd3 	bl	80052e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	@ 0x28
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d175      	bne.n	80048a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_UART_Transmit+0x2c>
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e06e      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2221      	movs	r2, #33	@ 0x21
 80047d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047d6:	f7fd fd6f 	bl	80022b8 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f0:	d108      	bne.n	8004804 <HAL_UART_Transmit+0x6c>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	e003      	b.n	800480c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800480c:	e02e      	b.n	800486c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	2180      	movs	r1, #128	@ 0x80
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 fb37 	bl	8004e8c <UART_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e03a      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3302      	adds	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e007      	b.n	800485e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1cb      	bne.n	800480e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2140      	movs	r1, #64	@ 0x40
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 fb03 	bl	8004e8c <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e006      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	4613      	mov	r3, r2
 80048ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d112      	bne.n	80048ee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_UART_Receive_IT+0x26>
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e00b      	b.n	80048f0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	461a      	mov	r2, r3
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fb2a 	bl	8004f3e <UART_Start_Receive_IT>
 80048ea:	4603      	mov	r3, r0
 80048ec:	e000      	b.n	80048f0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
  }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b0ba      	sub	sp, #232	@ 0xe8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800491e:	2300      	movs	r3, #0
 8004920:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004924:	2300      	movs	r3, #0
 8004926:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800492a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_UART_IRQHandler+0x66>
 800494a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fc07 	bl	800516a <UART_Receive_IT>
      return;
 800495c:	e273      	b.n	8004e46 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800495e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80de 	beq.w	8004b24 <HAL_UART_IRQHandler+0x22c>
 8004968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004978:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80d1 	beq.w	8004b24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <HAL_UART_IRQHandler+0xae>
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499e:	f043 0201 	orr.w	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <HAL_UART_IRQHandler+0xd2>
 80049b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c2:	f043 0202 	orr.w	r2, r3, #2
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_UART_IRQHandler+0xf6>
 80049d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e6:	f043 0204 	orr.w	r2, r3, #4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d011      	beq.n	8004a1e <HAL_UART_IRQHandler+0x126>
 80049fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d105      	bne.n	8004a12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a16:	f043 0208 	orr.w	r2, r3, #8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 820a 	beq.w	8004e3c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_UART_IRQHandler+0x14e>
 8004a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fb92 	bl	800516a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a50:	2b40      	cmp	r3, #64	@ 0x40
 8004a52:	bf0c      	ite	eq
 8004a54:	2301      	moveq	r3, #1
 8004a56:	2300      	movne	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <HAL_UART_IRQHandler+0x17a>
 8004a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d04f      	beq.n	8004b12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fa9d 	bl	8004fb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a82:	2b40      	cmp	r3, #64	@ 0x40
 8004a84:	d141      	bne.n	8004b0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3314      	adds	r3, #20
 8004a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a94:	e853 3f00 	ldrex	r3, [r3]
 8004a98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3314      	adds	r3, #20
 8004aae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ab2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004abe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1d9      	bne.n	8004a86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d013      	beq.n	8004b02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ade:	4a8a      	ldr	r2, [pc, #552]	@ (8004d08 <HAL_UART_IRQHandler+0x410>)
 8004ae0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe f809 	bl	8002afe <HAL_DMA_Abort_IT>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	e00e      	b.n	8004b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9ac 	bl	8004e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	e00a      	b.n	8004b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f9a8 	bl	8004e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	e006      	b.n	8004b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f9a4 	bl	8004e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b1e:	e18d      	b.n	8004e3c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	bf00      	nop
    return;
 8004b22:	e18b      	b.n	8004e3c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	f040 8167 	bne.w	8004dfc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8160 	beq.w	8004dfc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8159 	beq.w	8004dfc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6a:	2b40      	cmp	r3, #64	@ 0x40
 8004b6c:	f040 80ce 	bne.w	8004d0c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80a9 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	f080 80a2 	bcs.w	8004cd8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba6:	f000 8088 	beq.w	8004cba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004bd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1d9      	bne.n	8004baa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3314      	adds	r3, #20
 8004bfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3314      	adds	r3, #20
 8004c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e1      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3314      	adds	r3, #20
 8004c38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3314      	adds	r3, #20
 8004c52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e3      	bne.n	8004c32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c8a:	f023 0310 	bic.w	r3, r3, #16
 8004c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	330c      	adds	r3, #12
 8004c98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ca2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e3      	bne.n	8004c78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fd feb2 	bl	8002a1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f8cf 	bl	8004e74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004cd6:	e0b3      	b.n	8004e40 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	f040 80ad 	bne.w	8004e40 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf0:	f040 80a6 	bne.w	8004e40 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f8b7 	bl	8004e74 <HAL_UARTEx_RxEventCallback>
      return;
 8004d06:	e09b      	b.n	8004e40 <HAL_UART_IRQHandler+0x548>
 8004d08:	08005079 	.word	0x08005079
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 808e 	beq.w	8004e44 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8089 	beq.w	8004e44 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d56:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e3      	bne.n	8004d32 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	623b      	str	r3, [r7, #32]
   return(result);
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e3      	bne.n	8004d6a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	330c      	adds	r3, #12
 8004db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0310 	bic.w	r3, r3, #16
 8004dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	330c      	adds	r3, #12
 8004dd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004dd4:	61fa      	str	r2, [r7, #28]
 8004dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	69b9      	ldr	r1, [r7, #24]
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	617b      	str	r3, [r7, #20]
   return(result);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e3      	bne.n	8004db0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f83d 	bl	8004e74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dfa:	e023      	b.n	8004e44 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d009      	beq.n	8004e1c <HAL_UART_IRQHandler+0x524>
 8004e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f940 	bl	800509a <UART_Transmit_IT>
    return;
 8004e1a:	e014      	b.n	8004e46 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00e      	beq.n	8004e46 <HAL_UART_IRQHandler+0x54e>
 8004e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f980 	bl	800513a <UART_EndTransmit_IT>
    return;
 8004e3a:	e004      	b.n	8004e46 <HAL_UART_IRQHandler+0x54e>
    return;
 8004e3c:	bf00      	nop
 8004e3e:	e002      	b.n	8004e46 <HAL_UART_IRQHandler+0x54e>
      return;
 8004e40:	bf00      	nop
 8004e42:	e000      	b.n	8004e46 <HAL_UART_IRQHandler+0x54e>
      return;
 8004e44:	bf00      	nop
  }
}
 8004e46:	37e8      	adds	r7, #232	@ 0xe8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9c:	e03b      	b.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d037      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7fd fa07 	bl	80022b8 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	6a3a      	ldr	r2, [r7, #32]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x30>
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e03a      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d023      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b80      	cmp	r3, #128	@ 0x80
 8004ed2:	d020      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b40      	cmp	r3, #64	@ 0x40
 8004ed8:	d01d      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d116      	bne.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f857 	bl	8004fb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2208      	movs	r2, #8
 8004f08:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00f      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d0b4      	beq.n	8004e9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	88fa      	ldrh	r2, [r7, #6]
 8004f56:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2222      	movs	r2, #34	@ 0x22
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0220 	orr.w	r2, r2, #32
 8004fa2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b095      	sub	sp, #84	@ 0x54
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fda:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fe0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e5      	bne.n	8004fba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3314      	adds	r3, #20
 8004ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3314      	adds	r3, #20
 800500c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800500e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005010:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e5      	bne.n	8004fee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005026:	2b01      	cmp	r3, #1
 8005028:	d119      	bne.n	800505e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	60bb      	str	r3, [r7, #8]
   return(result);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f023 0310 	bic.w	r3, r3, #16
 8005040:	647b      	str	r3, [r7, #68]	@ 0x44
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800504a:	61ba      	str	r2, [r7, #24]
 800504c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6979      	ldr	r1, [r7, #20]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	613b      	str	r3, [r7, #16]
   return(result);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800506c:	bf00      	nop
 800506e:	3754      	adds	r7, #84	@ 0x54
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff fee7 	bl	8004e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b21      	cmp	r3, #33	@ 0x21
 80050ac:	d13e      	bne.n	800512c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b6:	d114      	bne.n	80050e2 <UART_Transmit_IT+0x48>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d110      	bne.n	80050e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	1c9a      	adds	r2, r3, #2
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	621a      	str	r2, [r3, #32]
 80050e0:	e008      	b.n	80050f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	1c59      	adds	r1, r3, #1
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6211      	str	r1, [r2, #32]
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	4619      	mov	r1, r3
 8005102:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10f      	bne.n	8005128 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005116:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005126:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e000      	b.n	800512e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005150:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff fe76 	bl	8004e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b08c      	sub	sp, #48	@ 0x30
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b22      	cmp	r3, #34	@ 0x22
 8005184:	f040 80aa 	bne.w	80052dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005190:	d115      	bne.n	80051be <UART_Receive_IT+0x54>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d111      	bne.n	80051be <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b6:	1c9a      	adds	r2, r3, #2
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80051bc:	e024      	b.n	8005208 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051cc:	d007      	beq.n	80051de <UART_Receive_IT+0x74>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <UART_Receive_IT+0x82>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	e008      	b.n	80051fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29b      	uxth	r3, r3
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4619      	mov	r1, r3
 8005216:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005218:	2b00      	cmp	r3, #0
 800521a:	d15d      	bne.n	80052d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0220 	bic.w	r2, r2, #32
 800522a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800523a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525e:	2b01      	cmp	r3, #1
 8005260:	d135      	bne.n	80052ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	613b      	str	r3, [r7, #16]
   return(result);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f023 0310 	bic.w	r3, r3, #16
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005288:	623a      	str	r2, [r7, #32]
 800528a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	69f9      	ldr	r1, [r7, #28]
 800528e:	6a3a      	ldr	r2, [r7, #32]
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	61bb      	str	r3, [r7, #24]
   return(result);
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e5      	bne.n	8005268 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d10a      	bne.n	80052c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fdd4 	bl	8004e74 <HAL_UARTEx_RxEventCallback>
 80052cc:	e002      	b.n	80052d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fc f968 	bl	80015a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	e002      	b.n	80052de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3730      	adds	r7, #48	@ 0x30
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ec:	b0c0      	sub	sp, #256	@ 0x100
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005304:	68d9      	ldr	r1, [r3, #12]
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	ea40 0301 	orr.w	r3, r0, r1
 8005310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	431a      	orrs	r2, r3
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	431a      	orrs	r2, r3
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005340:	f021 010c 	bic.w	r1, r1, #12
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800534e:	430b      	orrs	r3, r1
 8005350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800535e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005362:	6999      	ldr	r1, [r3, #24]
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	ea40 0301 	orr.w	r3, r0, r1
 800536e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4b8f      	ldr	r3, [pc, #572]	@ (80055b4 <UART_SetConfig+0x2cc>)
 8005378:	429a      	cmp	r2, r3
 800537a:	d005      	beq.n	8005388 <UART_SetConfig+0xa0>
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	4b8d      	ldr	r3, [pc, #564]	@ (80055b8 <UART_SetConfig+0x2d0>)
 8005384:	429a      	cmp	r2, r3
 8005386:	d104      	bne.n	8005392 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005388:	f7fe fb02 	bl	8003990 <HAL_RCC_GetPCLK2Freq>
 800538c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005390:	e003      	b.n	800539a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005392:	f7fe fae9 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8005396:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800539a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a4:	f040 810c 	bne.w	80055c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053ba:	4622      	mov	r2, r4
 80053bc:	462b      	mov	r3, r5
 80053be:	1891      	adds	r1, r2, r2
 80053c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053c2:	415b      	adcs	r3, r3
 80053c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053ca:	4621      	mov	r1, r4
 80053cc:	eb12 0801 	adds.w	r8, r2, r1
 80053d0:	4629      	mov	r1, r5
 80053d2:	eb43 0901 	adc.w	r9, r3, r1
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ea:	4690      	mov	r8, r2
 80053ec:	4699      	mov	r9, r3
 80053ee:	4623      	mov	r3, r4
 80053f0:	eb18 0303 	adds.w	r3, r8, r3
 80053f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053f8:	462b      	mov	r3, r5
 80053fa:	eb49 0303 	adc.w	r3, r9, r3
 80053fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800540e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005412:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005416:	460b      	mov	r3, r1
 8005418:	18db      	adds	r3, r3, r3
 800541a:	653b      	str	r3, [r7, #80]	@ 0x50
 800541c:	4613      	mov	r3, r2
 800541e:	eb42 0303 	adc.w	r3, r2, r3
 8005422:	657b      	str	r3, [r7, #84]	@ 0x54
 8005424:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005428:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800542c:	f7fb fa36 	bl	800089c <__aeabi_uldivmod>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4b61      	ldr	r3, [pc, #388]	@ (80055bc <UART_SetConfig+0x2d4>)
 8005436:	fba3 2302 	umull	r2, r3, r3, r2
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	011c      	lsls	r4, r3, #4
 800543e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005442:	2200      	movs	r2, #0
 8005444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005448:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800544c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	1891      	adds	r1, r2, r2
 8005456:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005458:	415b      	adcs	r3, r3
 800545a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800545c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005460:	4641      	mov	r1, r8
 8005462:	eb12 0a01 	adds.w	sl, r2, r1
 8005466:	4649      	mov	r1, r9
 8005468:	eb43 0b01 	adc.w	fp, r3, r1
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005478:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800547c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005480:	4692      	mov	sl, r2
 8005482:	469b      	mov	fp, r3
 8005484:	4643      	mov	r3, r8
 8005486:	eb1a 0303 	adds.w	r3, sl, r3
 800548a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800548e:	464b      	mov	r3, r9
 8005490:	eb4b 0303 	adc.w	r3, fp, r3
 8005494:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054ac:	460b      	mov	r3, r1
 80054ae:	18db      	adds	r3, r3, r3
 80054b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054b2:	4613      	mov	r3, r2
 80054b4:	eb42 0303 	adc.w	r3, r2, r3
 80054b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054c2:	f7fb f9eb 	bl	800089c <__aeabi_uldivmod>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4611      	mov	r1, r2
 80054cc:	4b3b      	ldr	r3, [pc, #236]	@ (80055bc <UART_SetConfig+0x2d4>)
 80054ce:	fba3 2301 	umull	r2, r3, r3, r1
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	2264      	movs	r2, #100	@ 0x64
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	1acb      	subs	r3, r1, r3
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054e2:	4b36      	ldr	r3, [pc, #216]	@ (80055bc <UART_SetConfig+0x2d4>)
 80054e4:	fba3 2302 	umull	r2, r3, r3, r2
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054f0:	441c      	add	r4, r3
 80054f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005500:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005504:	4642      	mov	r2, r8
 8005506:	464b      	mov	r3, r9
 8005508:	1891      	adds	r1, r2, r2
 800550a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800550c:	415b      	adcs	r3, r3
 800550e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005510:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005514:	4641      	mov	r1, r8
 8005516:	1851      	adds	r1, r2, r1
 8005518:	6339      	str	r1, [r7, #48]	@ 0x30
 800551a:	4649      	mov	r1, r9
 800551c:	414b      	adcs	r3, r1
 800551e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800552c:	4659      	mov	r1, fp
 800552e:	00cb      	lsls	r3, r1, #3
 8005530:	4651      	mov	r1, sl
 8005532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005536:	4651      	mov	r1, sl
 8005538:	00ca      	lsls	r2, r1, #3
 800553a:	4610      	mov	r0, r2
 800553c:	4619      	mov	r1, r3
 800553e:	4603      	mov	r3, r0
 8005540:	4642      	mov	r2, r8
 8005542:	189b      	adds	r3, r3, r2
 8005544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005548:	464b      	mov	r3, r9
 800554a:	460a      	mov	r2, r1
 800554c:	eb42 0303 	adc.w	r3, r2, r3
 8005550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005560:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005568:	460b      	mov	r3, r1
 800556a:	18db      	adds	r3, r3, r3
 800556c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800556e:	4613      	mov	r3, r2
 8005570:	eb42 0303 	adc.w	r3, r2, r3
 8005574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005576:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800557a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800557e:	f7fb f98d 	bl	800089c <__aeabi_uldivmod>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4b0d      	ldr	r3, [pc, #52]	@ (80055bc <UART_SetConfig+0x2d4>)
 8005588:	fba3 1302 	umull	r1, r3, r3, r2
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	2164      	movs	r1, #100	@ 0x64
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	3332      	adds	r3, #50	@ 0x32
 800559a:	4a08      	ldr	r2, [pc, #32]	@ (80055bc <UART_SetConfig+0x2d4>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	f003 0207 	and.w	r2, r3, #7
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4422      	add	r2, r4
 80055ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055b0:	e106      	b.n	80057c0 <UART_SetConfig+0x4d8>
 80055b2:	bf00      	nop
 80055b4:	40011000 	.word	0x40011000
 80055b8:	40011400 	.word	0x40011400
 80055bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055d2:	4642      	mov	r2, r8
 80055d4:	464b      	mov	r3, r9
 80055d6:	1891      	adds	r1, r2, r2
 80055d8:	6239      	str	r1, [r7, #32]
 80055da:	415b      	adcs	r3, r3
 80055dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80055de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055e2:	4641      	mov	r1, r8
 80055e4:	1854      	adds	r4, r2, r1
 80055e6:	4649      	mov	r1, r9
 80055e8:	eb43 0501 	adc.w	r5, r3, r1
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	00eb      	lsls	r3, r5, #3
 80055f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055fa:	00e2      	lsls	r2, r4, #3
 80055fc:	4614      	mov	r4, r2
 80055fe:	461d      	mov	r5, r3
 8005600:	4643      	mov	r3, r8
 8005602:	18e3      	adds	r3, r4, r3
 8005604:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005608:	464b      	mov	r3, r9
 800560a:	eb45 0303 	adc.w	r3, r5, r3
 800560e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800561e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800562e:	4629      	mov	r1, r5
 8005630:	008b      	lsls	r3, r1, #2
 8005632:	4621      	mov	r1, r4
 8005634:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005638:	4621      	mov	r1, r4
 800563a:	008a      	lsls	r2, r1, #2
 800563c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005640:	f7fb f92c 	bl	800089c <__aeabi_uldivmod>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4b60      	ldr	r3, [pc, #384]	@ (80057cc <UART_SetConfig+0x4e4>)
 800564a:	fba3 2302 	umull	r2, r3, r3, r2
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	011c      	lsls	r4, r3, #4
 8005652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005656:	2200      	movs	r2, #0
 8005658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800565c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005660:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	1891      	adds	r1, r2, r2
 800566a:	61b9      	str	r1, [r7, #24]
 800566c:	415b      	adcs	r3, r3
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005674:	4641      	mov	r1, r8
 8005676:	1851      	adds	r1, r2, r1
 8005678:	6139      	str	r1, [r7, #16]
 800567a:	4649      	mov	r1, r9
 800567c:	414b      	adcs	r3, r1
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800568c:	4659      	mov	r1, fp
 800568e:	00cb      	lsls	r3, r1, #3
 8005690:	4651      	mov	r1, sl
 8005692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005696:	4651      	mov	r1, sl
 8005698:	00ca      	lsls	r2, r1, #3
 800569a:	4610      	mov	r0, r2
 800569c:	4619      	mov	r1, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	4642      	mov	r2, r8
 80056a2:	189b      	adds	r3, r3, r2
 80056a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056a8:	464b      	mov	r3, r9
 80056aa:	460a      	mov	r2, r1
 80056ac:	eb42 0303 	adc.w	r3, r2, r3
 80056b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056cc:	4649      	mov	r1, r9
 80056ce:	008b      	lsls	r3, r1, #2
 80056d0:	4641      	mov	r1, r8
 80056d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d6:	4641      	mov	r1, r8
 80056d8:	008a      	lsls	r2, r1, #2
 80056da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056de:	f7fb f8dd 	bl	800089c <__aeabi_uldivmod>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4611      	mov	r1, r2
 80056e8:	4b38      	ldr	r3, [pc, #224]	@ (80057cc <UART_SetConfig+0x4e4>)
 80056ea:	fba3 2301 	umull	r2, r3, r3, r1
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	2264      	movs	r2, #100	@ 0x64
 80056f2:	fb02 f303 	mul.w	r3, r2, r3
 80056f6:	1acb      	subs	r3, r1, r3
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	3332      	adds	r3, #50	@ 0x32
 80056fc:	4a33      	ldr	r2, [pc, #204]	@ (80057cc <UART_SetConfig+0x4e4>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005708:	441c      	add	r4, r3
 800570a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800570e:	2200      	movs	r2, #0
 8005710:	673b      	str	r3, [r7, #112]	@ 0x70
 8005712:	677a      	str	r2, [r7, #116]	@ 0x74
 8005714:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005718:	4642      	mov	r2, r8
 800571a:	464b      	mov	r3, r9
 800571c:	1891      	adds	r1, r2, r2
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	415b      	adcs	r3, r3
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005728:	4641      	mov	r1, r8
 800572a:	1851      	adds	r1, r2, r1
 800572c:	6039      	str	r1, [r7, #0]
 800572e:	4649      	mov	r1, r9
 8005730:	414b      	adcs	r3, r1
 8005732:	607b      	str	r3, [r7, #4]
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005740:	4659      	mov	r1, fp
 8005742:	00cb      	lsls	r3, r1, #3
 8005744:	4651      	mov	r1, sl
 8005746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800574a:	4651      	mov	r1, sl
 800574c:	00ca      	lsls	r2, r1, #3
 800574e:	4610      	mov	r0, r2
 8005750:	4619      	mov	r1, r3
 8005752:	4603      	mov	r3, r0
 8005754:	4642      	mov	r2, r8
 8005756:	189b      	adds	r3, r3, r2
 8005758:	66bb      	str	r3, [r7, #104]	@ 0x68
 800575a:	464b      	mov	r3, r9
 800575c:	460a      	mov	r2, r1
 800575e:	eb42 0303 	adc.w	r3, r2, r3
 8005762:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	663b      	str	r3, [r7, #96]	@ 0x60
 800576e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800577c:	4649      	mov	r1, r9
 800577e:	008b      	lsls	r3, r1, #2
 8005780:	4641      	mov	r1, r8
 8005782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005786:	4641      	mov	r1, r8
 8005788:	008a      	lsls	r2, r1, #2
 800578a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800578e:	f7fb f885 	bl	800089c <__aeabi_uldivmod>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4b0d      	ldr	r3, [pc, #52]	@ (80057cc <UART_SetConfig+0x4e4>)
 8005798:	fba3 1302 	umull	r1, r3, r3, r2
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	2164      	movs	r1, #100	@ 0x64
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	3332      	adds	r3, #50	@ 0x32
 80057aa:	4a08      	ldr	r2, [pc, #32]	@ (80057cc <UART_SetConfig+0x4e4>)
 80057ac:	fba2 2303 	umull	r2, r3, r2, r3
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	f003 020f 	and.w	r2, r3, #15
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4422      	add	r2, r4
 80057be:	609a      	str	r2, [r3, #8]
}
 80057c0:	bf00      	nop
 80057c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057c6:	46bd      	mov	sp, r7
 80057c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057cc:	51eb851f 	.word	0x51eb851f

080057d0 <_strtol_l.isra.0>:
 80057d0:	2b24      	cmp	r3, #36	@ 0x24
 80057d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d6:	4686      	mov	lr, r0
 80057d8:	4690      	mov	r8, r2
 80057da:	d801      	bhi.n	80057e0 <_strtol_l.isra.0+0x10>
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d106      	bne.n	80057ee <_strtol_l.isra.0+0x1e>
 80057e0:	f000 f8a4 	bl	800592c <__errno>
 80057e4:	2316      	movs	r3, #22
 80057e6:	6003      	str	r3, [r0, #0]
 80057e8:	2000      	movs	r0, #0
 80057ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ee:	4834      	ldr	r0, [pc, #208]	@ (80058c0 <_strtol_l.isra.0+0xf0>)
 80057f0:	460d      	mov	r5, r1
 80057f2:	462a      	mov	r2, r5
 80057f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057f8:	5d06      	ldrb	r6, [r0, r4]
 80057fa:	f016 0608 	ands.w	r6, r6, #8
 80057fe:	d1f8      	bne.n	80057f2 <_strtol_l.isra.0+0x22>
 8005800:	2c2d      	cmp	r4, #45	@ 0x2d
 8005802:	d110      	bne.n	8005826 <_strtol_l.isra.0+0x56>
 8005804:	782c      	ldrb	r4, [r5, #0]
 8005806:	2601      	movs	r6, #1
 8005808:	1c95      	adds	r5, r2, #2
 800580a:	f033 0210 	bics.w	r2, r3, #16
 800580e:	d115      	bne.n	800583c <_strtol_l.isra.0+0x6c>
 8005810:	2c30      	cmp	r4, #48	@ 0x30
 8005812:	d10d      	bne.n	8005830 <_strtol_l.isra.0+0x60>
 8005814:	782a      	ldrb	r2, [r5, #0]
 8005816:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800581a:	2a58      	cmp	r2, #88	@ 0x58
 800581c:	d108      	bne.n	8005830 <_strtol_l.isra.0+0x60>
 800581e:	786c      	ldrb	r4, [r5, #1]
 8005820:	3502      	adds	r5, #2
 8005822:	2310      	movs	r3, #16
 8005824:	e00a      	b.n	800583c <_strtol_l.isra.0+0x6c>
 8005826:	2c2b      	cmp	r4, #43	@ 0x2b
 8005828:	bf04      	itt	eq
 800582a:	782c      	ldrbeq	r4, [r5, #0]
 800582c:	1c95      	addeq	r5, r2, #2
 800582e:	e7ec      	b.n	800580a <_strtol_l.isra.0+0x3a>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1f6      	bne.n	8005822 <_strtol_l.isra.0+0x52>
 8005834:	2c30      	cmp	r4, #48	@ 0x30
 8005836:	bf14      	ite	ne
 8005838:	230a      	movne	r3, #10
 800583a:	2308      	moveq	r3, #8
 800583c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005840:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005844:	2200      	movs	r2, #0
 8005846:	fbbc f9f3 	udiv	r9, ip, r3
 800584a:	4610      	mov	r0, r2
 800584c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005850:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005854:	2f09      	cmp	r7, #9
 8005856:	d80f      	bhi.n	8005878 <_strtol_l.isra.0+0xa8>
 8005858:	463c      	mov	r4, r7
 800585a:	42a3      	cmp	r3, r4
 800585c:	dd1b      	ble.n	8005896 <_strtol_l.isra.0+0xc6>
 800585e:	1c57      	adds	r7, r2, #1
 8005860:	d007      	beq.n	8005872 <_strtol_l.isra.0+0xa2>
 8005862:	4581      	cmp	r9, r0
 8005864:	d314      	bcc.n	8005890 <_strtol_l.isra.0+0xc0>
 8005866:	d101      	bne.n	800586c <_strtol_l.isra.0+0x9c>
 8005868:	45a2      	cmp	sl, r4
 800586a:	db11      	blt.n	8005890 <_strtol_l.isra.0+0xc0>
 800586c:	fb00 4003 	mla	r0, r0, r3, r4
 8005870:	2201      	movs	r2, #1
 8005872:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005876:	e7eb      	b.n	8005850 <_strtol_l.isra.0+0x80>
 8005878:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800587c:	2f19      	cmp	r7, #25
 800587e:	d801      	bhi.n	8005884 <_strtol_l.isra.0+0xb4>
 8005880:	3c37      	subs	r4, #55	@ 0x37
 8005882:	e7ea      	b.n	800585a <_strtol_l.isra.0+0x8a>
 8005884:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005888:	2f19      	cmp	r7, #25
 800588a:	d804      	bhi.n	8005896 <_strtol_l.isra.0+0xc6>
 800588c:	3c57      	subs	r4, #87	@ 0x57
 800588e:	e7e4      	b.n	800585a <_strtol_l.isra.0+0x8a>
 8005890:	f04f 32ff 	mov.w	r2, #4294967295
 8005894:	e7ed      	b.n	8005872 <_strtol_l.isra.0+0xa2>
 8005896:	1c53      	adds	r3, r2, #1
 8005898:	d108      	bne.n	80058ac <_strtol_l.isra.0+0xdc>
 800589a:	2322      	movs	r3, #34	@ 0x22
 800589c:	f8ce 3000 	str.w	r3, [lr]
 80058a0:	4660      	mov	r0, ip
 80058a2:	f1b8 0f00 	cmp.w	r8, #0
 80058a6:	d0a0      	beq.n	80057ea <_strtol_l.isra.0+0x1a>
 80058a8:	1e69      	subs	r1, r5, #1
 80058aa:	e006      	b.n	80058ba <_strtol_l.isra.0+0xea>
 80058ac:	b106      	cbz	r6, 80058b0 <_strtol_l.isra.0+0xe0>
 80058ae:	4240      	negs	r0, r0
 80058b0:	f1b8 0f00 	cmp.w	r8, #0
 80058b4:	d099      	beq.n	80057ea <_strtol_l.isra.0+0x1a>
 80058b6:	2a00      	cmp	r2, #0
 80058b8:	d1f6      	bne.n	80058a8 <_strtol_l.isra.0+0xd8>
 80058ba:	f8c8 1000 	str.w	r1, [r8]
 80058be:	e794      	b.n	80057ea <_strtol_l.isra.0+0x1a>
 80058c0:	08006301 	.word	0x08006301

080058c4 <strtol>:
 80058c4:	4613      	mov	r3, r2
 80058c6:	460a      	mov	r2, r1
 80058c8:	4601      	mov	r1, r0
 80058ca:	4802      	ldr	r0, [pc, #8]	@ (80058d4 <strtol+0x10>)
 80058cc:	6800      	ldr	r0, [r0, #0]
 80058ce:	f7ff bf7f 	b.w	80057d0 <_strtol_l.isra.0>
 80058d2:	bf00      	nop
 80058d4:	2000004c 	.word	0x2000004c

080058d8 <siprintf>:
 80058d8:	b40e      	push	{r1, r2, r3}
 80058da:	b510      	push	{r4, lr}
 80058dc:	b09d      	sub	sp, #116	@ 0x74
 80058de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80058e0:	9002      	str	r0, [sp, #8]
 80058e2:	9006      	str	r0, [sp, #24]
 80058e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80058e8:	480a      	ldr	r0, [pc, #40]	@ (8005914 <siprintf+0x3c>)
 80058ea:	9107      	str	r1, [sp, #28]
 80058ec:	9104      	str	r1, [sp, #16]
 80058ee:	490a      	ldr	r1, [pc, #40]	@ (8005918 <siprintf+0x40>)
 80058f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058f4:	9105      	str	r1, [sp, #20]
 80058f6:	2400      	movs	r4, #0
 80058f8:	a902      	add	r1, sp, #8
 80058fa:	6800      	ldr	r0, [r0, #0]
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005900:	f000 f994 	bl	8005c2c <_svfiprintf_r>
 8005904:	9b02      	ldr	r3, [sp, #8]
 8005906:	701c      	strb	r4, [r3, #0]
 8005908:	b01d      	add	sp, #116	@ 0x74
 800590a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800590e:	b003      	add	sp, #12
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	2000004c 	.word	0x2000004c
 8005918:	ffff0208 	.word	0xffff0208

0800591c <memset>:
 800591c:	4402      	add	r2, r0
 800591e:	4603      	mov	r3, r0
 8005920:	4293      	cmp	r3, r2
 8005922:	d100      	bne.n	8005926 <memset+0xa>
 8005924:	4770      	bx	lr
 8005926:	f803 1b01 	strb.w	r1, [r3], #1
 800592a:	e7f9      	b.n	8005920 <memset+0x4>

0800592c <__errno>:
 800592c:	4b01      	ldr	r3, [pc, #4]	@ (8005934 <__errno+0x8>)
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2000004c 	.word	0x2000004c

08005938 <__libc_init_array>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4d0d      	ldr	r5, [pc, #52]	@ (8005970 <__libc_init_array+0x38>)
 800593c:	4c0d      	ldr	r4, [pc, #52]	@ (8005974 <__libc_init_array+0x3c>)
 800593e:	1b64      	subs	r4, r4, r5
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	2600      	movs	r6, #0
 8005944:	42a6      	cmp	r6, r4
 8005946:	d109      	bne.n	800595c <__libc_init_array+0x24>
 8005948:	4d0b      	ldr	r5, [pc, #44]	@ (8005978 <__libc_init_array+0x40>)
 800594a:	4c0c      	ldr	r4, [pc, #48]	@ (800597c <__libc_init_array+0x44>)
 800594c:	f000 fc64 	bl	8006218 <_init>
 8005950:	1b64      	subs	r4, r4, r5
 8005952:	10a4      	asrs	r4, r4, #2
 8005954:	2600      	movs	r6, #0
 8005956:	42a6      	cmp	r6, r4
 8005958:	d105      	bne.n	8005966 <__libc_init_array+0x2e>
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005960:	4798      	blx	r3
 8005962:	3601      	adds	r6, #1
 8005964:	e7ee      	b.n	8005944 <__libc_init_array+0xc>
 8005966:	f855 3b04 	ldr.w	r3, [r5], #4
 800596a:	4798      	blx	r3
 800596c:	3601      	adds	r6, #1
 800596e:	e7f2      	b.n	8005956 <__libc_init_array+0x1e>
 8005970:	0800643c 	.word	0x0800643c
 8005974:	0800643c 	.word	0x0800643c
 8005978:	0800643c 	.word	0x0800643c
 800597c:	08006440 	.word	0x08006440

08005980 <__retarget_lock_acquire_recursive>:
 8005980:	4770      	bx	lr

08005982 <__retarget_lock_release_recursive>:
 8005982:	4770      	bx	lr

08005984 <_free_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4605      	mov	r5, r0
 8005988:	2900      	cmp	r1, #0
 800598a:	d041      	beq.n	8005a10 <_free_r+0x8c>
 800598c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005990:	1f0c      	subs	r4, r1, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	bfb8      	it	lt
 8005996:	18e4      	addlt	r4, r4, r3
 8005998:	f000 f8e0 	bl	8005b5c <__malloc_lock>
 800599c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a14 <_free_r+0x90>)
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	b933      	cbnz	r3, 80059b0 <_free_r+0x2c>
 80059a2:	6063      	str	r3, [r4, #4]
 80059a4:	6014      	str	r4, [r2, #0]
 80059a6:	4628      	mov	r0, r5
 80059a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059ac:	f000 b8dc 	b.w	8005b68 <__malloc_unlock>
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d908      	bls.n	80059c6 <_free_r+0x42>
 80059b4:	6820      	ldr	r0, [r4, #0]
 80059b6:	1821      	adds	r1, r4, r0
 80059b8:	428b      	cmp	r3, r1
 80059ba:	bf01      	itttt	eq
 80059bc:	6819      	ldreq	r1, [r3, #0]
 80059be:	685b      	ldreq	r3, [r3, #4]
 80059c0:	1809      	addeq	r1, r1, r0
 80059c2:	6021      	streq	r1, [r4, #0]
 80059c4:	e7ed      	b.n	80059a2 <_free_r+0x1e>
 80059c6:	461a      	mov	r2, r3
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	b10b      	cbz	r3, 80059d0 <_free_r+0x4c>
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	d9fa      	bls.n	80059c6 <_free_r+0x42>
 80059d0:	6811      	ldr	r1, [r2, #0]
 80059d2:	1850      	adds	r0, r2, r1
 80059d4:	42a0      	cmp	r0, r4
 80059d6:	d10b      	bne.n	80059f0 <_free_r+0x6c>
 80059d8:	6820      	ldr	r0, [r4, #0]
 80059da:	4401      	add	r1, r0
 80059dc:	1850      	adds	r0, r2, r1
 80059de:	4283      	cmp	r3, r0
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	d1e0      	bne.n	80059a6 <_free_r+0x22>
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	6053      	str	r3, [r2, #4]
 80059ea:	4408      	add	r0, r1
 80059ec:	6010      	str	r0, [r2, #0]
 80059ee:	e7da      	b.n	80059a6 <_free_r+0x22>
 80059f0:	d902      	bls.n	80059f8 <_free_r+0x74>
 80059f2:	230c      	movs	r3, #12
 80059f4:	602b      	str	r3, [r5, #0]
 80059f6:	e7d6      	b.n	80059a6 <_free_r+0x22>
 80059f8:	6820      	ldr	r0, [r4, #0]
 80059fa:	1821      	adds	r1, r4, r0
 80059fc:	428b      	cmp	r3, r1
 80059fe:	bf04      	itt	eq
 8005a00:	6819      	ldreq	r1, [r3, #0]
 8005a02:	685b      	ldreq	r3, [r3, #4]
 8005a04:	6063      	str	r3, [r4, #4]
 8005a06:	bf04      	itt	eq
 8005a08:	1809      	addeq	r1, r1, r0
 8005a0a:	6021      	streq	r1, [r4, #0]
 8005a0c:	6054      	str	r4, [r2, #4]
 8005a0e:	e7ca      	b.n	80059a6 <_free_r+0x22>
 8005a10:	bd38      	pop	{r3, r4, r5, pc}
 8005a12:	bf00      	nop
 8005a14:	20000550 	.word	0x20000550

08005a18 <sbrk_aligned>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005a58 <sbrk_aligned+0x40>)
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	6831      	ldr	r1, [r6, #0]
 8005a20:	4605      	mov	r5, r0
 8005a22:	b911      	cbnz	r1, 8005a2a <sbrk_aligned+0x12>
 8005a24:	f000 fba4 	bl	8006170 <_sbrk_r>
 8005a28:	6030      	str	r0, [r6, #0]
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f000 fb9f 	bl	8006170 <_sbrk_r>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	d103      	bne.n	8005a3e <sbrk_aligned+0x26>
 8005a36:	f04f 34ff 	mov.w	r4, #4294967295
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	bd70      	pop	{r4, r5, r6, pc}
 8005a3e:	1cc4      	adds	r4, r0, #3
 8005a40:	f024 0403 	bic.w	r4, r4, #3
 8005a44:	42a0      	cmp	r0, r4
 8005a46:	d0f8      	beq.n	8005a3a <sbrk_aligned+0x22>
 8005a48:	1a21      	subs	r1, r4, r0
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f000 fb90 	bl	8006170 <_sbrk_r>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d1f2      	bne.n	8005a3a <sbrk_aligned+0x22>
 8005a54:	e7ef      	b.n	8005a36 <sbrk_aligned+0x1e>
 8005a56:	bf00      	nop
 8005a58:	2000054c 	.word	0x2000054c

08005a5c <_malloc_r>:
 8005a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a60:	1ccd      	adds	r5, r1, #3
 8005a62:	f025 0503 	bic.w	r5, r5, #3
 8005a66:	3508      	adds	r5, #8
 8005a68:	2d0c      	cmp	r5, #12
 8005a6a:	bf38      	it	cc
 8005a6c:	250c      	movcc	r5, #12
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	4606      	mov	r6, r0
 8005a72:	db01      	blt.n	8005a78 <_malloc_r+0x1c>
 8005a74:	42a9      	cmp	r1, r5
 8005a76:	d904      	bls.n	8005a82 <_malloc_r+0x26>
 8005a78:	230c      	movs	r3, #12
 8005a7a:	6033      	str	r3, [r6, #0]
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b58 <_malloc_r+0xfc>
 8005a86:	f000 f869 	bl	8005b5c <__malloc_lock>
 8005a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a8e:	461c      	mov	r4, r3
 8005a90:	bb44      	cbnz	r4, 8005ae4 <_malloc_r+0x88>
 8005a92:	4629      	mov	r1, r5
 8005a94:	4630      	mov	r0, r6
 8005a96:	f7ff ffbf 	bl	8005a18 <sbrk_aligned>
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	d158      	bne.n	8005b52 <_malloc_r+0xf6>
 8005aa0:	f8d8 4000 	ldr.w	r4, [r8]
 8005aa4:	4627      	mov	r7, r4
 8005aa6:	2f00      	cmp	r7, #0
 8005aa8:	d143      	bne.n	8005b32 <_malloc_r+0xd6>
 8005aaa:	2c00      	cmp	r4, #0
 8005aac:	d04b      	beq.n	8005b46 <_malloc_r+0xea>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	4639      	mov	r1, r7
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	eb04 0903 	add.w	r9, r4, r3
 8005ab8:	f000 fb5a 	bl	8006170 <_sbrk_r>
 8005abc:	4581      	cmp	r9, r0
 8005abe:	d142      	bne.n	8005b46 <_malloc_r+0xea>
 8005ac0:	6821      	ldr	r1, [r4, #0]
 8005ac2:	1a6d      	subs	r5, r5, r1
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f7ff ffa6 	bl	8005a18 <sbrk_aligned>
 8005acc:	3001      	adds	r0, #1
 8005ace:	d03a      	beq.n	8005b46 <_malloc_r+0xea>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	442b      	add	r3, r5
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	bb62      	cbnz	r2, 8005b38 <_malloc_r+0xdc>
 8005ade:	f8c8 7000 	str.w	r7, [r8]
 8005ae2:	e00f      	b.n	8005b04 <_malloc_r+0xa8>
 8005ae4:	6822      	ldr	r2, [r4, #0]
 8005ae6:	1b52      	subs	r2, r2, r5
 8005ae8:	d420      	bmi.n	8005b2c <_malloc_r+0xd0>
 8005aea:	2a0b      	cmp	r2, #11
 8005aec:	d917      	bls.n	8005b1e <_malloc_r+0xc2>
 8005aee:	1961      	adds	r1, r4, r5
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	6025      	str	r5, [r4, #0]
 8005af4:	bf18      	it	ne
 8005af6:	6059      	strne	r1, [r3, #4]
 8005af8:	6863      	ldr	r3, [r4, #4]
 8005afa:	bf08      	it	eq
 8005afc:	f8c8 1000 	streq.w	r1, [r8]
 8005b00:	5162      	str	r2, [r4, r5]
 8005b02:	604b      	str	r3, [r1, #4]
 8005b04:	4630      	mov	r0, r6
 8005b06:	f000 f82f 	bl	8005b68 <__malloc_unlock>
 8005b0a:	f104 000b 	add.w	r0, r4, #11
 8005b0e:	1d23      	adds	r3, r4, #4
 8005b10:	f020 0007 	bic.w	r0, r0, #7
 8005b14:	1ac2      	subs	r2, r0, r3
 8005b16:	bf1c      	itt	ne
 8005b18:	1a1b      	subne	r3, r3, r0
 8005b1a:	50a3      	strne	r3, [r4, r2]
 8005b1c:	e7af      	b.n	8005a7e <_malloc_r+0x22>
 8005b1e:	6862      	ldr	r2, [r4, #4]
 8005b20:	42a3      	cmp	r3, r4
 8005b22:	bf0c      	ite	eq
 8005b24:	f8c8 2000 	streq.w	r2, [r8]
 8005b28:	605a      	strne	r2, [r3, #4]
 8005b2a:	e7eb      	b.n	8005b04 <_malloc_r+0xa8>
 8005b2c:	4623      	mov	r3, r4
 8005b2e:	6864      	ldr	r4, [r4, #4]
 8005b30:	e7ae      	b.n	8005a90 <_malloc_r+0x34>
 8005b32:	463c      	mov	r4, r7
 8005b34:	687f      	ldr	r7, [r7, #4]
 8005b36:	e7b6      	b.n	8005aa6 <_malloc_r+0x4a>
 8005b38:	461a      	mov	r2, r3
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	d1fb      	bne.n	8005b38 <_malloc_r+0xdc>
 8005b40:	2300      	movs	r3, #0
 8005b42:	6053      	str	r3, [r2, #4]
 8005b44:	e7de      	b.n	8005b04 <_malloc_r+0xa8>
 8005b46:	230c      	movs	r3, #12
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f000 f80c 	bl	8005b68 <__malloc_unlock>
 8005b50:	e794      	b.n	8005a7c <_malloc_r+0x20>
 8005b52:	6005      	str	r5, [r0, #0]
 8005b54:	e7d6      	b.n	8005b04 <_malloc_r+0xa8>
 8005b56:	bf00      	nop
 8005b58:	20000550 	.word	0x20000550

08005b5c <__malloc_lock>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	@ (8005b64 <__malloc_lock+0x8>)
 8005b5e:	f7ff bf0f 	b.w	8005980 <__retarget_lock_acquire_recursive>
 8005b62:	bf00      	nop
 8005b64:	20000548 	.word	0x20000548

08005b68 <__malloc_unlock>:
 8005b68:	4801      	ldr	r0, [pc, #4]	@ (8005b70 <__malloc_unlock+0x8>)
 8005b6a:	f7ff bf0a 	b.w	8005982 <__retarget_lock_release_recursive>
 8005b6e:	bf00      	nop
 8005b70:	20000548 	.word	0x20000548

08005b74 <__ssputs_r>:
 8005b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b78:	688e      	ldr	r6, [r1, #8]
 8005b7a:	461f      	mov	r7, r3
 8005b7c:	42be      	cmp	r6, r7
 8005b7e:	680b      	ldr	r3, [r1, #0]
 8005b80:	4682      	mov	sl, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	4690      	mov	r8, r2
 8005b86:	d82d      	bhi.n	8005be4 <__ssputs_r+0x70>
 8005b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b90:	d026      	beq.n	8005be0 <__ssputs_r+0x6c>
 8005b92:	6965      	ldr	r5, [r4, #20]
 8005b94:	6909      	ldr	r1, [r1, #16]
 8005b96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b9a:	eba3 0901 	sub.w	r9, r3, r1
 8005b9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ba2:	1c7b      	adds	r3, r7, #1
 8005ba4:	444b      	add	r3, r9
 8005ba6:	106d      	asrs	r5, r5, #1
 8005ba8:	429d      	cmp	r5, r3
 8005baa:	bf38      	it	cc
 8005bac:	461d      	movcc	r5, r3
 8005bae:	0553      	lsls	r3, r2, #21
 8005bb0:	d527      	bpl.n	8005c02 <__ssputs_r+0x8e>
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	f7ff ff52 	bl	8005a5c <_malloc_r>
 8005bb8:	4606      	mov	r6, r0
 8005bba:	b360      	cbz	r0, 8005c16 <__ssputs_r+0xa2>
 8005bbc:	6921      	ldr	r1, [r4, #16]
 8005bbe:	464a      	mov	r2, r9
 8005bc0:	f000 fae6 	bl	8006190 <memcpy>
 8005bc4:	89a3      	ldrh	r3, [r4, #12]
 8005bc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bce:	81a3      	strh	r3, [r4, #12]
 8005bd0:	6126      	str	r6, [r4, #16]
 8005bd2:	6165      	str	r5, [r4, #20]
 8005bd4:	444e      	add	r6, r9
 8005bd6:	eba5 0509 	sub.w	r5, r5, r9
 8005bda:	6026      	str	r6, [r4, #0]
 8005bdc:	60a5      	str	r5, [r4, #8]
 8005bde:	463e      	mov	r6, r7
 8005be0:	42be      	cmp	r6, r7
 8005be2:	d900      	bls.n	8005be6 <__ssputs_r+0x72>
 8005be4:	463e      	mov	r6, r7
 8005be6:	6820      	ldr	r0, [r4, #0]
 8005be8:	4632      	mov	r2, r6
 8005bea:	4641      	mov	r1, r8
 8005bec:	f000 faa6 	bl	800613c <memmove>
 8005bf0:	68a3      	ldr	r3, [r4, #8]
 8005bf2:	1b9b      	subs	r3, r3, r6
 8005bf4:	60a3      	str	r3, [r4, #8]
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	4433      	add	r3, r6
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c02:	462a      	mov	r2, r5
 8005c04:	f000 fad2 	bl	80061ac <_realloc_r>
 8005c08:	4606      	mov	r6, r0
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d1e0      	bne.n	8005bd0 <__ssputs_r+0x5c>
 8005c0e:	6921      	ldr	r1, [r4, #16]
 8005c10:	4650      	mov	r0, sl
 8005c12:	f7ff feb7 	bl	8005984 <_free_r>
 8005c16:	230c      	movs	r3, #12
 8005c18:	f8ca 3000 	str.w	r3, [sl]
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c22:	81a3      	strh	r3, [r4, #12]
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	e7e9      	b.n	8005bfe <__ssputs_r+0x8a>
	...

08005c2c <_svfiprintf_r>:
 8005c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c30:	4698      	mov	r8, r3
 8005c32:	898b      	ldrh	r3, [r1, #12]
 8005c34:	061b      	lsls	r3, r3, #24
 8005c36:	b09d      	sub	sp, #116	@ 0x74
 8005c38:	4607      	mov	r7, r0
 8005c3a:	460d      	mov	r5, r1
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	d510      	bpl.n	8005c62 <_svfiprintf_r+0x36>
 8005c40:	690b      	ldr	r3, [r1, #16]
 8005c42:	b973      	cbnz	r3, 8005c62 <_svfiprintf_r+0x36>
 8005c44:	2140      	movs	r1, #64	@ 0x40
 8005c46:	f7ff ff09 	bl	8005a5c <_malloc_r>
 8005c4a:	6028      	str	r0, [r5, #0]
 8005c4c:	6128      	str	r0, [r5, #16]
 8005c4e:	b930      	cbnz	r0, 8005c5e <_svfiprintf_r+0x32>
 8005c50:	230c      	movs	r3, #12
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295
 8005c58:	b01d      	add	sp, #116	@ 0x74
 8005c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5e:	2340      	movs	r3, #64	@ 0x40
 8005c60:	616b      	str	r3, [r5, #20]
 8005c62:	2300      	movs	r3, #0
 8005c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c66:	2320      	movs	r3, #32
 8005c68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c70:	2330      	movs	r3, #48	@ 0x30
 8005c72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e10 <_svfiprintf_r+0x1e4>
 8005c76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c7a:	f04f 0901 	mov.w	r9, #1
 8005c7e:	4623      	mov	r3, r4
 8005c80:	469a      	mov	sl, r3
 8005c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c86:	b10a      	cbz	r2, 8005c8c <_svfiprintf_r+0x60>
 8005c88:	2a25      	cmp	r2, #37	@ 0x25
 8005c8a:	d1f9      	bne.n	8005c80 <_svfiprintf_r+0x54>
 8005c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8005c90:	d00b      	beq.n	8005caa <_svfiprintf_r+0x7e>
 8005c92:	465b      	mov	r3, fp
 8005c94:	4622      	mov	r2, r4
 8005c96:	4629      	mov	r1, r5
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f7ff ff6b 	bl	8005b74 <__ssputs_r>
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	f000 80a7 	beq.w	8005df2 <_svfiprintf_r+0x1c6>
 8005ca4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ca6:	445a      	add	r2, fp
 8005ca8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005caa:	f89a 3000 	ldrb.w	r3, [sl]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 809f 	beq.w	8005df2 <_svfiprintf_r+0x1c6>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cbe:	f10a 0a01 	add.w	sl, sl, #1
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	9307      	str	r3, [sp, #28]
 8005cc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cca:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ccc:	4654      	mov	r4, sl
 8005cce:	2205      	movs	r2, #5
 8005cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd4:	484e      	ldr	r0, [pc, #312]	@ (8005e10 <_svfiprintf_r+0x1e4>)
 8005cd6:	f7fa fa83 	bl	80001e0 <memchr>
 8005cda:	9a04      	ldr	r2, [sp, #16]
 8005cdc:	b9d8      	cbnz	r0, 8005d16 <_svfiprintf_r+0xea>
 8005cde:	06d0      	lsls	r0, r2, #27
 8005ce0:	bf44      	itt	mi
 8005ce2:	2320      	movmi	r3, #32
 8005ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ce8:	0711      	lsls	r1, r2, #28
 8005cea:	bf44      	itt	mi
 8005cec:	232b      	movmi	r3, #43	@ 0x2b
 8005cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8005cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cf8:	d015      	beq.n	8005d26 <_svfiprintf_r+0xfa>
 8005cfa:	9a07      	ldr	r2, [sp, #28]
 8005cfc:	4654      	mov	r4, sl
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f04f 0c0a 	mov.w	ip, #10
 8005d04:	4621      	mov	r1, r4
 8005d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d0a:	3b30      	subs	r3, #48	@ 0x30
 8005d0c:	2b09      	cmp	r3, #9
 8005d0e:	d94b      	bls.n	8005da8 <_svfiprintf_r+0x17c>
 8005d10:	b1b0      	cbz	r0, 8005d40 <_svfiprintf_r+0x114>
 8005d12:	9207      	str	r2, [sp, #28]
 8005d14:	e014      	b.n	8005d40 <_svfiprintf_r+0x114>
 8005d16:	eba0 0308 	sub.w	r3, r0, r8
 8005d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	9304      	str	r3, [sp, #16]
 8005d22:	46a2      	mov	sl, r4
 8005d24:	e7d2      	b.n	8005ccc <_svfiprintf_r+0xa0>
 8005d26:	9b03      	ldr	r3, [sp, #12]
 8005d28:	1d19      	adds	r1, r3, #4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	9103      	str	r1, [sp, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bfbb      	ittet	lt
 8005d32:	425b      	neglt	r3, r3
 8005d34:	f042 0202 	orrlt.w	r2, r2, #2
 8005d38:	9307      	strge	r3, [sp, #28]
 8005d3a:	9307      	strlt	r3, [sp, #28]
 8005d3c:	bfb8      	it	lt
 8005d3e:	9204      	strlt	r2, [sp, #16]
 8005d40:	7823      	ldrb	r3, [r4, #0]
 8005d42:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d44:	d10a      	bne.n	8005d5c <_svfiprintf_r+0x130>
 8005d46:	7863      	ldrb	r3, [r4, #1]
 8005d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d4a:	d132      	bne.n	8005db2 <_svfiprintf_r+0x186>
 8005d4c:	9b03      	ldr	r3, [sp, #12]
 8005d4e:	1d1a      	adds	r2, r3, #4
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	9203      	str	r2, [sp, #12]
 8005d54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d58:	3402      	adds	r4, #2
 8005d5a:	9305      	str	r3, [sp, #20]
 8005d5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e20 <_svfiprintf_r+0x1f4>
 8005d60:	7821      	ldrb	r1, [r4, #0]
 8005d62:	2203      	movs	r2, #3
 8005d64:	4650      	mov	r0, sl
 8005d66:	f7fa fa3b 	bl	80001e0 <memchr>
 8005d6a:	b138      	cbz	r0, 8005d7c <_svfiprintf_r+0x150>
 8005d6c:	9b04      	ldr	r3, [sp, #16]
 8005d6e:	eba0 000a 	sub.w	r0, r0, sl
 8005d72:	2240      	movs	r2, #64	@ 0x40
 8005d74:	4082      	lsls	r2, r0
 8005d76:	4313      	orrs	r3, r2
 8005d78:	3401      	adds	r4, #1
 8005d7a:	9304      	str	r3, [sp, #16]
 8005d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d80:	4824      	ldr	r0, [pc, #144]	@ (8005e14 <_svfiprintf_r+0x1e8>)
 8005d82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d86:	2206      	movs	r2, #6
 8005d88:	f7fa fa2a 	bl	80001e0 <memchr>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d036      	beq.n	8005dfe <_svfiprintf_r+0x1d2>
 8005d90:	4b21      	ldr	r3, [pc, #132]	@ (8005e18 <_svfiprintf_r+0x1ec>)
 8005d92:	bb1b      	cbnz	r3, 8005ddc <_svfiprintf_r+0x1b0>
 8005d94:	9b03      	ldr	r3, [sp, #12]
 8005d96:	3307      	adds	r3, #7
 8005d98:	f023 0307 	bic.w	r3, r3, #7
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	9303      	str	r3, [sp, #12]
 8005da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da2:	4433      	add	r3, r6
 8005da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005da6:	e76a      	b.n	8005c7e <_svfiprintf_r+0x52>
 8005da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dac:	460c      	mov	r4, r1
 8005dae:	2001      	movs	r0, #1
 8005db0:	e7a8      	b.n	8005d04 <_svfiprintf_r+0xd8>
 8005db2:	2300      	movs	r3, #0
 8005db4:	3401      	adds	r4, #1
 8005db6:	9305      	str	r3, [sp, #20]
 8005db8:	4619      	mov	r1, r3
 8005dba:	f04f 0c0a 	mov.w	ip, #10
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dc4:	3a30      	subs	r2, #48	@ 0x30
 8005dc6:	2a09      	cmp	r2, #9
 8005dc8:	d903      	bls.n	8005dd2 <_svfiprintf_r+0x1a6>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0c6      	beq.n	8005d5c <_svfiprintf_r+0x130>
 8005dce:	9105      	str	r1, [sp, #20]
 8005dd0:	e7c4      	b.n	8005d5c <_svfiprintf_r+0x130>
 8005dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e7f0      	b.n	8005dbe <_svfiprintf_r+0x192>
 8005ddc:	ab03      	add	r3, sp, #12
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	462a      	mov	r2, r5
 8005de2:	4b0e      	ldr	r3, [pc, #56]	@ (8005e1c <_svfiprintf_r+0x1f0>)
 8005de4:	a904      	add	r1, sp, #16
 8005de6:	4638      	mov	r0, r7
 8005de8:	f3af 8000 	nop.w
 8005dec:	1c42      	adds	r2, r0, #1
 8005dee:	4606      	mov	r6, r0
 8005df0:	d1d6      	bne.n	8005da0 <_svfiprintf_r+0x174>
 8005df2:	89ab      	ldrh	r3, [r5, #12]
 8005df4:	065b      	lsls	r3, r3, #25
 8005df6:	f53f af2d 	bmi.w	8005c54 <_svfiprintf_r+0x28>
 8005dfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dfc:	e72c      	b.n	8005c58 <_svfiprintf_r+0x2c>
 8005dfe:	ab03      	add	r3, sp, #12
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	462a      	mov	r2, r5
 8005e04:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <_svfiprintf_r+0x1f0>)
 8005e06:	a904      	add	r1, sp, #16
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f000 f879 	bl	8005f00 <_printf_i>
 8005e0e:	e7ed      	b.n	8005dec <_svfiprintf_r+0x1c0>
 8005e10:	08006401 	.word	0x08006401
 8005e14:	0800640b 	.word	0x0800640b
 8005e18:	00000000 	.word	0x00000000
 8005e1c:	08005b75 	.word	0x08005b75
 8005e20:	08006407 	.word	0x08006407

08005e24 <_printf_common>:
 8005e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e28:	4616      	mov	r6, r2
 8005e2a:	4698      	mov	r8, r3
 8005e2c:	688a      	ldr	r2, [r1, #8]
 8005e2e:	690b      	ldr	r3, [r1, #16]
 8005e30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e34:	4293      	cmp	r3, r2
 8005e36:	bfb8      	it	lt
 8005e38:	4613      	movlt	r3, r2
 8005e3a:	6033      	str	r3, [r6, #0]
 8005e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e40:	4607      	mov	r7, r0
 8005e42:	460c      	mov	r4, r1
 8005e44:	b10a      	cbz	r2, 8005e4a <_printf_common+0x26>
 8005e46:	3301      	adds	r3, #1
 8005e48:	6033      	str	r3, [r6, #0]
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	0699      	lsls	r1, r3, #26
 8005e4e:	bf42      	ittt	mi
 8005e50:	6833      	ldrmi	r3, [r6, #0]
 8005e52:	3302      	addmi	r3, #2
 8005e54:	6033      	strmi	r3, [r6, #0]
 8005e56:	6825      	ldr	r5, [r4, #0]
 8005e58:	f015 0506 	ands.w	r5, r5, #6
 8005e5c:	d106      	bne.n	8005e6c <_printf_common+0x48>
 8005e5e:	f104 0a19 	add.w	sl, r4, #25
 8005e62:	68e3      	ldr	r3, [r4, #12]
 8005e64:	6832      	ldr	r2, [r6, #0]
 8005e66:	1a9b      	subs	r3, r3, r2
 8005e68:	42ab      	cmp	r3, r5
 8005e6a:	dc26      	bgt.n	8005eba <_printf_common+0x96>
 8005e6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e70:	6822      	ldr	r2, [r4, #0]
 8005e72:	3b00      	subs	r3, #0
 8005e74:	bf18      	it	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	0692      	lsls	r2, r2, #26
 8005e7a:	d42b      	bmi.n	8005ed4 <_printf_common+0xb0>
 8005e7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e80:	4641      	mov	r1, r8
 8005e82:	4638      	mov	r0, r7
 8005e84:	47c8      	blx	r9
 8005e86:	3001      	adds	r0, #1
 8005e88:	d01e      	beq.n	8005ec8 <_printf_common+0xa4>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	6922      	ldr	r2, [r4, #16]
 8005e8e:	f003 0306 	and.w	r3, r3, #6
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	bf02      	ittt	eq
 8005e96:	68e5      	ldreq	r5, [r4, #12]
 8005e98:	6833      	ldreq	r3, [r6, #0]
 8005e9a:	1aed      	subeq	r5, r5, r3
 8005e9c:	68a3      	ldr	r3, [r4, #8]
 8005e9e:	bf0c      	ite	eq
 8005ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea4:	2500      	movne	r5, #0
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	bfc4      	itt	gt
 8005eaa:	1a9b      	subgt	r3, r3, r2
 8005eac:	18ed      	addgt	r5, r5, r3
 8005eae:	2600      	movs	r6, #0
 8005eb0:	341a      	adds	r4, #26
 8005eb2:	42b5      	cmp	r5, r6
 8005eb4:	d11a      	bne.n	8005eec <_printf_common+0xc8>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e008      	b.n	8005ecc <_printf_common+0xa8>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	4652      	mov	r2, sl
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	47c8      	blx	r9
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d103      	bne.n	8005ed0 <_printf_common+0xac>
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed0:	3501      	adds	r5, #1
 8005ed2:	e7c6      	b.n	8005e62 <_printf_common+0x3e>
 8005ed4:	18e1      	adds	r1, r4, r3
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	2030      	movs	r0, #48	@ 0x30
 8005eda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ede:	4422      	add	r2, r4
 8005ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ee4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ee8:	3302      	adds	r3, #2
 8005eea:	e7c7      	b.n	8005e7c <_printf_common+0x58>
 8005eec:	2301      	movs	r3, #1
 8005eee:	4622      	mov	r2, r4
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	47c8      	blx	r9
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d0e6      	beq.n	8005ec8 <_printf_common+0xa4>
 8005efa:	3601      	adds	r6, #1
 8005efc:	e7d9      	b.n	8005eb2 <_printf_common+0x8e>
	...

08005f00 <_printf_i>:
 8005f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f04:	7e0f      	ldrb	r7, [r1, #24]
 8005f06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f08:	2f78      	cmp	r7, #120	@ 0x78
 8005f0a:	4691      	mov	r9, r2
 8005f0c:	4680      	mov	r8, r0
 8005f0e:	460c      	mov	r4, r1
 8005f10:	469a      	mov	sl, r3
 8005f12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f16:	d807      	bhi.n	8005f28 <_printf_i+0x28>
 8005f18:	2f62      	cmp	r7, #98	@ 0x62
 8005f1a:	d80a      	bhi.n	8005f32 <_printf_i+0x32>
 8005f1c:	2f00      	cmp	r7, #0
 8005f1e:	f000 80d1 	beq.w	80060c4 <_printf_i+0x1c4>
 8005f22:	2f58      	cmp	r7, #88	@ 0x58
 8005f24:	f000 80b8 	beq.w	8006098 <_printf_i+0x198>
 8005f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f30:	e03a      	b.n	8005fa8 <_printf_i+0xa8>
 8005f32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f36:	2b15      	cmp	r3, #21
 8005f38:	d8f6      	bhi.n	8005f28 <_printf_i+0x28>
 8005f3a:	a101      	add	r1, pc, #4	@ (adr r1, 8005f40 <_printf_i+0x40>)
 8005f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f40:	08005f99 	.word	0x08005f99
 8005f44:	08005fad 	.word	0x08005fad
 8005f48:	08005f29 	.word	0x08005f29
 8005f4c:	08005f29 	.word	0x08005f29
 8005f50:	08005f29 	.word	0x08005f29
 8005f54:	08005f29 	.word	0x08005f29
 8005f58:	08005fad 	.word	0x08005fad
 8005f5c:	08005f29 	.word	0x08005f29
 8005f60:	08005f29 	.word	0x08005f29
 8005f64:	08005f29 	.word	0x08005f29
 8005f68:	08005f29 	.word	0x08005f29
 8005f6c:	080060ab 	.word	0x080060ab
 8005f70:	08005fd7 	.word	0x08005fd7
 8005f74:	08006065 	.word	0x08006065
 8005f78:	08005f29 	.word	0x08005f29
 8005f7c:	08005f29 	.word	0x08005f29
 8005f80:	080060cd 	.word	0x080060cd
 8005f84:	08005f29 	.word	0x08005f29
 8005f88:	08005fd7 	.word	0x08005fd7
 8005f8c:	08005f29 	.word	0x08005f29
 8005f90:	08005f29 	.word	0x08005f29
 8005f94:	0800606d 	.word	0x0800606d
 8005f98:	6833      	ldr	r3, [r6, #0]
 8005f9a:	1d1a      	adds	r2, r3, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6032      	str	r2, [r6, #0]
 8005fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e09c      	b.n	80060e6 <_printf_i+0x1e6>
 8005fac:	6833      	ldr	r3, [r6, #0]
 8005fae:	6820      	ldr	r0, [r4, #0]
 8005fb0:	1d19      	adds	r1, r3, #4
 8005fb2:	6031      	str	r1, [r6, #0]
 8005fb4:	0606      	lsls	r6, r0, #24
 8005fb6:	d501      	bpl.n	8005fbc <_printf_i+0xbc>
 8005fb8:	681d      	ldr	r5, [r3, #0]
 8005fba:	e003      	b.n	8005fc4 <_printf_i+0xc4>
 8005fbc:	0645      	lsls	r5, r0, #25
 8005fbe:	d5fb      	bpl.n	8005fb8 <_printf_i+0xb8>
 8005fc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fc4:	2d00      	cmp	r5, #0
 8005fc6:	da03      	bge.n	8005fd0 <_printf_i+0xd0>
 8005fc8:	232d      	movs	r3, #45	@ 0x2d
 8005fca:	426d      	negs	r5, r5
 8005fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fd0:	4858      	ldr	r0, [pc, #352]	@ (8006134 <_printf_i+0x234>)
 8005fd2:	230a      	movs	r3, #10
 8005fd4:	e011      	b.n	8005ffa <_printf_i+0xfa>
 8005fd6:	6821      	ldr	r1, [r4, #0]
 8005fd8:	6833      	ldr	r3, [r6, #0]
 8005fda:	0608      	lsls	r0, r1, #24
 8005fdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fe0:	d402      	bmi.n	8005fe8 <_printf_i+0xe8>
 8005fe2:	0649      	lsls	r1, r1, #25
 8005fe4:	bf48      	it	mi
 8005fe6:	b2ad      	uxthmi	r5, r5
 8005fe8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fea:	4852      	ldr	r0, [pc, #328]	@ (8006134 <_printf_i+0x234>)
 8005fec:	6033      	str	r3, [r6, #0]
 8005fee:	bf14      	ite	ne
 8005ff0:	230a      	movne	r3, #10
 8005ff2:	2308      	moveq	r3, #8
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ffa:	6866      	ldr	r6, [r4, #4]
 8005ffc:	60a6      	str	r6, [r4, #8]
 8005ffe:	2e00      	cmp	r6, #0
 8006000:	db05      	blt.n	800600e <_printf_i+0x10e>
 8006002:	6821      	ldr	r1, [r4, #0]
 8006004:	432e      	orrs	r6, r5
 8006006:	f021 0104 	bic.w	r1, r1, #4
 800600a:	6021      	str	r1, [r4, #0]
 800600c:	d04b      	beq.n	80060a6 <_printf_i+0x1a6>
 800600e:	4616      	mov	r6, r2
 8006010:	fbb5 f1f3 	udiv	r1, r5, r3
 8006014:	fb03 5711 	mls	r7, r3, r1, r5
 8006018:	5dc7      	ldrb	r7, [r0, r7]
 800601a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800601e:	462f      	mov	r7, r5
 8006020:	42bb      	cmp	r3, r7
 8006022:	460d      	mov	r5, r1
 8006024:	d9f4      	bls.n	8006010 <_printf_i+0x110>
 8006026:	2b08      	cmp	r3, #8
 8006028:	d10b      	bne.n	8006042 <_printf_i+0x142>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	07df      	lsls	r7, r3, #31
 800602e:	d508      	bpl.n	8006042 <_printf_i+0x142>
 8006030:	6923      	ldr	r3, [r4, #16]
 8006032:	6861      	ldr	r1, [r4, #4]
 8006034:	4299      	cmp	r1, r3
 8006036:	bfde      	ittt	le
 8006038:	2330      	movle	r3, #48	@ 0x30
 800603a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800603e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006042:	1b92      	subs	r2, r2, r6
 8006044:	6122      	str	r2, [r4, #16]
 8006046:	f8cd a000 	str.w	sl, [sp]
 800604a:	464b      	mov	r3, r9
 800604c:	aa03      	add	r2, sp, #12
 800604e:	4621      	mov	r1, r4
 8006050:	4640      	mov	r0, r8
 8006052:	f7ff fee7 	bl	8005e24 <_printf_common>
 8006056:	3001      	adds	r0, #1
 8006058:	d14a      	bne.n	80060f0 <_printf_i+0x1f0>
 800605a:	f04f 30ff 	mov.w	r0, #4294967295
 800605e:	b004      	add	sp, #16
 8006060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	f043 0320 	orr.w	r3, r3, #32
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	4832      	ldr	r0, [pc, #200]	@ (8006138 <_printf_i+0x238>)
 800606e:	2778      	movs	r7, #120	@ 0x78
 8006070:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	6831      	ldr	r1, [r6, #0]
 8006078:	061f      	lsls	r7, r3, #24
 800607a:	f851 5b04 	ldr.w	r5, [r1], #4
 800607e:	d402      	bmi.n	8006086 <_printf_i+0x186>
 8006080:	065f      	lsls	r7, r3, #25
 8006082:	bf48      	it	mi
 8006084:	b2ad      	uxthmi	r5, r5
 8006086:	6031      	str	r1, [r6, #0]
 8006088:	07d9      	lsls	r1, r3, #31
 800608a:	bf44      	itt	mi
 800608c:	f043 0320 	orrmi.w	r3, r3, #32
 8006090:	6023      	strmi	r3, [r4, #0]
 8006092:	b11d      	cbz	r5, 800609c <_printf_i+0x19c>
 8006094:	2310      	movs	r3, #16
 8006096:	e7ad      	b.n	8005ff4 <_printf_i+0xf4>
 8006098:	4826      	ldr	r0, [pc, #152]	@ (8006134 <_printf_i+0x234>)
 800609a:	e7e9      	b.n	8006070 <_printf_i+0x170>
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	f023 0320 	bic.w	r3, r3, #32
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	e7f6      	b.n	8006094 <_printf_i+0x194>
 80060a6:	4616      	mov	r6, r2
 80060a8:	e7bd      	b.n	8006026 <_printf_i+0x126>
 80060aa:	6833      	ldr	r3, [r6, #0]
 80060ac:	6825      	ldr	r5, [r4, #0]
 80060ae:	6961      	ldr	r1, [r4, #20]
 80060b0:	1d18      	adds	r0, r3, #4
 80060b2:	6030      	str	r0, [r6, #0]
 80060b4:	062e      	lsls	r6, r5, #24
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	d501      	bpl.n	80060be <_printf_i+0x1be>
 80060ba:	6019      	str	r1, [r3, #0]
 80060bc:	e002      	b.n	80060c4 <_printf_i+0x1c4>
 80060be:	0668      	lsls	r0, r5, #25
 80060c0:	d5fb      	bpl.n	80060ba <_printf_i+0x1ba>
 80060c2:	8019      	strh	r1, [r3, #0]
 80060c4:	2300      	movs	r3, #0
 80060c6:	6123      	str	r3, [r4, #16]
 80060c8:	4616      	mov	r6, r2
 80060ca:	e7bc      	b.n	8006046 <_printf_i+0x146>
 80060cc:	6833      	ldr	r3, [r6, #0]
 80060ce:	1d1a      	adds	r2, r3, #4
 80060d0:	6032      	str	r2, [r6, #0]
 80060d2:	681e      	ldr	r6, [r3, #0]
 80060d4:	6862      	ldr	r2, [r4, #4]
 80060d6:	2100      	movs	r1, #0
 80060d8:	4630      	mov	r0, r6
 80060da:	f7fa f881 	bl	80001e0 <memchr>
 80060de:	b108      	cbz	r0, 80060e4 <_printf_i+0x1e4>
 80060e0:	1b80      	subs	r0, r0, r6
 80060e2:	6060      	str	r0, [r4, #4]
 80060e4:	6863      	ldr	r3, [r4, #4]
 80060e6:	6123      	str	r3, [r4, #16]
 80060e8:	2300      	movs	r3, #0
 80060ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ee:	e7aa      	b.n	8006046 <_printf_i+0x146>
 80060f0:	6923      	ldr	r3, [r4, #16]
 80060f2:	4632      	mov	r2, r6
 80060f4:	4649      	mov	r1, r9
 80060f6:	4640      	mov	r0, r8
 80060f8:	47d0      	blx	sl
 80060fa:	3001      	adds	r0, #1
 80060fc:	d0ad      	beq.n	800605a <_printf_i+0x15a>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	079b      	lsls	r3, r3, #30
 8006102:	d413      	bmi.n	800612c <_printf_i+0x22c>
 8006104:	68e0      	ldr	r0, [r4, #12]
 8006106:	9b03      	ldr	r3, [sp, #12]
 8006108:	4298      	cmp	r0, r3
 800610a:	bfb8      	it	lt
 800610c:	4618      	movlt	r0, r3
 800610e:	e7a6      	b.n	800605e <_printf_i+0x15e>
 8006110:	2301      	movs	r3, #1
 8006112:	4632      	mov	r2, r6
 8006114:	4649      	mov	r1, r9
 8006116:	4640      	mov	r0, r8
 8006118:	47d0      	blx	sl
 800611a:	3001      	adds	r0, #1
 800611c:	d09d      	beq.n	800605a <_printf_i+0x15a>
 800611e:	3501      	adds	r5, #1
 8006120:	68e3      	ldr	r3, [r4, #12]
 8006122:	9903      	ldr	r1, [sp, #12]
 8006124:	1a5b      	subs	r3, r3, r1
 8006126:	42ab      	cmp	r3, r5
 8006128:	dcf2      	bgt.n	8006110 <_printf_i+0x210>
 800612a:	e7eb      	b.n	8006104 <_printf_i+0x204>
 800612c:	2500      	movs	r5, #0
 800612e:	f104 0619 	add.w	r6, r4, #25
 8006132:	e7f5      	b.n	8006120 <_printf_i+0x220>
 8006134:	08006412 	.word	0x08006412
 8006138:	08006423 	.word	0x08006423

0800613c <memmove>:
 800613c:	4288      	cmp	r0, r1
 800613e:	b510      	push	{r4, lr}
 8006140:	eb01 0402 	add.w	r4, r1, r2
 8006144:	d902      	bls.n	800614c <memmove+0x10>
 8006146:	4284      	cmp	r4, r0
 8006148:	4623      	mov	r3, r4
 800614a:	d807      	bhi.n	800615c <memmove+0x20>
 800614c:	1e43      	subs	r3, r0, #1
 800614e:	42a1      	cmp	r1, r4
 8006150:	d008      	beq.n	8006164 <memmove+0x28>
 8006152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006156:	f803 2f01 	strb.w	r2, [r3, #1]!
 800615a:	e7f8      	b.n	800614e <memmove+0x12>
 800615c:	4402      	add	r2, r0
 800615e:	4601      	mov	r1, r0
 8006160:	428a      	cmp	r2, r1
 8006162:	d100      	bne.n	8006166 <memmove+0x2a>
 8006164:	bd10      	pop	{r4, pc}
 8006166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800616a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800616e:	e7f7      	b.n	8006160 <memmove+0x24>

08006170 <_sbrk_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4d06      	ldr	r5, [pc, #24]	@ (800618c <_sbrk_r+0x1c>)
 8006174:	2300      	movs	r3, #0
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	f7fb ffc4 	bl	8002108 <_sbrk>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_sbrk_r+0x1a>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_sbrk_r+0x1a>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	20000544 	.word	0x20000544

08006190 <memcpy>:
 8006190:	440a      	add	r2, r1
 8006192:	4291      	cmp	r1, r2
 8006194:	f100 33ff 	add.w	r3, r0, #4294967295
 8006198:	d100      	bne.n	800619c <memcpy+0xc>
 800619a:	4770      	bx	lr
 800619c:	b510      	push	{r4, lr}
 800619e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a6:	4291      	cmp	r1, r2
 80061a8:	d1f9      	bne.n	800619e <memcpy+0xe>
 80061aa:	bd10      	pop	{r4, pc}

080061ac <_realloc_r>:
 80061ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b0:	4607      	mov	r7, r0
 80061b2:	4614      	mov	r4, r2
 80061b4:	460d      	mov	r5, r1
 80061b6:	b921      	cbnz	r1, 80061c2 <_realloc_r+0x16>
 80061b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061bc:	4611      	mov	r1, r2
 80061be:	f7ff bc4d 	b.w	8005a5c <_malloc_r>
 80061c2:	b92a      	cbnz	r2, 80061d0 <_realloc_r+0x24>
 80061c4:	f7ff fbde 	bl	8005984 <_free_r>
 80061c8:	4625      	mov	r5, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d0:	f000 f81a 	bl	8006208 <_malloc_usable_size_r>
 80061d4:	4284      	cmp	r4, r0
 80061d6:	4606      	mov	r6, r0
 80061d8:	d802      	bhi.n	80061e0 <_realloc_r+0x34>
 80061da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061de:	d8f4      	bhi.n	80061ca <_realloc_r+0x1e>
 80061e0:	4621      	mov	r1, r4
 80061e2:	4638      	mov	r0, r7
 80061e4:	f7ff fc3a 	bl	8005a5c <_malloc_r>
 80061e8:	4680      	mov	r8, r0
 80061ea:	b908      	cbnz	r0, 80061f0 <_realloc_r+0x44>
 80061ec:	4645      	mov	r5, r8
 80061ee:	e7ec      	b.n	80061ca <_realloc_r+0x1e>
 80061f0:	42b4      	cmp	r4, r6
 80061f2:	4622      	mov	r2, r4
 80061f4:	4629      	mov	r1, r5
 80061f6:	bf28      	it	cs
 80061f8:	4632      	movcs	r2, r6
 80061fa:	f7ff ffc9 	bl	8006190 <memcpy>
 80061fe:	4629      	mov	r1, r5
 8006200:	4638      	mov	r0, r7
 8006202:	f7ff fbbf 	bl	8005984 <_free_r>
 8006206:	e7f1      	b.n	80061ec <_realloc_r+0x40>

08006208 <_malloc_usable_size_r>:
 8006208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800620c:	1f18      	subs	r0, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	bfbc      	itt	lt
 8006212:	580b      	ldrlt	r3, [r1, r0]
 8006214:	18c0      	addlt	r0, r0, r3
 8006216:	4770      	bx	lr

08006218 <_init>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	bf00      	nop
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr

08006224 <_fini>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	bf00      	nop
 8006228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622a:	bc08      	pop	{r3}
 800622c:	469e      	mov	lr, r3
 800622e:	4770      	bx	lr
