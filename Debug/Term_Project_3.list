
Term_Project_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b220  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  0800b3c0  0800b3c0  0000c3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb20  0800bb20  0000d22c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bb20  0800bb20  0000cb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb28  0800bb28  0000d22c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb28  0800bb28  0000cb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb2c  0800bb2c  0000cb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  0800bb30  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  2000022c  0800bd5c  0000d22c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  0800bd5c  0000d7fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d22c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132e0  00000000  00000000  0000d25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027af  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00022cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e02  00000000  00000000  00023e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001982e  00000000  00000000  00024c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b0a  00000000  00000000  0003e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fb54  00000000  00000000  00053fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3b16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d20  00000000  00000000  000f3b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f987c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000022c 	.word	0x2000022c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b3a8 	.word	0x0800b3a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000230 	.word	0x20000230
 80001dc:	0800b3a8 	.word	0x0800b3a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <BNO055_Init>:
#include "stdio.h"      // For sprintf
#include "string.h"     // For strlen

static I2C_HandleTypeDef *imu_i2c = NULL;

void BNO055_Init(I2C_HandleTypeDef *hi2c) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af04      	add	r7, sp, #16
 8000eea:	6078      	str	r0, [r7, #4]
    imu_i2c = hi2c;
 8000eec:	4a46      	ldr	r2, [pc, #280]	@ (8001008 <BNO055_Init+0x124>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]

    // Soft reset
    uint8_t reset = 0x20;
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(imu_i2c, BNO055_ADDR, 0x3F, I2C_MEMADD_SIZE_8BIT, &reset, 1, 100);
 8000ef6:	4b44      	ldr	r3, [pc, #272]	@ (8001008 <BNO055_Init+0x124>)
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	2364      	movs	r3, #100	@ 0x64
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	2301      	movs	r3, #1
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	f107 030f 	add.w	r3, r7, #15
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	223f      	movs	r2, #63	@ 0x3f
 8000f0c:	2150      	movs	r1, #80	@ 0x50
 8000f0e:	f003 fd99 	bl	8004a44 <HAL_I2C_Mem_Write>
    HAL_Delay(750);  // Per datasheet
 8000f12:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000f16:	f002 fb49 	bl	80035ac <HAL_Delay>

    // Confirm chip ID (optional but robust)
    uint8_t chip_id = 0x00;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Read(imu_i2c, BNO055_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &chip_id, 1, 10);
 8000f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001008 <BNO055_Init+0x124>)
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	230a      	movs	r3, #10
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2301      	movs	r3, #1
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	f107 030e 	add.w	r3, r7, #14
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	2200      	movs	r2, #0
 8000f34:	2150      	movs	r1, #80	@ 0x50
 8000f36:	f003 fe7f 	bl	8004c38 <HAL_I2C_Mem_Read>
    if (chip_id != 0xA0) {
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f3e:	d007      	beq.n	8000f50 <BNO055_Init+0x6c>
        HAL_UART_Transmit(&huart1, (uint8_t*)"BNO055 ID Mismatch!\r\n", 22, HAL_MAX_DELAY);
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	2216      	movs	r2, #22
 8000f46:	4931      	ldr	r1, [pc, #196]	@ (800100c <BNO055_Init+0x128>)
 8000f48:	4831      	ldr	r0, [pc, #196]	@ (8001010 <BNO055_Init+0x12c>)
 8000f4a:	f006 fb30 	bl	80075ae <HAL_UART_Transmit>
 8000f4e:	e058      	b.n	8001002 <BNO055_Init+0x11e>
        return;
    }

    // Set to config mode
    uint8_t mode = 0x00;
 8000f50:	2300      	movs	r3, #0
 8000f52:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Mem_Write(imu_i2c, BNO055_ADDR, 0x3D, I2C_MEMADD_SIZE_8BIT, &mode, 1, 10);
 8000f54:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <BNO055_Init+0x124>)
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	230a      	movs	r3, #10
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	f107 030d 	add.w	r3, r7, #13
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	223d      	movs	r2, #61	@ 0x3d
 8000f6a:	2150      	movs	r1, #80	@ 0x50
 8000f6c:	f003 fd6a 	bl	8004a44 <HAL_I2C_Mem_Write>
    HAL_Delay(20);
 8000f70:	2014      	movs	r0, #20
 8000f72:	f002 fb1b 	bl	80035ac <HAL_Delay>

    // Set power mode to NORMAL
    uint8_t power = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Mem_Write(imu_i2c, BNO055_ADDR, 0x3E, I2C_MEMADD_SIZE_8BIT, &power, 1, 10);
 8000f7a:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <BNO055_Init+0x124>)
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	230a      	movs	r3, #10
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	2301      	movs	r3, #1
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	223e      	movs	r2, #62	@ 0x3e
 8000f90:	2150      	movs	r1, #80	@ 0x50
 8000f92:	f003 fd57 	bl	8004a44 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8000f96:	200a      	movs	r0, #10
 8000f98:	f002 fb08 	bl	80035ac <HAL_Delay>

    // Set page 0 (required before setting units)
    uint8_t page = 0x00;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(imu_i2c, BNO055_ADDR, 0x07, I2C_MEMADD_SIZE_8BIT, &page, 1, 10);
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <BNO055_Init+0x124>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	f107 030b 	add.w	r3, r7, #11
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	2150      	movs	r1, #80	@ 0x50
 8000fb8:	f003 fd44 	bl	8004a44 <HAL_I2C_Mem_Write>

    // Set units (optional — can skip this)
    uint8_t units = 0x00;  // Degrees, C, m/s²
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(imu_i2c, BNO055_ADDR, 0x3B, I2C_MEMADD_SIZE_8BIT, &units, 1, 10);
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <BNO055_Init+0x124>)
 8000fc2:	6818      	ldr	r0, [r3, #0]
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	f107 030a 	add.w	r3, r7, #10
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	223b      	movs	r2, #59	@ 0x3b
 8000fd6:	2150      	movs	r1, #80	@ 0x50
 8000fd8:	f003 fd34 	bl	8004a44 <HAL_I2C_Mem_Write>

    // Set operation mode (IMU or NDOF)
    mode = 0x0C;  // 0x08 = IMU, 0x0C = NDOF
 8000fdc:	230c      	movs	r3, #12
 8000fde:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Mem_Write(imu_i2c, BNO055_ADDR, 0x3D, I2C_MEMADD_SIZE_8BIT, &mode, 1, 10);
 8000fe0:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <BNO055_Init+0x124>)
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	230a      	movs	r3, #10
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	f107 030d 	add.w	r3, r7, #13
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	223d      	movs	r2, #61	@ 0x3d
 8000ff6:	2150      	movs	r1, #80	@ 0x50
 8000ff8:	f003 fd24 	bl	8004a44 <HAL_I2C_Mem_Write>
    HAL_Delay(20);
 8000ffc:	2014      	movs	r0, #20
 8000ffe:	f002 fad5 	bl	80035ac <HAL_Delay>
}
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000248 	.word	0x20000248
 800100c:	0800b3c0 	.word	0x0800b3c0
 8001010:	200004f4 	.word	0x200004f4

08001014 <dwt_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// === Servo Software PWM ===
void dwt_init(void) {
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <dwt_init+0x2c>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <dwt_init+0x2c>)
 800101e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001022:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <dwt_init+0x30>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <dwt_init+0x30>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <dwt_init+0x30>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6013      	str	r3, [r2, #0]
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000edf0 	.word	0xe000edf0
 8001044:	e0001000 	.word	0xe0001000

08001048 <servo_pwm_update>:

uint16_t servo_angle = 140;  // global control variable
uint16_t servo_step = 0;
uint32_t servo_step_time = 0;

void servo_pwm_update(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
    static enum { IDLE, HIGH, LOW } state	 = IDLE;
    static uint32_t pulse_start_us = 0;
    static uint32_t period_start_us = 0;
    uint32_t now_us = DWT->CYCCNT / (SystemCoreClock / 1000000);
 800104e:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <servo_pwm_update+0xb4>)
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	4b2b      	ldr	r3, [pc, #172]	@ (8001100 <servo_pwm_update+0xb8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	492b      	ldr	r1, [pc, #172]	@ (8001104 <servo_pwm_update+0xbc>)
 8001058:	fba1 1303 	umull	r1, r3, r1, r3
 800105c:	0c9b      	lsrs	r3, r3, #18
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	607b      	str	r3, [r7, #4]

    uint32_t pulse_width_us = 1000 + ((uint32_t)servo_angle * 1000) / 180;
 8001064:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <servo_pwm_update+0xc0>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106e:	fb02 f303 	mul.w	r3, r2, r3
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	4a25      	ldr	r2, [pc, #148]	@ (800110c <servo_pwm_update+0xc4>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001080:	603b      	str	r3, [r7, #0]

    switch (state) {
 8001082:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <servo_pwm_update+0xc8>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d025      	beq.n	80010d6 <servo_pwm_update+0x8e>
 800108a:	2b02      	cmp	r3, #2
 800108c:	dc32      	bgt.n	80010f4 <servo_pwm_update+0xac>
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <servo_pwm_update+0x50>
 8001092:	2b01      	cmp	r3, #1
 8001094:	d00f      	beq.n	80010b6 <servo_pwm_update+0x6e>
            if ((now_us - period_start_us) >= 20000) {
                state = IDLE;
            }
            break;
    }
}
 8001096:	e02d      	b.n	80010f4 <servo_pwm_update+0xac>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2140      	movs	r1, #64	@ 0x40
 800109c:	481d      	ldr	r0, [pc, #116]	@ (8001114 <servo_pwm_update+0xcc>)
 800109e:	f003 f843 	bl	8004128 <HAL_GPIO_WritePin>
            pulse_start_us = now_us;
 80010a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001118 <servo_pwm_update+0xd0>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6013      	str	r3, [r2, #0]
            period_start_us = now_us;
 80010a8:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <servo_pwm_update+0xd4>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
            state = HIGH;
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <servo_pwm_update+0xc8>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
            break;
 80010b4:	e01e      	b.n	80010f4 <servo_pwm_update+0xac>
            if ((now_us - pulse_start_us) >= pulse_width_us) {
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <servo_pwm_update+0xd0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d814      	bhi.n	80010ee <servo_pwm_update+0xa6>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2140      	movs	r1, #64	@ 0x40
 80010c8:	4812      	ldr	r0, [pc, #72]	@ (8001114 <servo_pwm_update+0xcc>)
 80010ca:	f003 f82d 	bl	8004128 <HAL_GPIO_WritePin>
                state = LOW;
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <servo_pwm_update+0xc8>)
 80010d0:	2202      	movs	r2, #2
 80010d2:	701a      	strb	r2, [r3, #0]
            break;
 80010d4:	e00b      	b.n	80010ee <servo_pwm_update+0xa6>
            if ((now_us - period_start_us) >= 20000) {
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <servo_pwm_update+0xd4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d905      	bls.n	80010f2 <servo_pwm_update+0xaa>
                state = IDLE;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <servo_pwm_update+0xc8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
            break;
 80010ec:	e001      	b.n	80010f2 <servo_pwm_update+0xaa>
            break;
 80010ee:	bf00      	nop
 80010f0:	e000      	b.n	80010f4 <servo_pwm_update+0xac>
            break;
 80010f2:	bf00      	nop
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	e0001000 	.word	0xe0001000
 8001100:	20000058 	.word	0x20000058
 8001104:	431bde83 	.word	0x431bde83
 8001108:	20000056 	.word	0x20000056
 800110c:	16c16c17 	.word	0x16c16c17
 8001110:	2000069c 	.word	0x2000069c
 8001114:	40020000 	.word	0x40020000
 8001118:	200006a0 	.word	0x200006a0
 800111c:	200006a4 	.word	0x200006a4

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001124:	b098      	sub	sp, #96	@ 0x60
 8001126:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001128:	f002 f9ce 	bl	80034c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112c:	f000 fc82 	bl	8001a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001130:	f000 fffc 	bl	800212c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001134:	f000 fce6 	bl	8001b04 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001138:	f000 fd36 	bl	8001ba8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800113c:	f000 fd62 	bl	8001c04 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001140:	f000 fd8e 	bl	8001c60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001144:	f000 fe34 	bl	8001db0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001148:	f000 fe86 	bl	8001e58 <MX_TIM3_Init>
  MX_TIM9_Init();
 800114c:	f000 fed8 	bl	8001f00 <MX_TIM9_Init>
  MX_TIM10_Init();
 8001150:	f000 ff26 	bl	8001fa0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001154:	f000 ff72 	bl	800203c <MX_TIM11_Init>
  MX_USART1_UART_Init();
 8001158:	f000 ffbe 	bl	80020d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800115c:	2100      	movs	r1, #0
 800115e:	4897      	ldr	r0, [pc, #604]	@ (80013bc <main+0x29c>)
 8001160:	f005 fb02 	bl	8006768 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001164:	2104      	movs	r1, #4
 8001166:	4895      	ldr	r0, [pc, #596]	@ (80013bc <main+0x29c>)
 8001168:	f006 f840 	bl	80071ec <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800116c:	2108      	movs	r1, #8
 800116e:	4893      	ldr	r0, [pc, #588]	@ (80013bc <main+0x29c>)
 8001170:	f006 f83c 	bl	80071ec <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001174:	210c      	movs	r1, #12
 8001176:	4891      	ldr	r0, [pc, #580]	@ (80013bc <main+0x29c>)
 8001178:	f005 faf6 	bl	8006768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800117c:	2100      	movs	r1, #0
 800117e:	4890      	ldr	r0, [pc, #576]	@ (80013c0 <main+0x2a0>)
 8001180:	f005 faf2 	bl	8006768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8001184:	2104      	movs	r1, #4
 8001186:	488e      	ldr	r0, [pc, #568]	@ (80013c0 <main+0x2a0>)
 8001188:	f005 faee 	bl	8006768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800118c:	2100      	movs	r1, #0
 800118e:	488d      	ldr	r0, [pc, #564]	@ (80013c4 <main+0x2a4>)
 8001190:	f005 faea 	bl	8006768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001194:	2100      	movs	r1, #0
 8001196:	488c      	ldr	r0, [pc, #560]	@ (80013c8 <main+0x2a8>)
 8001198:	f005 fae6 	bl	8006768 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800119c:	213c      	movs	r1, #60	@ 0x3c
 800119e:	488b      	ldr	r0, [pc, #556]	@ (80013cc <main+0x2ac>)
 80011a0:	f005 fc9c 	bl	8006adc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80011a4:	213c      	movs	r1, #60	@ 0x3c
 80011a6:	488a      	ldr	r0, [pc, #552]	@ (80013d0 <main+0x2b0>)
 80011a8:	f005 fc98 	bl	8006adc <HAL_TIM_Encoder_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // Force TF_Luna into I2C mode
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b2:	4888      	ldr	r0, [pc, #544]	@ (80013d4 <main+0x2b4>)
 80011b4:	f002 ffb8 	bl	8004128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);  // Drive IMU RESET PIN high
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011be:	4885      	ldr	r0, [pc, #532]	@ (80013d4 <main+0x2b4>)
 80011c0:	f002 ffb2 	bl	8004128 <HAL_GPIO_WritePin>
  HAL_Delay(100);  // Optional but useful
 80011c4:	2064      	movs	r0, #100	@ 0x64
 80011c6:	f002 f9f1 	bl	80035ac <HAL_Delay>
  dwt_init();            // For accurate microsecond delay
 80011ca:	f7ff ff23 	bl	8001014 <dwt_init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);  // Initialize servo pin low
 80011ce:	2200      	movs	r2, #0
 80011d0:	2140      	movs	r1, #64	@ 0x40
 80011d2:	4881      	ldr	r0, [pc, #516]	@ (80013d8 <main+0x2b8>)
 80011d4:	f002 ffa8 	bl	8004128 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80011d8:	2064      	movs	r0, #100	@ 0x64
 80011da:	f002 f9e7 	bl	80035ac <HAL_Delay>

  // LUNA LIDAR I2C Check
  if (HAL_I2C_IsDeviceReady(&hi2c2, 0x10 << 1, 3, 100) == HAL_OK) {
 80011de:	2364      	movs	r3, #100	@ 0x64
 80011e0:	2203      	movs	r2, #3
 80011e2:	2120      	movs	r1, #32
 80011e4:	487d      	ldr	r0, [pc, #500]	@ (80013dc <main+0x2bc>)
 80011e6:	f003 ff59 	bl	800509c <HAL_I2C_IsDeviceReady>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <main+0xe0>
      HAL_UART_Transmit(&huart1, (uint8_t*)"TF-Luna ready!\r\n", 17, HAL_MAX_DELAY);
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	2211      	movs	r2, #17
 80011f6:	497a      	ldr	r1, [pc, #488]	@ (80013e0 <main+0x2c0>)
 80011f8:	487a      	ldr	r0, [pc, #488]	@ (80013e4 <main+0x2c4>)
 80011fa:	f006 f9d8 	bl	80075ae <HAL_UART_Transmit>
 80011fe:	e006      	b.n	800120e <main+0xee>
  } else {
      HAL_UART_Transmit(&huart1, (uint8_t*)"TF-Luna NOT responding\r\n", 25, HAL_MAX_DELAY);
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	2219      	movs	r2, #25
 8001206:	4978      	ldr	r1, [pc, #480]	@ (80013e8 <main+0x2c8>)
 8001208:	4876      	ldr	r0, [pc, #472]	@ (80013e4 <main+0x2c4>)
 800120a:	f006 f9d0 	bl	80075ae <HAL_UART_Transmit>
  }

  // BNO055 IMU I2C Check
  // #define BNO055_ADDR (0x29 << 1)  // 7-bit address shifted for STM32 HAL

  if (HAL_I2C_IsDeviceReady(&hi2c1, BNO055_ADDR, 3, 100) == HAL_OK) {
 800120e:	2364      	movs	r3, #100	@ 0x64
 8001210:	2203      	movs	r2, #3
 8001212:	2150      	movs	r1, #80	@ 0x50
 8001214:	4875      	ldr	r0, [pc, #468]	@ (80013ec <main+0x2cc>)
 8001216:	f003 ff41 	bl	800509c <HAL_I2C_IsDeviceReady>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <main+0x110>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"BNO055 ready!\r\n", 16, HAL_MAX_DELAY);
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	2210      	movs	r2, #16
 8001226:	4972      	ldr	r1, [pc, #456]	@ (80013f0 <main+0x2d0>)
 8001228:	486e      	ldr	r0, [pc, #440]	@ (80013e4 <main+0x2c4>)
 800122a:	f006 f9c0 	bl	80075ae <HAL_UART_Transmit>
 800122e:	e006      	b.n	800123e <main+0x11e>
  } else {
   	  HAL_UART_Transmit(&huart1, (uint8_t*)"BNO055 NOT responding\r\n", 25, HAL_MAX_DELAY);
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	2219      	movs	r2, #25
 8001236:	496f      	ldr	r1, [pc, #444]	@ (80013f4 <main+0x2d4>)
 8001238:	486a      	ldr	r0, [pc, #424]	@ (80013e4 <main+0x2c4>)
 800123a:	f006 f9b8 	bl	80075ae <HAL_UART_Transmit>
  }

  // IMU Init
  BNO055_Init(&hi2c1);
 800123e:	486b      	ldr	r0, [pc, #428]	@ (80013ec <main+0x2cc>)
 8001240:	f7ff fe50 	bl	8000ee4 <BNO055_Init>

  //uint8_t sys, gyr, acc, mag;
  //BNO055_GetCalibStatus(&sys, &gyr, &acc, &mag);
  //int len = sprintf(msg_main, "Calib SYS:%d GYR:%d ACC:%d MAG:%d\r\n", sys, gyr, acc, mag);
  //HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
  HAL_Delay(100);
 8001244:	2064      	movs	r0, #100	@ 0x64
 8001246:	f002 f9b1 	bl	80035ac <HAL_Delay>
  int len = sprintf(msg_main, "Ping Pong Bot Starting...\r\n");
 800124a:	496b      	ldr	r1, [pc, #428]	@ (80013f8 <main+0x2d8>)
 800124c:	486b      	ldr	r0, [pc, #428]	@ (80013fc <main+0x2dc>)
 800124e:	f007 ff67 	bl	8009120 <siprintf>
 8001252:	6438      	str	r0, [r7, #64]	@ 0x40
  HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
 8001254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001256:	b29a      	uxth	r2, r3
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	4967      	ldr	r1, [pc, #412]	@ (80013fc <main+0x2dc>)
 800125e:	4861      	ldr	r0, [pc, #388]	@ (80013e4 <main+0x2c4>)
 8001260:	f006 f9a5 	bl	80075ae <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, &rx_buffer[rx_index], 1);
 8001264:	4b66      	ldr	r3, [pc, #408]	@ (8001400 <main+0x2e0>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b66      	ldr	r3, [pc, #408]	@ (8001404 <main+0x2e4>)
 800126c:	4413      	add	r3, r2
 800126e:	2201      	movs	r2, #1
 8001270:	4619      	mov	r1, r3
 8001272:	485c      	ldr	r0, [pc, #368]	@ (80013e4 <main+0x2c4>)
 8001274:	f006 fa26 	bl	80076c4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int32_t turret1_enc_last = -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int16_t turret2_enc_last = -1;
 800127e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001282:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  uint8_t printed = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  float heading, roll, pitch;
  int32_t imu_head_deg10 = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  int32_t imu_roll_deg10 = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_Delay(1000);
 8001294:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001298:	f002 f988 	bl	80035ac <HAL_Delay>
		//HAL_I2C_Mem_Write(&hi2c1, (0x29 << 1), 0x3D, I2C_MEMADD_SIZE_8BIT, &mode, 1, 10);
		//BNO055_ReadEuler(&heading,&roll,&pitch);
		//imu_head_deg10 = (int32_t)(heading*10.0f);
		//imu_roll_deg10 = (int32_t)(roll*10.0f);
		//HAL_Delay(20);
	    if (imu_mode) {
 800129c:	4b5a      	ldr	r3, [pc, #360]	@ (8001408 <main+0x2e8>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d034      	beq.n	8001310 <main+0x1f0>
	        //float heading, roll, pitch;
	        //BNO055_ReadEuler(&heading, &roll, &pitch);

	        //int len = sprintf(msg_main, "H: %.1f R: %.1f P: %.1f\r\n", heading / 16.0f, roll / 16.0f, pitch / 16.0f);
	        int len = sprintf(msg_main, "H: %.1f R: %.1f P: %.1f\r\n", heading, roll, pitch);
 80012a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012a8:	f7ff f956 	bl	8000558 <__aeabi_f2d>
 80012ac:	4680      	mov	r8, r0
 80012ae:	4689      	mov	r9, r1
 80012b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012b2:	f7ff f951 	bl	8000558 <__aeabi_f2d>
 80012b6:	4604      	mov	r4, r0
 80012b8:	460d      	mov	r5, r1
 80012ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012bc:	f7ff f94c 	bl	8000558 <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012c8:	e9cd 4500 	strd	r4, r5, [sp]
 80012cc:	4642      	mov	r2, r8
 80012ce:	464b      	mov	r3, r9
 80012d0:	494e      	ldr	r1, [pc, #312]	@ (800140c <main+0x2ec>)
 80012d2:	484a      	ldr	r0, [pc, #296]	@ (80013fc <main+0x2dc>)
 80012d4:	f007 ff24 	bl	8009120 <siprintf>
 80012d8:	62b8      	str	r0, [r7, #40]	@ 0x28
	    	HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
 80012da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	4946      	ldr	r1, [pc, #280]	@ (80013fc <main+0x2dc>)
 80012e4:	483f      	ldr	r0, [pc, #252]	@ (80013e4 <main+0x2c4>)
 80012e6:	f006 f962 	bl	80075ae <HAL_UART_Transmit>
	        len = sprintf(msg_main, "H: %d R: %d\r\n",imu_head_deg10,imu_roll_deg10);
 80012ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012ee:	4948      	ldr	r1, [pc, #288]	@ (8001410 <main+0x2f0>)
 80012f0:	4842      	ldr	r0, [pc, #264]	@ (80013fc <main+0x2dc>)
 80012f2:	f007 ff15 	bl	8009120 <siprintf>
 80012f6:	62b8      	str	r0, [r7, #40]	@ 0x28
	    	HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
 80012f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001300:	493e      	ldr	r1, [pc, #248]	@ (80013fc <main+0x2dc>)
 8001302:	4838      	ldr	r0, [pc, #224]	@ (80013e4 <main+0x2c4>)
 8001304:	f006 f953 	bl	80075ae <HAL_UART_Transmit>

	        HAL_Delay(500);  // Limit update rate
 8001308:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800130c:	f002 f94e 	bl	80035ac <HAL_Delay>
	    }

	  // ENCODERS
	  turret1_enc_count = __HAL_TIM_GET_COUNTER(&htim2);
 8001310:	4b2e      	ldr	r3, [pc, #184]	@ (80013cc <main+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001316:	461a      	mov	r2, r3
 8001318:	4b3e      	ldr	r3, [pc, #248]	@ (8001414 <main+0x2f4>)
 800131a:	601a      	str	r2, [r3, #0]
	  if (turret1_enc_count != turret1_enc_last) {
 800131c:	4b3d      	ldr	r3, [pc, #244]	@ (8001414 <main+0x2f4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001322:	429a      	cmp	r2, r3
 8001324:	d010      	beq.n	8001348 <main+0x228>
	      turret1_enc_deg = (7200 * turret1_enc_count) / (3200*10); // 7200 = 360.0 deg × 20 (tenths)
 8001326:	4b3b      	ldr	r3, [pc, #236]	@ (8001414 <main+0x2f4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	4a39      	ldr	r2, [pc, #228]	@ (8001418 <main+0x2f8>)
 8001334:	fb82 1203 	smull	r1, r2, r2, r3
 8001338:	12d2      	asrs	r2, r2, #11
 800133a:	17db      	asrs	r3, r3, #31
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a37      	ldr	r2, [pc, #220]	@ (800141c <main+0x2fc>)
 8001340:	6013      	str	r3, [r2, #0]
 	      turret1_enc_last = turret1_enc_count;
 8001342:	4b34      	ldr	r3, [pc, #208]	@ (8001414 <main+0x2f4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  }
	  int16_t turret2_enc_now = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 8001348:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <main+0x2b0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  int16_t delta = turret2_enc_now - turret2_enc_last;
 8001350:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001352:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	b29b      	uxth	r3, r3
 800135a:	84bb      	strh	r3, [r7, #36]	@ 0x24
      turret2_enc_last = turret2_enc_now;
 800135c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800135e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      turret2_enc_pos += delta;
 8001362:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001366:	4b2e      	ldr	r3, [pc, #184]	@ (8001420 <main+0x300>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a2c      	ldr	r2, [pc, #176]	@ (8001420 <main+0x300>)
 800136e:	6013      	str	r3, [r2, #0]
      turret2_enc_deg = (7200 * turret2_enc_pos) / (3200*10); // degrees × 10
 8001370:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <main+0x300>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	4a26      	ldr	r2, [pc, #152]	@ (8001418 <main+0x2f8>)
 800137e:	fb82 1203 	smull	r1, r2, r2, r3
 8001382:	12d2      	asrs	r2, r2, #11
 8001384:	17db      	asrs	r3, r3, #31
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	4a26      	ldr	r2, [pc, #152]	@ (8001424 <main+0x304>)
 800138a:	6013      	str	r3, [r2, #0]
      //turret1_enc_deg = imu_roll_deg10;
      // SOFTWARE PWM
      servo_pwm_update();
 800138c:	f7ff fe5c 	bl	8001048 <servo_pwm_update>
      // FINITE-STATE-MACHINE
      switch(current_state)
 8001390:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <main+0x308>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b06      	cmp	r3, #6
 8001396:	d881      	bhi.n	800129c <main+0x17c>
 8001398:	a201      	add	r2, pc, #4	@ (adr r2, 80013a0 <main+0x280>)
 800139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139e:	bf00      	nop
 80013a0:	0800142d 	.word	0x0800142d
 80013a4:	080014d9 	.word	0x080014d9
 80013a8:	08001505 	.word	0x08001505
 80013ac:	080015b1 	.word	0x080015b1
 80013b0:	0800170d 	.word	0x0800170d
 80013b4:	08001751 	.word	0x08001751
 80013b8:	080017f7 	.word	0x080017f7
 80013bc:	20000344 	.word	0x20000344
 80013c0:	2000041c 	.word	0x2000041c
 80013c4:	20000464 	.word	0x20000464
 80013c8:	200004ac 	.word	0x200004ac
 80013cc:	2000038c 	.word	0x2000038c
 80013d0:	200003d4 	.word	0x200003d4
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020000 	.word	0x40020000
 80013dc:	200002f0 	.word	0x200002f0
 80013e0:	0800b490 	.word	0x0800b490
 80013e4:	200004f4 	.word	0x200004f4
 80013e8:	0800b4a4 	.word	0x0800b4a4
 80013ec:	2000029c 	.word	0x2000029c
 80013f0:	0800b4c0 	.word	0x0800b4c0
 80013f4:	0800b4d0 	.word	0x0800b4d0
 80013f8:	0800b4e8 	.word	0x0800b4e8
 80013fc:	20000654 	.word	0x20000654
 8001400:	20000613 	.word	0x20000613
 8001404:	2000060c 	.word	0x2000060c
 8001408:	2000024c 	.word	0x2000024c
 800140c:	0800b504 	.word	0x0800b504
 8001410:	0800b520 	.word	0x0800b520
 8001414:	20000544 	.word	0x20000544
 8001418:	10624dd3 	.word	0x10624dd3
 800141c:	20000548 	.word	0x20000548
 8001420:	20000550 	.word	0x20000550
 8001424:	20000554 	.word	0x20000554
 8001428:	2000055c 	.word	0x2000055c
      {
      	  //int len;
      	  case STATE_0: // Initialize
      		  turret1_target = -150;
 800142c:	4b89      	ldr	r3, [pc, #548]	@ (8001654 <main+0x534>)
 800142e:	f06f 0295 	mvn.w	r2, #149	@ 0x95
 8001432:	601a      	str	r2, [r3, #0]
      		  turret2_target = 30;
 8001434:	4b88      	ldr	r3, [pc, #544]	@ (8001658 <main+0x538>)
 8001436:	221e      	movs	r2, #30
 8001438:	601a      	str	r2, [r3, #0]
				if (turret_move_start == 0) {
 800143a:	4b88      	ldr	r3, [pc, #544]	@ (800165c <main+0x53c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d104      	bne.n	800144c <main+0x32c>
					turret_move_start = HAL_GetTick();
 8001442:	f002 f8a7 	bl	8003594 <HAL_GetTick>
 8001446:	4603      	mov	r3, r0
 8001448:	4a84      	ldr	r2, [pc, #528]	@ (800165c <main+0x53c>)
 800144a:	6013      	str	r3, [r2, #0]
				}
      		  //turret1_target = 0;
      		  //turret2_target = 0;
      		  move_to(&turret1, turret1_target, turret1_enc_deg);
 800144c:	4b81      	ldr	r3, [pc, #516]	@ (8001654 <main+0x534>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a83      	ldr	r2, [pc, #524]	@ (8001660 <main+0x540>)
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	4883      	ldr	r0, [pc, #524]	@ (8001664 <main+0x544>)
 8001458:	f001 fb4c 	bl	8002af4 <move_to>
      		  move_to(&turret2, turret2_target, turret2_enc_deg);
 800145c:	4b7e      	ldr	r3, [pc, #504]	@ (8001658 <main+0x538>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a81      	ldr	r2, [pc, #516]	@ (8001668 <main+0x548>)
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	4881      	ldr	r0, [pc, #516]	@ (800166c <main+0x54c>)
 8001468:	f001 fb44 	bl	8002af4 <move_to>
      		  //if (HAL_GetTick() - turret_move_start >= 2000)
      		  if (abs(turret1_target - turret1_enc_deg) < 5 && abs(turret2_target - turret2_enc_deg) < 5)
 800146c:	4b79      	ldr	r3, [pc, #484]	@ (8001654 <main+0x534>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b7b      	ldr	r3, [pc, #492]	@ (8001660 <main+0x540>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f113 0f04 	cmn.w	r3, #4
 800147a:	f2c0 82be 	blt.w	80019fa <main+0x8da>
 800147e:	4b75      	ldr	r3, [pc, #468]	@ (8001654 <main+0x534>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b77      	ldr	r3, [pc, #476]	@ (8001660 <main+0x540>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b04      	cmp	r3, #4
 800148a:	f300 82b6 	bgt.w	80019fa <main+0x8da>
 800148e:	4b72      	ldr	r3, [pc, #456]	@ (8001658 <main+0x538>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b75      	ldr	r3, [pc, #468]	@ (8001668 <main+0x548>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f113 0f04 	cmn.w	r3, #4
 800149c:	f2c0 82ad 	blt.w	80019fa <main+0x8da>
 80014a0:	4b6d      	ldr	r3, [pc, #436]	@ (8001658 <main+0x538>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b70      	ldr	r3, [pc, #448]	@ (8001668 <main+0x548>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	f300 82a5 	bgt.w	80019fa <main+0x8da>
      		  {
      		      turret_move_start = 0;
 80014b0:	4b6a      	ldr	r3, [pc, #424]	@ (800165c <main+0x53c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
      		      //enable(&turret2);
      			  current_state = STATE_1;
 80014b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001670 <main+0x550>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
      		      int len = sprintf(msg_main, "Motors Initialized\r\n");
 80014bc:	496d      	ldr	r1, [pc, #436]	@ (8001674 <main+0x554>)
 80014be:	486e      	ldr	r0, [pc, #440]	@ (8001678 <main+0x558>)
 80014c0:	f007 fe2e 	bl	8009120 <siprintf>
 80014c4:	60b8      	str	r0, [r7, #8]
    	          HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	496a      	ldr	r1, [pc, #424]	@ (8001678 <main+0x558>)
 80014d0:	486a      	ldr	r0, [pc, #424]	@ (800167c <main+0x55c>)
 80014d2:	f006 f86c 	bl	80075ae <HAL_UART_Transmit>
      		  }
      		  break;
 80014d6:	e290      	b.n	80019fa <main+0x8da>
      	  case STATE_1: // Hub
      		  if (!printed) {
 80014d8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f040 828e 	bne.w	80019fe <main+0x8de>
      			  int len = sprintf(msg_main, "Waiting Command...\r\n");
 80014e2:	4967      	ldr	r1, [pc, #412]	@ (8001680 <main+0x560>)
 80014e4:	4864      	ldr	r0, [pc, #400]	@ (8001678 <main+0x558>)
 80014e6:	f007 fe1b 	bl	8009120 <siprintf>
 80014ea:	60f8      	str	r0, [r7, #12]
    	          HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	4960      	ldr	r1, [pc, #384]	@ (8001678 <main+0x558>)
 80014f6:	4861      	ldr	r0, [pc, #388]	@ (800167c <main+0x55c>)
 80014f8:	f006 f859 	bl	80075ae <HAL_UART_Transmit>
      			  printed = 1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
      		  }
      		  break;
 8001502:	e27c      	b.n	80019fe <main+0x8de>
			case STATE_2: // Move turret
			{
				// Start timing on first entry into this state
				if (turret_move_start == 0) {
 8001504:	4b55      	ldr	r3, [pc, #340]	@ (800165c <main+0x53c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d104      	bne.n	8001516 <main+0x3f6>
					turret_move_start = HAL_GetTick();
 800150c:	f002 f842 	bl	8003594 <HAL_GetTick>
 8001510:	4603      	mov	r3, r0
 8001512:	4a52      	ldr	r2, [pc, #328]	@ (800165c <main+0x53c>)
 8001514:	6013      	str	r3, [r2, #0]
				}
					move_to(&turret1, turret1_target, turret1_enc_deg);
 8001516:	4b4f      	ldr	r3, [pc, #316]	@ (8001654 <main+0x534>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a51      	ldr	r2, [pc, #324]	@ (8001660 <main+0x540>)
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	4619      	mov	r1, r3
 8001520:	4850      	ldr	r0, [pc, #320]	@ (8001664 <main+0x544>)
 8001522:	f001 fae7 	bl	8002af4 <move_to>
					move_to(&turret2, turret2_target, turret2_enc_deg);
 8001526:	4b4c      	ldr	r3, [pc, #304]	@ (8001658 <main+0x538>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a4f      	ldr	r2, [pc, #316]	@ (8001668 <main+0x548>)
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	484e      	ldr	r0, [pc, #312]	@ (800166c <main+0x54c>)
 8001532:	f001 fadf 	bl	8002af4 <move_to>

					// Wait 1 second before considering the move "complete"
					if (abs(turret1_target - turret1_enc_deg) < 5 && abs(turret2_target - turret2_enc_deg) < 5){
 8001536:	4b47      	ldr	r3, [pc, #284]	@ (8001654 <main+0x534>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b49      	ldr	r3, [pc, #292]	@ (8001660 <main+0x540>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f113 0f04 	cmn.w	r3, #4
 8001544:	f2c0 825d 	blt.w	8001a02 <main+0x8e2>
 8001548:	4b42      	ldr	r3, [pc, #264]	@ (8001654 <main+0x534>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b44      	ldr	r3, [pc, #272]	@ (8001660 <main+0x540>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b04      	cmp	r3, #4
 8001554:	f300 8255 	bgt.w	8001a02 <main+0x8e2>
 8001558:	4b3f      	ldr	r3, [pc, #252]	@ (8001658 <main+0x538>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b42      	ldr	r3, [pc, #264]	@ (8001668 <main+0x548>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f113 0f04 	cmn.w	r3, #4
 8001566:	f2c0 824c 	blt.w	8001a02 <main+0x8e2>
 800156a:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <main+0x538>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b3e      	ldr	r3, [pc, #248]	@ (8001668 <main+0x548>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b04      	cmp	r3, #4
 8001576:	f300 8244 	bgt.w	8001a02 <main+0x8e2>
					//if (HAL_GetTick() - turret_move_start >= 1000) {
						turret_move_start = 0;  // Reset for next use
 800157a:	4b38      	ldr	r3, [pc, #224]	@ (800165c <main+0x53c>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
						enable(&turret1);
 8001580:	4838      	ldr	r0, [pc, #224]	@ (8001664 <main+0x544>)
 8001582:	f001 fafd 	bl	8002b80 <enable>
						enable(&turret2);
 8001586:	4839      	ldr	r0, [pc, #228]	@ (800166c <main+0x54c>)
 8001588:	f001 fafa 	bl	8002b80 <enable>
						//int len = sprintf(msg_main, "Turret Move Timed Out\r\n");
						//HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
						if (auto_mode == 0){
 800158c:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <main+0x564>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d106      	bne.n	80015a2 <main+0x482>
							current_state = STATE_1;
 8001594:	4b36      	ldr	r3, [pc, #216]	@ (8001670 <main+0x550>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
							printed = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
							auto_mot = 1;
							current_state = STATE_6;
						}
					}
			}
			break;
 80015a0:	e22f      	b.n	8001a02 <main+0x8e2>
							auto_mot = 1;
 80015a2:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <main+0x568>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
							current_state = STATE_6;
 80015a8:	4b31      	ldr	r3, [pc, #196]	@ (8001670 <main+0x550>)
 80015aa:	2206      	movs	r2, #6
 80015ac:	701a      	strb	r2, [r3, #0]
			break;
 80015ae:	e228      	b.n	8001a02 <main+0x8e2>
      	  case STATE_3: // Lidar
      	  {
      		  uint8_t reg = 0x00;
 80015b0:	2300      	movs	r3, #0
 80015b2:	71fb      	strb	r3, [r7, #7]
      	      uint16_t dist = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      	      uint16_t amp = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      	      if (HAL_I2C_Master_Transmit(&hi2c2, 0x10 << 1, &reg, 1, 10) == HAL_OK &&
 80015c0:	1dfa      	adds	r2, r7, #7
 80015c2:	230a      	movs	r3, #10
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2301      	movs	r3, #1
 80015c8:	2120      	movs	r1, #32
 80015ca:	4830      	ldr	r0, [pc, #192]	@ (800168c <main+0x56c>)
 80015cc:	f002 ff0a 	bl	80043e4 <HAL_I2C_Master_Transmit>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d122      	bne.n	800161c <main+0x4fc>
      	      	  HAL_I2C_Master_Receive(&hi2c2, 0x10 << 1, lidar_buf, 4, 10) == HAL_OK) {
 80015d6:	230a      	movs	r3, #10
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2304      	movs	r3, #4
 80015dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001690 <main+0x570>)
 80015de:	2120      	movs	r1, #32
 80015e0:	482a      	ldr	r0, [pc, #168]	@ (800168c <main+0x56c>)
 80015e2:	f002 fffd 	bl	80045e0 <HAL_I2C_Master_Receive>
 80015e6:	4603      	mov	r3, r0
      	      if (HAL_I2C_Master_Transmit(&hi2c2, 0x10 << 1, &reg, 1, 10) == HAL_OK &&
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d117      	bne.n	800161c <main+0x4fc>
      	      	  dist = lidar_buf[0] | (lidar_buf[1] << 8);
 80015ec:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <main+0x570>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <main+0x570>)
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b21b      	sxth	r3, r3
 8001600:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      	      	  amp  = lidar_buf[2] | (lidar_buf[3] << 8);
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <main+0x570>)
 8001606:	789b      	ldrb	r3, [r3, #2]
 8001608:	b21a      	sxth	r2, r3
 800160a:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <main+0x570>)
 800160c:	78db      	ldrb	r3, [r3, #3]
 800160e:	b21b      	sxth	r3, r3
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21b      	sxth	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b21b      	sxth	r3, r3
 8001618:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      	      } else {

      	      }
	          if (auto_mode == 0){
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <main+0x564>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d139      	bne.n	8001698 <main+0x578>
	      	      int len = sprintf(msg_main, "Dist: %d cm, Amp: %d\r\n", dist, amp);
 8001624:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001628:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800162c:	4919      	ldr	r1, [pc, #100]	@ (8001694 <main+0x574>)
 800162e:	4812      	ldr	r0, [pc, #72]	@ (8001678 <main+0x558>)
 8001630:	f007 fd76 	bl	8009120 <siprintf>
 8001634:	6138      	str	r0, [r7, #16]
		          HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	b29a      	uxth	r2, r3
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	490e      	ldr	r1, [pc, #56]	@ (8001678 <main+0x558>)
 8001640:	480e      	ldr	r0, [pc, #56]	@ (800167c <main+0x55c>)
 8001642:	f005 ffb4 	bl	80075ae <HAL_UART_Transmit>
		          current_state = STATE_1;
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <main+0x550>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
		          printed = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
		          }
		          current_state = STATE_6;
		          auto_lidar = 1;
	          }
      	  }
	      break;
 8001652:	e1dc      	b.n	8001a0e <main+0x8ee>
 8001654:	2000054c 	.word	0x2000054c
 8001658:	20000558 	.word	0x20000558
 800165c:	20000564 	.word	0x20000564
 8001660:	20000548 	.word	0x20000548
 8001664:	2000001c 	.word	0x2000001c
 8001668:	20000554 	.word	0x20000554
 800166c:	20000038 	.word	0x20000038
 8001670:	2000055c 	.word	0x2000055c
 8001674:	0800b530 	.word	0x0800b530
 8001678:	20000654 	.word	0x20000654
 800167c:	200004f4 	.word	0x200004f4
 8001680:	0800b548 	.word	0x0800b548
 8001684:	2000055d 	.word	0x2000055d
 8001688:	2000055e 	.word	0x2000055e
 800168c:	200002f0 	.word	0x200002f0
 8001690:	20000250 	.word	0x20000250
 8001694:	0800b560 	.word	0x0800b560
	      	      int len = sprintf(msg_main, "Auto Dist: %d cm, Amp: %d\r\n", dist, amp);
 8001698:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800169c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80016a0:	499e      	ldr	r1, [pc, #632]	@ (800191c <main+0x7fc>)
 80016a2:	489f      	ldr	r0, [pc, #636]	@ (8001920 <main+0x800>)
 80016a4:	f007 fd3c 	bl	8009120 <siprintf>
 80016a8:	6178      	str	r0, [r7, #20]
		          HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	499b      	ldr	r1, [pc, #620]	@ (8001920 <main+0x800>)
 80016b4:	489b      	ldr	r0, [pc, #620]	@ (8001924 <main+0x804>)
 80016b6:	f005 ff7a 	bl	80075ae <HAL_UART_Transmit>
		          scan_dist[scan_index] = dist;
 80016ba:	4b9b      	ldr	r3, [pc, #620]	@ (8001928 <main+0x808>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	4619      	mov	r1, r3
 80016c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80016c4:	4a99      	ldr	r2, [pc, #612]	@ (800192c <main+0x80c>)
 80016c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		          scan_amp[scan_index] = amp;
 80016ca:	4b97      	ldr	r3, [pc, #604]	@ (8001928 <main+0x808>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80016d4:	4a96      	ldr	r2, [pc, #600]	@ (8001930 <main+0x810>)
 80016d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		          if (dist < min_scan_dist && amp > 100) {
 80016da:	4b96      	ldr	r3, [pc, #600]	@ (8001934 <main+0x814>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d20b      	bcs.n	80016fe <main+0x5de>
 80016e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80016ea:	2b64      	cmp	r3, #100	@ 0x64
 80016ec:	d907      	bls.n	80016fe <main+0x5de>
		              min_scan_dist = dist;
 80016ee:	4a91      	ldr	r2, [pc, #580]	@ (8001934 <main+0x814>)
 80016f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80016f4:	8013      	strh	r3, [r2, #0]
		              min_scan_index = scan_index;
 80016f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001928 <main+0x808>)
 80016f8:	881a      	ldrh	r2, [r3, #0]
 80016fa:	4b8f      	ldr	r3, [pc, #572]	@ (8001938 <main+0x818>)
 80016fc:	801a      	strh	r2, [r3, #0]
		          current_state = STATE_6;
 80016fe:	4b8f      	ldr	r3, [pc, #572]	@ (800193c <main+0x81c>)
 8001700:	2206      	movs	r2, #6
 8001702:	701a      	strb	r2, [r3, #0]
		          auto_lidar = 1;
 8001704:	4b8e      	ldr	r3, [pc, #568]	@ (8001940 <main+0x820>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
	      break;
 800170a:	e180      	b.n	8001a0e <main+0x8ee>
      	  case STATE_4: // Flywheels
      	  {
      		  set_duty(&flywheel1, duty_flywheel1);
 800170c:	4b8d      	ldr	r3, [pc, #564]	@ (8001944 <main+0x824>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	488d      	ldr	r0, [pc, #564]	@ (8001948 <main+0x828>)
 8001714:	f001 f896 	bl	8002844 <set_duty>
	          int len = sprintf(msg_main, "Flywheel Speed Set\r\n");
 8001718:	498c      	ldr	r1, [pc, #560]	@ (800194c <main+0x82c>)
 800171a:	4881      	ldr	r0, [pc, #516]	@ (8001920 <main+0x800>)
 800171c:	f007 fd00 	bl	8009120 <siprintf>
 8001720:	61b8      	str	r0, [r7, #24]
	          HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	b29a      	uxth	r2, r3
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	497d      	ldr	r1, [pc, #500]	@ (8001920 <main+0x800>)
 800172c:	487d      	ldr	r0, [pc, #500]	@ (8001924 <main+0x804>)
 800172e:	f005 ff3e 	bl	80075ae <HAL_UART_Transmit>
      		  if (auto_mode == 0){
 8001732:	4b87      	ldr	r3, [pc, #540]	@ (8001950 <main+0x830>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <main+0x628>
      			  current_state = STATE_1;
 800173a:	4b80      	ldr	r3, [pc, #512]	@ (800193c <main+0x81c>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
      			  printed = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
      		  }
      		  else {
      			  current_state = STATE_6;
      		  }
      	  }
          break;
 8001746:	e162      	b.n	8001a0e <main+0x8ee>
      			  current_state = STATE_6;
 8001748:	4b7c      	ldr	r3, [pc, #496]	@ (800193c <main+0x81c>)
 800174a:	2206      	movs	r2, #6
 800174c:	701a      	strb	r2, [r3, #0]
          break;
 800174e:	e15e      	b.n	8001a0e <main+0x8ee>
      	  case STATE_5: // launch
      	  {
      	    //int len = sprintf(msg_main, "Servo state: %d\r\n", servo_step);
      	    //HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
      	    switch (servo_step) {
 8001750:	4b80      	ldr	r3, [pc, #512]	@ (8001954 <main+0x834>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d029      	beq.n	80017ac <main+0x68c>
 8001758:	2b02      	cmp	r3, #2
 800175a:	f300 8154 	bgt.w	8001a06 <main+0x8e6>
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <main+0x648>
 8001762:	2b01      	cmp	r3, #1
 8001764:	d00d      	beq.n	8001782 <main+0x662>
      	                }
      	            }
      	            break;
      	    }
      	}
      	break;
 8001766:	e14e      	b.n	8001a06 <main+0x8e6>
      	            servo_angle = 320;  // move back
 8001768:	4b7b      	ldr	r3, [pc, #492]	@ (8001958 <main+0x838>)
 800176a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800176e:	801a      	strh	r2, [r3, #0]
      	            servo_step_time = HAL_GetTick();
 8001770:	f001 ff10 	bl	8003594 <HAL_GetTick>
 8001774:	4603      	mov	r3, r0
 8001776:	4a79      	ldr	r2, [pc, #484]	@ (800195c <main+0x83c>)
 8001778:	6013      	str	r3, [r2, #0]
      	            servo_step = 1;
 800177a:	4b76      	ldr	r3, [pc, #472]	@ (8001954 <main+0x834>)
 800177c:	2201      	movs	r2, #1
 800177e:	801a      	strh	r2, [r3, #0]
      	            break;
 8001780:	e038      	b.n	80017f4 <main+0x6d4>
      	            if (HAL_GetTick() - servo_step_time >= 300) {
 8001782:	f001 ff07 	bl	8003594 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	4b74      	ldr	r3, [pc, #464]	@ (800195c <main+0x83c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001792:	d32c      	bcc.n	80017ee <main+0x6ce>
      	                servo_angle = 140;  // move forward
 8001794:	4b70      	ldr	r3, [pc, #448]	@ (8001958 <main+0x838>)
 8001796:	228c      	movs	r2, #140	@ 0x8c
 8001798:	801a      	strh	r2, [r3, #0]
      	                servo_step_time = HAL_GetTick();
 800179a:	f001 fefb 	bl	8003594 <HAL_GetTick>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a6e      	ldr	r2, [pc, #440]	@ (800195c <main+0x83c>)
 80017a2:	6013      	str	r3, [r2, #0]
      	                servo_step = 2;
 80017a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001954 <main+0x834>)
 80017a6:	2202      	movs	r2, #2
 80017a8:	801a      	strh	r2, [r3, #0]
      	            break;
 80017aa:	e020      	b.n	80017ee <main+0x6ce>
      	            if (HAL_GetTick() - servo_step_time >= 300) {
 80017ac:	f001 fef2 	bl	8003594 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b6a      	ldr	r3, [pc, #424]	@ (800195c <main+0x83c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017bc:	d319      	bcc.n	80017f2 <main+0x6d2>
      	                servo_angle = 140;  // return to center
 80017be:	4b66      	ldr	r3, [pc, #408]	@ (8001958 <main+0x838>)
 80017c0:	228c      	movs	r2, #140	@ 0x8c
 80017c2:	801a      	strh	r2, [r3, #0]
      	                if (auto_mode == 0){
 80017c4:	4b62      	ldr	r3, [pc, #392]	@ (8001950 <main+0x830>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <main+0x6c0>
      	                	current_state = STATE_1;
 80017cc:	4b5b      	ldr	r3, [pc, #364]	@ (800193c <main+0x81c>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
      	                	printed = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
      	                	servo_step = 0;
 80017d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001954 <main+0x834>)
 80017da:	2200      	movs	r2, #0
 80017dc:	801a      	strh	r2, [r3, #0]
      	            break;
 80017de:	e008      	b.n	80017f2 <main+0x6d2>
      	                	current_state = STATE_6;
 80017e0:	4b56      	ldr	r3, [pc, #344]	@ (800193c <main+0x81c>)
 80017e2:	2206      	movs	r2, #6
 80017e4:	701a      	strb	r2, [r3, #0]
      	                	servo_step = 0;  // reset step
 80017e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001954 <main+0x834>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	801a      	strh	r2, [r3, #0]
      	            break;
 80017ec:	e001      	b.n	80017f2 <main+0x6d2>
      	            break;
 80017ee:	bf00      	nop
 80017f0:	e109      	b.n	8001a06 <main+0x8e6>
      	            break;
 80017f2:	bf00      	nop
      	break;
 80017f4:	e107      	b.n	8001a06 <main+0x8e6>
      	case STATE_6: // Auto scan
      	{
      		HAL_Delay(50); // Avoid console clogging
 80017f6:	2032      	movs	r0, #50	@ 0x32
 80017f8:	f001 fed8 	bl	80035ac <HAL_Delay>
      		if (scan_index < 20){
 80017fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001928 <main+0x808>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	2b13      	cmp	r3, #19
 8001802:	d830      	bhi.n	8001866 <main+0x746>
      			if (auto_mot == 0){
 8001804:	4b56      	ldr	r3, [pc, #344]	@ (8001960 <main+0x840>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10d      	bne.n	8001828 <main+0x708>
      				turret2_target = (10*scan_index);
 800180c:	4b46      	ldr	r3, [pc, #280]	@ (8001928 <main+0x808>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	461a      	mov	r2, r3
 800181c:	4b51      	ldr	r3, [pc, #324]	@ (8001964 <main+0x844>)
 800181e:	601a      	str	r2, [r3, #0]
      				current_state = STATE_2;
 8001820:	4b46      	ldr	r3, [pc, #280]	@ (800193c <main+0x81c>)
 8001822:	2202      	movs	r2, #2
 8001824:	701a      	strb	r2, [r3, #0]
        	   	HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
        	   	scan_index = 0;
        	   	current_state = STATE_1;
      		}
        }
      	break;
 8001826:	e0f0      	b.n	8001a0a <main+0x8ea>
      			else if (auto_lidar == 0){
 8001828:	4b45      	ldr	r3, [pc, #276]	@ (8001940 <main+0x820>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d103      	bne.n	8001838 <main+0x718>
      				current_state = STATE_3;
 8001830:	4b42      	ldr	r3, [pc, #264]	@ (800193c <main+0x81c>)
 8001832:	2203      	movs	r2, #3
 8001834:	701a      	strb	r2, [r3, #0]
      	break;
 8001836:	e0e8      	b.n	8001a0a <main+0x8ea>
      			else if (auto_mot == 1 && auto_lidar == 1){
 8001838:	4b49      	ldr	r3, [pc, #292]	@ (8001960 <main+0x840>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	f040 80e4 	bne.w	8001a0a <main+0x8ea>
 8001842:	4b3f      	ldr	r3, [pc, #252]	@ (8001940 <main+0x820>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	f040 80df 	bne.w	8001a0a <main+0x8ea>
      				scan_index += 1;
 800184c:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <main+0x808>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <main+0x808>)
 8001856:	801a      	strh	r2, [r3, #0]
      				auto_mot = 0;
 8001858:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <main+0x840>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
      				auto_lidar = 0;
 800185e:	4b38      	ldr	r3, [pc, #224]	@ (8001940 <main+0x820>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
      	break;
 8001864:	e0d1      	b.n	8001a0a <main+0x8ea>
      		else if (scan_index == 20){
 8001866:	4b30      	ldr	r3, [pc, #192]	@ (8001928 <main+0x808>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	2b14      	cmp	r3, #20
 800186c:	d138      	bne.n	80018e0 <main+0x7c0>
      		    if (min_scan_dist > 450){
 800186e:	4b31      	ldr	r3, [pc, #196]	@ (8001934 <main+0x814>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001876:	d910      	bls.n	800189a <main+0x77a>
      		    	int len = sprintf(msg_main,"No object in range");
 8001878:	493b      	ldr	r1, [pc, #236]	@ (8001968 <main+0x848>)
 800187a:	4829      	ldr	r0, [pc, #164]	@ (8001920 <main+0x800>)
 800187c:	f007 fc50 	bl	8009120 <siprintf>
 8001880:	61f8      	str	r0, [r7, #28]
      		    	HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	b29a      	uxth	r2, r3
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	4925      	ldr	r1, [pc, #148]	@ (8001920 <main+0x800>)
 800188c:	4825      	ldr	r0, [pc, #148]	@ (8001924 <main+0x804>)
 800188e:	f005 fe8e 	bl	80075ae <HAL_UART_Transmit>
      		    	scan_index = 24;
 8001892:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <main+0x808>)
 8001894:	2218      	movs	r2, #24
 8001896:	801a      	strh	r2, [r3, #0]
      	break;
 8001898:	e0b7      	b.n	8001a0a <main+0x8ea>
          		    len = sprintf(msg_main, "Scan complete. Closest at index %d, dist %d cm\r\n",
 800189a:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <main+0x818>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <main+0x814>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	4931      	ldr	r1, [pc, #196]	@ (800196c <main+0x84c>)
 80018a6:	481e      	ldr	r0, [pc, #120]	@ (8001920 <main+0x800>)
 80018a8:	f007 fc3a 	bl	8009120 <siprintf>
 80018ac:	6438      	str	r0, [r7, #64]	@ 0x40
          		    HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
 80018ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	491a      	ldr	r1, [pc, #104]	@ (8001920 <main+0x800>)
 80018b8:	481a      	ldr	r0, [pc, #104]	@ (8001924 <main+0x804>)
 80018ba:	f005 fe78 	bl	80075ae <HAL_UART_Transmit>
      		    	turret2_target = (10*min_scan_index);
 80018be:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <main+0x818>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <main+0x844>)
 80018d0:	601a      	str	r2, [r3, #0]
      		    	scan_index = 21;
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <main+0x808>)
 80018d4:	2215      	movs	r2, #21
 80018d6:	801a      	strh	r2, [r3, #0]
      		    	current_state = STATE_2;
 80018d8:	4b18      	ldr	r3, [pc, #96]	@ (800193c <main+0x81c>)
 80018da:	2202      	movs	r2, #2
 80018dc:	701a      	strb	r2, [r3, #0]
      	break;
 80018de:	e094      	b.n	8001a0a <main+0x8ea>
      		else if (scan_index == 21){
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <main+0x808>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	2b15      	cmp	r3, #21
 80018e6:	d143      	bne.n	8001970 <main+0x850>
      			if (min_scan_dist < 100){
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <main+0x814>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2b63      	cmp	r3, #99	@ 0x63
 80018ee:	d803      	bhi.n	80018f8 <main+0x7d8>
      				duty_flywheel1 = 85;
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <main+0x824>)
 80018f2:	2255      	movs	r2, #85	@ 0x55
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e00a      	b.n	800190e <main+0x7ee>
      			else if (min_scan_dist < 250){
 80018f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <main+0x814>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	2bf9      	cmp	r3, #249	@ 0xf9
 80018fe:	d803      	bhi.n	8001908 <main+0x7e8>
      				duty_flywheel1 = 90;
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <main+0x824>)
 8001902:	225a      	movs	r2, #90	@ 0x5a
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	e002      	b.n	800190e <main+0x7ee>
      				duty_flywheel1 = 100;
 8001908:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <main+0x824>)
 800190a:	2264      	movs	r2, #100	@ 0x64
 800190c:	601a      	str	r2, [r3, #0]
      			current_state = STATE_4;
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <main+0x81c>)
 8001910:	2204      	movs	r2, #4
 8001912:	701a      	strb	r2, [r3, #0]
      			scan_index = 22;
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <main+0x808>)
 8001916:	2216      	movs	r2, #22
 8001918:	801a      	strh	r2, [r3, #0]
      	break;
 800191a:	e076      	b.n	8001a0a <main+0x8ea>
 800191c:	0800b578 	.word	0x0800b578
 8001920:	20000654 	.word	0x20000654
 8001924:	200004f4 	.word	0x200004f4
 8001928:	20000560 	.word	0x20000560
 800192c:	2000056c 	.word	0x2000056c
 8001930:	200005bc 	.word	0x200005bc
 8001934:	20000054 	.word	0x20000054
 8001938:	20000568 	.word	0x20000568
 800193c:	2000055c 	.word	0x2000055c
 8001940:	2000055f 	.word	0x2000055f
 8001944:	2000053c 	.word	0x2000053c
 8001948:	20000000 	.word	0x20000000
 800194c:	0800b594 	.word	0x0800b594
 8001950:	2000055d 	.word	0x2000055d
 8001954:	20000694 	.word	0x20000694
 8001958:	20000056 	.word	0x20000056
 800195c:	20000698 	.word	0x20000698
 8001960:	2000055e 	.word	0x2000055e
 8001964:	20000558 	.word	0x20000558
 8001968:	0800b5ac 	.word	0x0800b5ac
 800196c:	0800b5c0 	.word	0x0800b5c0
      		else if (scan_index == 22){
 8001970:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <main+0x8f0>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	2b16      	cmp	r3, #22
 8001976:	d106      	bne.n	8001986 <main+0x866>
      			current_state = STATE_5;
 8001978:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <main+0x8f4>)
 800197a:	2205      	movs	r2, #5
 800197c:	701a      	strb	r2, [r3, #0]
      			scan_index = 23;
 800197e:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <main+0x8f0>)
 8001980:	2217      	movs	r2, #23
 8001982:	801a      	strh	r2, [r3, #0]
      	break;
 8001984:	e041      	b.n	8001a0a <main+0x8ea>
      		else if (scan_index == 23){
 8001986:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <main+0x8f0>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	2b17      	cmp	r3, #23
 800198c:	d109      	bne.n	80019a2 <main+0x882>
      			duty_flywheel1 = 0;
 800198e:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <main+0x8f8>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
      			current_state = 4;
 8001994:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <main+0x8f4>)
 8001996:	2204      	movs	r2, #4
 8001998:	701a      	strb	r2, [r3, #0]
      			scan_index = 24;
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <main+0x8f0>)
 800199c:	2218      	movs	r2, #24
 800199e:	801a      	strh	r2, [r3, #0]
      	break;
 80019a0:	e033      	b.n	8001a0a <main+0x8ea>
      		else if (scan_index == 24){
 80019a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <main+0x8f0>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	2b18      	cmp	r3, #24
 80019a8:	d113      	bne.n	80019d2 <main+0x8b2>
      			auto_mode = 0;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <main+0x8fc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
      			printed = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
      			scan_index = 0;
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <main+0x8f0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	801a      	strh	r2, [r3, #0]
      			min_scan_dist = 0xFFFF;
 80019bc:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <main+0x900>)
 80019be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c2:	801a      	strh	r2, [r3, #0]
      			min_scan_index = 0;
 80019c4:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <main+0x904>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	801a      	strh	r2, [r3, #0]
      			current_state = STATE_1;
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <main+0x8f4>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
      	break;
 80019d0:	e01b      	b.n	8001a0a <main+0x8ea>
        	    int len = sprintf(msg_main, "BROKEN CODE");
 80019d2:	4915      	ldr	r1, [pc, #84]	@ (8001a28 <main+0x908>)
 80019d4:	4815      	ldr	r0, [pc, #84]	@ (8001a2c <main+0x90c>)
 80019d6:	f007 fba3 	bl	8009120 <siprintf>
 80019da:	6238      	str	r0, [r7, #32]
        	   	HAL_UART_Transmit(&huart1, (uint8_t*)msg_main, len, HAL_MAX_DELAY);
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	4911      	ldr	r1, [pc, #68]	@ (8001a2c <main+0x90c>)
 80019e6:	4812      	ldr	r0, [pc, #72]	@ (8001a30 <main+0x910>)
 80019e8:	f005 fde1 	bl	80075ae <HAL_UART_Transmit>
        	   	scan_index = 0;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <main+0x8f0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	801a      	strh	r2, [r3, #0]
        	   	current_state = STATE_1;
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <main+0x8f4>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
      	break;
 80019f8:	e007      	b.n	8001a0a <main+0x8ea>
      		  break;
 80019fa:	bf00      	nop
 80019fc:	e44e      	b.n	800129c <main+0x17c>
      		  break;
 80019fe:	bf00      	nop
 8001a00:	e44c      	b.n	800129c <main+0x17c>
			break;
 8001a02:	bf00      	nop
 8001a04:	e44a      	b.n	800129c <main+0x17c>
      	break;
 8001a06:	bf00      	nop
 8001a08:	e448      	b.n	800129c <main+0x17c>
      	break;
 8001a0a:	bf00      	nop
 8001a0c:	e446      	b.n	800129c <main+0x17c>
  {
 8001a0e:	e445      	b.n	800129c <main+0x17c>
 8001a10:	20000560 	.word	0x20000560
 8001a14:	2000055c 	.word	0x2000055c
 8001a18:	2000053c 	.word	0x2000053c
 8001a1c:	2000055d 	.word	0x2000055d
 8001a20:	20000054 	.word	0x20000054
 8001a24:	20000568 	.word	0x20000568
 8001a28:	0800b5f4 	.word	0x0800b5f4
 8001a2c:	20000654 	.word	0x20000654
 8001a30:	200004f4 	.word	0x200004f4

08001a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b094      	sub	sp, #80	@ 0x50
 8001a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 0320 	add.w	r3, r7, #32
 8001a3e:	2230      	movs	r2, #48	@ 0x30
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f007 fbd1 	bl	80091ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <SystemClock_Config+0xc8>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	4a26      	ldr	r2, [pc, #152]	@ (8001afc <SystemClock_Config+0xc8>)
 8001a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a68:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <SystemClock_Config+0xc8>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <SystemClock_Config+0xcc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a20      	ldr	r2, [pc, #128]	@ (8001b00 <SystemClock_Config+0xcc>)
 8001a7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <SystemClock_Config+0xcc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a90:	2302      	movs	r3, #2
 8001a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a94:	2301      	movs	r3, #1
 8001a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a98:	2310      	movs	r3, #16
 8001a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001aa8:	2360      	movs	r3, #96	@ 0x60
 8001aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aac:	2302      	movs	r3, #2
 8001aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab4:	f107 0320 	add.w	r3, r7, #32
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f004 f921 	bl	8005d00 <HAL_RCC_OscConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ac4:	f000 feb8 	bl	8002838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac8:	230f      	movs	r3, #15
 8001aca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001acc:	2302      	movs	r3, #2
 8001ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 fb83 	bl	80061f0 <HAL_RCC_ClockConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001af0:	f000 fea2 	bl	8002838 <Error_Handler>
  }
}
 8001af4:	bf00      	nop
 8001af6:	3750      	adds	r7, #80	@ 0x50
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000

08001b04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b16:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b18:	4a21      	ldr	r2, [pc, #132]	@ (8001ba0 <MX_ADC1_Init+0x9c>)
 8001b1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b44:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b46:	4a17      	ldr	r2, [pc, #92]	@ (8001ba4 <MX_ADC1_Init+0xa0>)
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b64:	480d      	ldr	r0, [pc, #52]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b66:	f001 fd45 	bl	80035f4 <HAL_ADC_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b70:	f000 fe62 	bl	8002838 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_ADC1_Init+0x98>)
 8001b86:	f001 fd79 	bl	800367c <HAL_ADC_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b90:	f000 fe52 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000254 	.word	0x20000254
 8001ba0:	40012000 	.word	0x40012000
 8001ba4:	0f000001 	.word	0x0f000001

08001ba8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <MX_I2C1_Init+0x50>)
 8001bae:	4a13      	ldr	r2, [pc, #76]	@ (8001bfc <MX_I2C1_Init+0x54>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <MX_I2C1_Init+0x50>)
 8001bb4:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <MX_I2C1_Init+0x58>)
 8001bb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <MX_I2C1_Init+0x50>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <MX_I2C1_Init+0x50>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <MX_I2C1_Init+0x50>)
 8001bc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <MX_I2C1_Init+0x50>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <MX_I2C1_Init+0x50>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <MX_I2C1_Init+0x50>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <MX_I2C1_Init+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be4:	4804      	ldr	r0, [pc, #16]	@ (8001bf8 <MX_I2C1_Init+0x50>)
 8001be6:	f002 fab9 	bl	800415c <HAL_I2C_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bf0:	f000 fe22 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	2000029c 	.word	0x2000029c
 8001bfc:	40005400 	.word	0x40005400
 8001c00:	000186a0 	.word	0x000186a0

08001c04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <MX_I2C2_Init+0x50>)
 8001c0a:	4a13      	ldr	r2, [pc, #76]	@ (8001c58 <MX_I2C2_Init+0x54>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <MX_I2C2_Init+0x50>)
 8001c10:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <MX_I2C2_Init+0x58>)
 8001c12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <MX_I2C2_Init+0x50>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <MX_I2C2_Init+0x50>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <MX_I2C2_Init+0x50>)
 8001c22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c26:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <MX_I2C2_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <MX_I2C2_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <MX_I2C2_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <MX_I2C2_Init+0x50>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	@ (8001c54 <MX_I2C2_Init+0x50>)
 8001c42:	f002 fa8b 	bl	800415c <HAL_I2C_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c4c:	f000 fdf4 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200002f0 	.word	0x200002f0
 8001c58:	40005800 	.word	0x40005800
 8001c5c:	000186a0 	.word	0x000186a0

08001c60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b092      	sub	sp, #72	@ 0x48
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
 8001c80:	615a      	str	r2, [r3, #20]
 8001c82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2220      	movs	r2, #32
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f007 faad 	bl	80091ea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c90:	4b45      	ldr	r3, [pc, #276]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001c92:	4a46      	ldr	r2, [pc, #280]	@ (8001dac <MX_TIM1_Init+0x14c>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001c96:	4b44      	ldr	r3, [pc, #272]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b42      	ldr	r3, [pc, #264]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2399;
 8001ca2:	4b41      	ldr	r3, [pc, #260]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001ca4:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001ca8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b3f      	ldr	r3, [pc, #252]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb6:	4b3c      	ldr	r3, [pc, #240]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cbc:	483a      	ldr	r0, [pc, #232]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001cbe:	f004 fd04 	bl	80066ca <HAL_TIM_PWM_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001cc8:	f000 fdb6 	bl	8002838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4833      	ldr	r0, [pc, #204]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001cdc:	f005 fb32 	bl	8007344 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ce6:	f000 fda7 	bl	8002838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cea:	2360      	movs	r3, #96	@ 0x60
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4826      	ldr	r0, [pc, #152]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001d10:	f004 ff72 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001d1a:	f000 fd8d 	bl	8002838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d22:	2204      	movs	r2, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4820      	ldr	r0, [pc, #128]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001d28:	f004 ff66 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001d32:	f000 fd81 	bl	8002838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	481a      	ldr	r0, [pc, #104]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001d40:	f004 ff5a 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001d4a:	f000 fd75 	bl	8002838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d52:	220c      	movs	r2, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4814      	ldr	r0, [pc, #80]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001d58:	f004 ff4e 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001d62:	f000 fd69 	bl	8002838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	4619      	mov	r1, r3
 8001d88:	4807      	ldr	r0, [pc, #28]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001d8a:	f005 fb49 	bl	8007420 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001d94:	f000 fd50 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d98:	4803      	ldr	r0, [pc, #12]	@ (8001da8 <MX_TIM1_Init+0x148>)
 8001d9a:	f001 f93b 	bl	8003014 <HAL_TIM_MspPostInit>

}
 8001d9e:	bf00      	nop
 8001da0:	3748      	adds	r7, #72	@ 0x48
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000344 	.word	0x20000344
 8001dac:	40010000 	.word	0x40010000

08001db0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	@ 0x30
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	2224      	movs	r2, #36	@ 0x24
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f007 fa13 	bl	80091ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dcc:	4b21      	ldr	r3, [pc, #132]	@ (8001e54 <MX_TIM2_Init+0xa4>)
 8001dce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e54 <MX_TIM2_Init+0xa4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b1e      	ldr	r3, [pc, #120]	@ (8001e54 <MX_TIM2_Init+0xa4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001de0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <MX_TIM2_Init+0xa4>)
 8001de2:	f04f 32ff 	mov.w	r2, #4294967295
 8001de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <MX_TIM2_Init+0xa4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dee:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <MX_TIM2_Init+0xa4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480d      	ldr	r0, [pc, #52]	@ (8001e54 <MX_TIM2_Init+0xa4>)
 8001e20:	f004 fdb6 	bl	8006990 <HAL_TIM_Encoder_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e2a:	f000 fd05 	bl	8002838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4806      	ldr	r0, [pc, #24]	@ (8001e54 <MX_TIM2_Init+0xa4>)
 8001e3c:	f005 fa82 	bl	8007344 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001e46:	f000 fcf7 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	3730      	adds	r7, #48	@ 0x30
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000038c 	.word	0x2000038c

08001e58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	@ 0x30
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	2224      	movs	r2, #36	@ 0x24
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f007 f9bf 	bl	80091ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e74:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <MX_TIM3_Init+0xa0>)
 8001e76:	4a21      	ldr	r2, [pc, #132]	@ (8001efc <MX_TIM3_Init+0xa4>)
 8001e78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <MX_TIM3_Init+0xa0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <MX_TIM3_Init+0xa0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <MX_TIM3_Init+0xa0>)
 8001e88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <MX_TIM3_Init+0xa0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <MX_TIM3_Init+0xa0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <MX_TIM3_Init+0xa0>)
 8001ec6:	f004 fd63 	bl	8006990 <HAL_TIM_Encoder_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ed0:	f000 fcb2 	bl	8002838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <MX_TIM3_Init+0xa0>)
 8001ee2:	f005 fa2f 	bl	8007344 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001eec:	f000 fca4 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	3730      	adds	r7, #48	@ 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200003d4 	.word	0x200003d4
 8001efc:	40000400 	.word	0x40000400

08001f00 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
 8001f14:	615a      	str	r2, [r3, #20]
 8001f16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f18:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <MX_TIM9_Init+0x98>)
 8001f1a:	4a20      	ldr	r2, [pc, #128]	@ (8001f9c <MX_TIM9_Init+0x9c>)
 8001f1c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1;
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <MX_TIM9_Init+0x98>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <MX_TIM9_Init+0x98>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2399;
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <MX_TIM9_Init+0x98>)
 8001f2c:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001f30:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f32:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <MX_TIM9_Init+0x98>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <MX_TIM9_Init+0x98>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001f3e:	4816      	ldr	r0, [pc, #88]	@ (8001f98 <MX_TIM9_Init+0x98>)
 8001f40:	f004 fbc3 	bl	80066ca <HAL_TIM_PWM_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001f4a:	f000 fc75 	bl	8002838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f4e:	2360      	movs	r3, #96	@ 0x60
 8001f50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2200      	movs	r2, #0
 8001f62:	4619      	mov	r1, r3
 8001f64:	480c      	ldr	r0, [pc, #48]	@ (8001f98 <MX_TIM9_Init+0x98>)
 8001f66:	f004 fe47 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001f70:	f000 fc62 	bl	8002838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	2204      	movs	r2, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4807      	ldr	r0, [pc, #28]	@ (8001f98 <MX_TIM9_Init+0x98>)
 8001f7c:	f004 fe3c 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001f86:	f000 fc57 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001f8a:	4803      	ldr	r0, [pc, #12]	@ (8001f98 <MX_TIM9_Init+0x98>)
 8001f8c:	f001 f842 	bl	8003014 <HAL_TIM_MspPostInit>

}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000041c 	.word	0x2000041c
 8001f9c:	40014000 	.word	0x40014000

08001fa0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
 8001fb4:	615a      	str	r2, [r3, #20]
 8001fb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <MX_TIM10_Init+0x94>)
 8001fba:	4a1f      	ldr	r2, [pc, #124]	@ (8002038 <MX_TIM10_Init+0x98>)
 8001fbc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <MX_TIM10_Init+0x94>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <MX_TIM10_Init+0x94>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2399;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <MX_TIM10_Init+0x94>)
 8001fcc:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001fd0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd2:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <MX_TIM10_Init+0x94>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd8:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <MX_TIM10_Init+0x94>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001fde:	4815      	ldr	r0, [pc, #84]	@ (8002034 <MX_TIM10_Init+0x94>)
 8001fe0:	f004 fb24 	bl	800662c <HAL_TIM_Base_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001fea:	f000 fc25 	bl	8002838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001fee:	4811      	ldr	r0, [pc, #68]	@ (8002034 <MX_TIM10_Init+0x94>)
 8001ff0:	f004 fb6b 	bl	80066ca <HAL_TIM_PWM_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001ffa:	f000 fc1d 	bl	8002838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffe:	2360      	movs	r3, #96	@ 0x60
 8002000:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	2200      	movs	r2, #0
 8002012:	4619      	mov	r1, r3
 8002014:	4807      	ldr	r0, [pc, #28]	@ (8002034 <MX_TIM10_Init+0x94>)
 8002016:	f004 fdef 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002020:	f000 fc0a 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002024:	4803      	ldr	r0, [pc, #12]	@ (8002034 <MX_TIM10_Init+0x94>)
 8002026:	f000 fff5 	bl	8003014 <HAL_TIM_MspPostInit>

}
 800202a:	bf00      	nop
 800202c:	3720      	adds	r7, #32
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000464 	.word	0x20000464
 8002038:	40014400 	.word	0x40014400

0800203c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
 8002050:	615a      	str	r2, [r3, #20]
 8002052:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002054:	4b1e      	ldr	r3, [pc, #120]	@ (80020d0 <MX_TIM11_Init+0x94>)
 8002056:	4a1f      	ldr	r2, [pc, #124]	@ (80020d4 <MX_TIM11_Init+0x98>)
 8002058:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 800205a:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <MX_TIM11_Init+0x94>)
 800205c:	2201      	movs	r2, #1
 800205e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002060:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <MX_TIM11_Init+0x94>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2399;
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <MX_TIM11_Init+0x94>)
 8002068:	f640 125f 	movw	r2, #2399	@ 0x95f
 800206c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206e:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <MX_TIM11_Init+0x94>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002074:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <MX_TIM11_Init+0x94>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800207a:	4815      	ldr	r0, [pc, #84]	@ (80020d0 <MX_TIM11_Init+0x94>)
 800207c:	f004 fad6 	bl	800662c <HAL_TIM_Base_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002086:	f000 fbd7 	bl	8002838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800208a:	4811      	ldr	r0, [pc, #68]	@ (80020d0 <MX_TIM11_Init+0x94>)
 800208c:	f004 fb1d 	bl	80066ca <HAL_TIM_PWM_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002096:	f000 fbcf 	bl	8002838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800209a:	2360      	movs	r3, #96	@ 0x60
 800209c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2200      	movs	r2, #0
 80020ae:	4619      	mov	r1, r3
 80020b0:	4807      	ldr	r0, [pc, #28]	@ (80020d0 <MX_TIM11_Init+0x94>)
 80020b2:	f004 fda1 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80020bc:	f000 fbbc 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80020c0:	4803      	ldr	r0, [pc, #12]	@ (80020d0 <MX_TIM11_Init+0x94>)
 80020c2:	f000 ffa7 	bl	8003014 <HAL_TIM_MspPostInit>

}
 80020c6:	bf00      	nop
 80020c8:	3720      	adds	r7, #32
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200004ac 	.word	0x200004ac
 80020d4:	40014800 	.word	0x40014800

080020d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <MX_USART1_UART_Init+0x4c>)
 80020de:	4a12      	ldr	r2, [pc, #72]	@ (8002128 <MX_USART1_UART_Init+0x50>)
 80020e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <MX_USART1_UART_Init+0x4c>)
 80020e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <MX_USART1_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <MX_USART1_UART_Init+0x4c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <MX_USART1_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020fc:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <MX_USART1_UART_Init+0x4c>)
 80020fe:	220c      	movs	r2, #12
 8002100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002102:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <MX_USART1_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <MX_USART1_UART_Init+0x4c>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800210e:	4805      	ldr	r0, [pc, #20]	@ (8002124 <MX_USART1_UART_Init+0x4c>)
 8002110:	f005 f9fd 	bl	800750e <HAL_UART_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800211a:	f000 fb8d 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200004f4 	.word	0x200004f4
 8002128:	40011000 	.word	0x40011000

0800212c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	4b2a      	ldr	r3, [pc, #168]	@ (80021f0 <MX_GPIO_Init+0xc4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a29      	ldr	r2, [pc, #164]	@ (80021f0 <MX_GPIO_Init+0xc4>)
 800214c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <MX_GPIO_Init+0xc4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	4b23      	ldr	r3, [pc, #140]	@ (80021f0 <MX_GPIO_Init+0xc4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a22      	ldr	r2, [pc, #136]	@ (80021f0 <MX_GPIO_Init+0xc4>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <MX_GPIO_Init+0xc4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <MX_GPIO_Init+0xc4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	4a1b      	ldr	r2, [pc, #108]	@ (80021f0 <MX_GPIO_Init+0xc4>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6313      	str	r3, [r2, #48]	@ 0x30
 800218a:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <MX_GPIO_Init+0xc4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002196:	2200      	movs	r2, #0
 8002198:	21c0      	movs	r1, #192	@ 0xc0
 800219a:	4816      	ldr	r0, [pc, #88]	@ (80021f4 <MX_GPIO_Init+0xc8>)
 800219c:	f001 ffc4 	bl	8004128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80021a6:	4814      	ldr	r0, [pc, #80]	@ (80021f8 <MX_GPIO_Init+0xcc>)
 80021a8:	f001 ffbe 	bl	8004128 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ac:	23c0      	movs	r3, #192	@ 0xc0
 80021ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	4619      	mov	r1, r3
 80021c2:	480c      	ldr	r0, [pc, #48]	@ (80021f4 <MX_GPIO_Init+0xc8>)
 80021c4:	f001 fe2c 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80021c8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80021cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	2301      	movs	r3, #1
 80021d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021da:	f107 030c 	add.w	r3, r7, #12
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <MX_GPIO_Init+0xcc>)
 80021e2:	f001 fe1d 	bl	8003e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80021e6:	bf00      	nop
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020400 	.word	0x40020400

080021fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b096      	sub	sp, #88	@ 0x58
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a82      	ldr	r2, [pc, #520]	@ (8002414 <HAL_UART_RxCpltCallback+0x218>)
 800220a:	4293      	cmp	r3, r2
 800220c:	f040 82fb 	bne.w	8002806 <HAL_UART_RxCpltCallback+0x60a>
    {
        uint8_t received = rx_buffer[rx_index];
 8002210:	4b81      	ldr	r3, [pc, #516]	@ (8002418 <HAL_UART_RxCpltCallback+0x21c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b81      	ldr	r3, [pc, #516]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 8002218:	5c9b      	ldrb	r3, [r3, r2]
 800221a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if (received == '\r')  // End of command
 800221e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002222:	2b0d      	cmp	r3, #13
 8002224:	f040 82d8 	bne.w	80027d8 <HAL_UART_RxCpltCallback+0x5dc>
        {
            // Enforce valid format: exactly 4 printable characters
            if (rx_index != 4 ||
 8002228:	4b7b      	ldr	r3, [pc, #492]	@ (8002418 <HAL_UART_RxCpltCallback+0x21c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d127      	bne.n	8002280 <HAL_UART_RxCpltCallback+0x84>
                !isprint(rx_buffer[0]) ||
 8002230:	4b7a      	ldr	r3, [pc, #488]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	4a7a      	ldr	r2, [pc, #488]	@ (8002420 <HAL_UART_RxCpltCallback+0x224>)
 8002238:	4413      	add	r3, r2
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f003 0397 	and.w	r3, r3, #151	@ 0x97
            if (rx_index != 4 ||
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01d      	beq.n	8002280 <HAL_UART_RxCpltCallback+0x84>
                !isprint(rx_buffer[1]) ||
 8002244:	4b75      	ldr	r3, [pc, #468]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 8002246:	785b      	ldrb	r3, [r3, #1]
 8002248:	3301      	adds	r3, #1
 800224a:	4a75      	ldr	r2, [pc, #468]	@ (8002420 <HAL_UART_RxCpltCallback+0x224>)
 800224c:	4413      	add	r3, r2
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	f003 0397 	and.w	r3, r3, #151	@ 0x97
                !isprint(rx_buffer[0]) ||
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_UART_RxCpltCallback+0x84>
                !isprint(rx_buffer[2]) ||
 8002258:	4b70      	ldr	r3, [pc, #448]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 800225a:	789b      	ldrb	r3, [r3, #2]
 800225c:	3301      	adds	r3, #1
 800225e:	4a70      	ldr	r2, [pc, #448]	@ (8002420 <HAL_UART_RxCpltCallback+0x224>)
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f003 0397 	and.w	r3, r3, #151	@ 0x97
                !isprint(rx_buffer[1]) ||
 8002268:	2b00      	cmp	r3, #0
 800226a:	d009      	beq.n	8002280 <HAL_UART_RxCpltCallback+0x84>
                !isprint(rx_buffer[3]))
 800226c:	4b6b      	ldr	r3, [pc, #428]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 800226e:	78db      	ldrb	r3, [r3, #3]
 8002270:	3301      	adds	r3, #1
 8002272:	4a6b      	ldr	r2, [pc, #428]	@ (8002420 <HAL_UART_RxCpltCallback+0x224>)
 8002274:	4413      	add	r3, r2
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	f003 0397 	and.w	r3, r3, #151	@ 0x97
                !isprint(rx_buffer[2]) ||
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10d      	bne.n	800229c <HAL_UART_RxCpltCallback+0xa0>
            {
                int len = sprintf(msg_int, "Invalid command format\r\n");
 8002280:	4968      	ldr	r1, [pc, #416]	@ (8002424 <HAL_UART_RxCpltCallback+0x228>)
 8002282:	4869      	ldr	r0, [pc, #420]	@ (8002428 <HAL_UART_RxCpltCallback+0x22c>)
 8002284:	f006 ff4c 	bl	8009120 <siprintf>
 8002288:	61b8      	str	r0, [r7, #24]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	b29a      	uxth	r2, r3
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	4965      	ldr	r1, [pc, #404]	@ (8002428 <HAL_UART_RxCpltCallback+0x22c>)
 8002294:	4865      	ldr	r0, [pc, #404]	@ (800242c <HAL_UART_RxCpltCallback+0x230>)
 8002296:	f005 f98a 	bl	80075ae <HAL_UART_Transmit>
            {
 800229a:	e294      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
            }
            else if (current_state == STATE_1)
 800229c:	4b64      	ldr	r3, [pc, #400]	@ (8002430 <HAL_UART_RxCpltCallback+0x234>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	f040 8290 	bne.w	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
            {
                rx_buffer[rx_index] = '\0';  // Null-terminate
 80022a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002418 <HAL_UART_RxCpltCallback+0x21c>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b5b      	ldr	r3, [pc, #364]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]

                // Echo for debugging
                int len = sprintf(msg_int, "RX: %s\r\n", rx_buffer);
 80022b2:	4a5a      	ldr	r2, [pc, #360]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 80022b4:	495f      	ldr	r1, [pc, #380]	@ (8002434 <HAL_UART_RxCpltCallback+0x238>)
 80022b6:	485c      	ldr	r0, [pc, #368]	@ (8002428 <HAL_UART_RxCpltCallback+0x22c>)
 80022b8:	f006 ff32 	bl	8009120 <siprintf>
 80022bc:	64f8      	str	r0, [r7, #76]	@ 0x4c
                HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 80022be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	4958      	ldr	r1, [pc, #352]	@ (8002428 <HAL_UART_RxCpltCallback+0x22c>)
 80022c8:	4858      	ldr	r0, [pc, #352]	@ (800242c <HAL_UART_RxCpltCallback+0x230>)
 80022ca:	f005 f970 	bl	80075ae <HAL_UART_Transmit>

                // ---------------- Motor Control ----------------
                if ((rx_buffer[0] == 'M' || rx_buffer[0] == 'm') &&
 80022ce:	4b53      	ldr	r3, [pc, #332]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b4d      	cmp	r3, #77	@ 0x4d
 80022d4:	d003      	beq.n	80022de <HAL_UART_RxCpltCallback+0xe2>
 80022d6:	4b51      	ldr	r3, [pc, #324]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b6d      	cmp	r3, #109	@ 0x6d
 80022dc:	d169      	bne.n	80023b2 <HAL_UART_RxCpltCallback+0x1b6>
                    (rx_buffer[1] >= '1' && rx_buffer[1] <= '2') &&
 80022de:	4b4f      	ldr	r3, [pc, #316]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 80022e0:	785b      	ldrb	r3, [r3, #1]
                if ((rx_buffer[0] == 'M' || rx_buffer[0] == 'm') &&
 80022e2:	2b30      	cmp	r3, #48	@ 0x30
 80022e4:	d965      	bls.n	80023b2 <HAL_UART_RxCpltCallback+0x1b6>
                    (rx_buffer[1] >= '1' && rx_buffer[1] <= '2') &&
 80022e6:	4b4d      	ldr	r3, [pc, #308]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 80022e8:	785b      	ldrb	r3, [r3, #1]
 80022ea:	2b32      	cmp	r3, #50	@ 0x32
 80022ec:	d861      	bhi.n	80023b2 <HAL_UART_RxCpltCallback+0x1b6>
                    isxdigit(rx_buffer[2]) && isxdigit(rx_buffer[3]))
 80022ee:	4b4b      	ldr	r3, [pc, #300]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 80022f0:	789b      	ldrb	r3, [r3, #2]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002420 <HAL_UART_RxCpltCallback+0x224>)
 80022f6:	4413      	add	r3, r2
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                    (rx_buffer[1] >= '1' && rx_buffer[1] <= '2') &&
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d057      	beq.n	80023b2 <HAL_UART_RxCpltCallback+0x1b6>
                    isxdigit(rx_buffer[2]) && isxdigit(rx_buffer[3]))
 8002302:	4b46      	ldr	r3, [pc, #280]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 8002304:	78db      	ldrb	r3, [r3, #3]
 8002306:	3301      	adds	r3, #1
 8002308:	4a45      	ldr	r2, [pc, #276]	@ (8002420 <HAL_UART_RxCpltCallback+0x224>)
 800230a:	4413      	add	r3, r2
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8002312:	2b00      	cmp	r3, #0
 8002314:	d04d      	beq.n	80023b2 <HAL_UART_RxCpltCallback+0x1b6>
                {
                    uint8_t motor_id = rx_buffer[1] - '0';
 8002316:	4b41      	ldr	r3, [pc, #260]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 8002318:	785b      	ldrb	r3, [r3, #1]
 800231a:	3b30      	subs	r3, #48	@ 0x30
 800231c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
                    char hex_str[3] = { rx_buffer[2], rx_buffer[3], '\0' };
 8002320:	4b3e      	ldr	r3, [pc, #248]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 8002322:	789b      	ldrb	r3, [r3, #2]
 8002324:	753b      	strb	r3, [r7, #20]
 8002326:	4b3d      	ldr	r3, [pc, #244]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 8002328:	78db      	ldrb	r3, [r3, #3]
 800232a:	757b      	strb	r3, [r7, #21]
 800232c:	2300      	movs	r3, #0
 800232e:	75bb      	strb	r3, [r7, #22]
                    uint8_t raw = (uint8_t)strtol(hex_str, NULL, 16);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2210      	movs	r2, #16
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f006 f9cf 	bl	80086dc <strtol>
 800233e:	4603      	mov	r3, r0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	74fb      	strb	r3, [r7, #19]
                    int8_t signed_val = *(int8_t*)&raw;
 8002344:	f107 0313 	add.w	r3, r7, #19
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    int32_t duty = signed_val;
 800234e:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8002352:	657b      	str	r3, [r7, #84]	@ 0x54

                    if (duty > 100) duty = 100;
 8002354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	dd01      	ble.n	800235e <HAL_UART_RxCpltCallback+0x162>
 800235a:	2364      	movs	r3, #100	@ 0x64
 800235c:	657b      	str	r3, [r7, #84]	@ 0x54
                    if (duty < -100) duty = -100;
 800235e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002360:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002364:	da02      	bge.n	800236c <HAL_UART_RxCpltCallback+0x170>
 8002366:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800236a:	657b      	str	r3, [r7, #84]	@ 0x54

                    if (motor_id == 1) duty_flywheel1 = duty;
 800236c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002370:	2b01      	cmp	r3, #1
 8002372:	d103      	bne.n	800237c <HAL_UART_RxCpltCallback+0x180>
 8002374:	4a30      	ldr	r2, [pc, #192]	@ (8002438 <HAL_UART_RxCpltCallback+0x23c>)
 8002376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e006      	b.n	800238a <HAL_UART_RxCpltCallback+0x18e>
                    else if (motor_id == 2) duty_flywheel2 = duty;
 800237c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002380:	2b02      	cmp	r3, #2
 8002382:	d102      	bne.n	800238a <HAL_UART_RxCpltCallback+0x18e>
 8002384:	4a2d      	ldr	r2, [pc, #180]	@ (800243c <HAL_UART_RxCpltCallback+0x240>)
 8002386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002388:	6013      	str	r3, [r2, #0]

                    len = sprintf(msg_int, "Motor %d set to %ld%%\r\n", motor_id, duty);
 800238a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800238e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002390:	492b      	ldr	r1, [pc, #172]	@ (8002440 <HAL_UART_RxCpltCallback+0x244>)
 8002392:	4825      	ldr	r0, [pc, #148]	@ (8002428 <HAL_UART_RxCpltCallback+0x22c>)
 8002394:	f006 fec4 	bl	8009120 <siprintf>
 8002398:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 800239a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800239c:	b29a      	uxth	r2, r3
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	4921      	ldr	r1, [pc, #132]	@ (8002428 <HAL_UART_RxCpltCallback+0x22c>)
 80023a4:	4821      	ldr	r0, [pc, #132]	@ (800242c <HAL_UART_RxCpltCallback+0x230>)
 80023a6:	f005 f902 	bl	80075ae <HAL_UART_Transmit>

                    current_state = STATE_4;
 80023aa:	4b21      	ldr	r3, [pc, #132]	@ (8002430 <HAL_UART_RxCpltCallback+0x234>)
 80023ac:	2204      	movs	r2, #4
 80023ae:	701a      	strb	r2, [r3, #0]
                {
 80023b0:	e209      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
                }

                // ---------------- Turret 1 Read ----------------
                else if (strncmp((char*)rx_buffer, "T1re", 4) == 0)
 80023b2:	2204      	movs	r2, #4
 80023b4:	4923      	ldr	r1, [pc, #140]	@ (8002444 <HAL_UART_RxCpltCallback+0x248>)
 80023b6:	4819      	ldr	r0, [pc, #100]	@ (800241c <HAL_UART_RxCpltCallback+0x220>)
 80023b8:	f006 ff1f 	bl	80091fa <strncmp>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d148      	bne.n	8002454 <HAL_UART_RxCpltCallback+0x258>
                {
                    int len = sprintf(msg_int, "Turret 1 angle: %ld.%01ld deg\r\n", turret1_enc_deg / 10, labs(turret1_enc_deg % 10));
 80023c2:	4b21      	ldr	r3, [pc, #132]	@ (8002448 <HAL_UART_RxCpltCallback+0x24c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a21      	ldr	r2, [pc, #132]	@ (800244c <HAL_UART_RxCpltCallback+0x250>)
 80023c8:	fb82 1203 	smull	r1, r2, r2, r3
 80023cc:	1092      	asrs	r2, r2, #2
 80023ce:	17db      	asrs	r3, r3, #31
 80023d0:	1ad0      	subs	r0, r2, r3
 80023d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002448 <HAL_UART_RxCpltCallback+0x24c>)
 80023d4:	6819      	ldr	r1, [r3, #0]
 80023d6:	4b1d      	ldr	r3, [pc, #116]	@ (800244c <HAL_UART_RxCpltCallback+0x250>)
 80023d8:	fb83 2301 	smull	r2, r3, r3, r1
 80023dc:	109a      	asrs	r2, r3, #2
 80023de:	17cb      	asrs	r3, r1, #31
 80023e0:	1ad2      	subs	r2, r2, r3
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	1aca      	subs	r2, r1, r3
 80023ec:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80023f0:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80023f4:	4602      	mov	r2, r0
 80023f6:	4916      	ldr	r1, [pc, #88]	@ (8002450 <HAL_UART_RxCpltCallback+0x254>)
 80023f8:	480b      	ldr	r0, [pc, #44]	@ (8002428 <HAL_UART_RxCpltCallback+0x22c>)
 80023fa:	f006 fe91 	bl	8009120 <siprintf>
 80023fe:	61f8      	str	r0, [r7, #28]
                    HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	b29a      	uxth	r2, r3
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
 8002408:	4907      	ldr	r1, [pc, #28]	@ (8002428 <HAL_UART_RxCpltCallback+0x22c>)
 800240a:	4808      	ldr	r0, [pc, #32]	@ (800242c <HAL_UART_RxCpltCallback+0x230>)
 800240c:	f005 f8cf 	bl	80075ae <HAL_UART_Transmit>
 8002410:	e1d9      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
 8002412:	bf00      	nop
 8002414:	40011000 	.word	0x40011000
 8002418:	20000613 	.word	0x20000613
 800241c:	2000060c 	.word	0x2000060c
 8002420:	0800b7b0 	.word	0x0800b7b0
 8002424:	0800b600 	.word	0x0800b600
 8002428:	20000614 	.word	0x20000614
 800242c:	200004f4 	.word	0x200004f4
 8002430:	2000055c 	.word	0x2000055c
 8002434:	0800b61c 	.word	0x0800b61c
 8002438:	2000053c 	.word	0x2000053c
 800243c:	20000540 	.word	0x20000540
 8002440:	0800b628 	.word	0x0800b628
 8002444:	0800b640 	.word	0x0800b640
 8002448:	20000548 	.word	0x20000548
 800244c:	66666667 	.word	0x66666667
 8002450:	0800b648 	.word	0x0800b648
                }

                // ---------------- Turret 1 Set ----------------
                else if (rx_buffer[0] == 'T' && rx_buffer[1] == '1' &&
 8002454:	4ba7      	ldr	r3, [pc, #668]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b54      	cmp	r3, #84	@ 0x54
 800245a:	d162      	bne.n	8002522 <HAL_UART_RxCpltCallback+0x326>
 800245c:	4ba5      	ldr	r3, [pc, #660]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 800245e:	785b      	ldrb	r3, [r3, #1]
 8002460:	2b31      	cmp	r3, #49	@ 0x31
 8002462:	d15e      	bne.n	8002522 <HAL_UART_RxCpltCallback+0x326>
                         isxdigit(rx_buffer[2]) && isxdigit(rx_buffer[3]))
 8002464:	4ba3      	ldr	r3, [pc, #652]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 8002466:	789b      	ldrb	r3, [r3, #2]
 8002468:	3301      	adds	r3, #1
 800246a:	4aa3      	ldr	r2, [pc, #652]	@ (80026f8 <HAL_UART_RxCpltCallback+0x4fc>)
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                else if (rx_buffer[0] == 'T' && rx_buffer[1] == '1' &&
 8002474:	2b00      	cmp	r3, #0
 8002476:	d054      	beq.n	8002522 <HAL_UART_RxCpltCallback+0x326>
                         isxdigit(rx_buffer[2]) && isxdigit(rx_buffer[3]))
 8002478:	4b9e      	ldr	r3, [pc, #632]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 800247a:	78db      	ldrb	r3, [r3, #3]
 800247c:	3301      	adds	r3, #1
 800247e:	4a9e      	ldr	r2, [pc, #632]	@ (80026f8 <HAL_UART_RxCpltCallback+0x4fc>)
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8002488:	2b00      	cmp	r3, #0
 800248a:	d04a      	beq.n	8002522 <HAL_UART_RxCpltCallback+0x326>
                {
                    char hex_str[3] = { rx_buffer[2], rx_buffer[3], '\0' };
 800248c:	4b99      	ldr	r3, [pc, #612]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 800248e:	789b      	ldrb	r3, [r3, #2]
 8002490:	743b      	strb	r3, [r7, #16]
 8002492:	4b98      	ldr	r3, [pc, #608]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 8002494:	78db      	ldrb	r3, [r3, #3]
 8002496:	747b      	strb	r3, [r7, #17]
 8002498:	2300      	movs	r3, #0
 800249a:	74bb      	strb	r3, [r7, #18]
                    uint8_t raw = (uint8_t)strtol(hex_str, NULL, 16);
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	2210      	movs	r2, #16
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f006 f919 	bl	80086dc <strtol>
 80024aa:	4603      	mov	r3, r0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	73fb      	strb	r3, [r7, #15]
                    int8_t signed_val = *(int8_t*)&raw;
 80024b0:	f107 030f 	add.w	r3, r7, #15
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
                    turret1_target = (int32_t)signed_val * 10;
 80024ba:	f997 2049 	ldrsb.w	r2, [r7, #73]	@ 0x49
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b8c      	ldr	r3, [pc, #560]	@ (80026fc <HAL_UART_RxCpltCallback+0x500>)
 80024ca:	601a      	str	r2, [r3, #0]

                    int len = sprintf(msg_int, "Turret 1 target set to: %ld.%01ld deg\r\n", turret1_target / 10, labs(turret1_target % 10));
 80024cc:	4b8b      	ldr	r3, [pc, #556]	@ (80026fc <HAL_UART_RxCpltCallback+0x500>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a8b      	ldr	r2, [pc, #556]	@ (8002700 <HAL_UART_RxCpltCallback+0x504>)
 80024d2:	fb82 1203 	smull	r1, r2, r2, r3
 80024d6:	1092      	asrs	r2, r2, #2
 80024d8:	17db      	asrs	r3, r3, #31
 80024da:	1ad0      	subs	r0, r2, r3
 80024dc:	4b87      	ldr	r3, [pc, #540]	@ (80026fc <HAL_UART_RxCpltCallback+0x500>)
 80024de:	6819      	ldr	r1, [r3, #0]
 80024e0:	4b87      	ldr	r3, [pc, #540]	@ (8002700 <HAL_UART_RxCpltCallback+0x504>)
 80024e2:	fb83 2301 	smull	r2, r3, r3, r1
 80024e6:	109a      	asrs	r2, r3, #2
 80024e8:	17cb      	asrs	r3, r1, #31
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	1aca      	subs	r2, r1, r3
 80024f6:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80024fa:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80024fe:	4602      	mov	r2, r0
 8002500:	4980      	ldr	r1, [pc, #512]	@ (8002704 <HAL_UART_RxCpltCallback+0x508>)
 8002502:	4881      	ldr	r0, [pc, #516]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 8002504:	f006 fe0c 	bl	8009120 <siprintf>
 8002508:	6478      	str	r0, [r7, #68]	@ 0x44
                    HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 800250a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800250c:	b29a      	uxth	r2, r3
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	497d      	ldr	r1, [pc, #500]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 8002514:	487d      	ldr	r0, [pc, #500]	@ (800270c <HAL_UART_RxCpltCallback+0x510>)
 8002516:	f005 f84a 	bl	80075ae <HAL_UART_Transmit>

                    current_state = STATE_2;
 800251a:	4b7d      	ldr	r3, [pc, #500]	@ (8002710 <HAL_UART_RxCpltCallback+0x514>)
 800251c:	2202      	movs	r2, #2
 800251e:	701a      	strb	r2, [r3, #0]
                {
 8002520:	e151      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
                }

                // ---------------- Turret 2 Read ----------------
                else if (strncmp((char*)rx_buffer, "T2re", 4) == 0)
 8002522:	2204      	movs	r2, #4
 8002524:	497b      	ldr	r1, [pc, #492]	@ (8002714 <HAL_UART_RxCpltCallback+0x518>)
 8002526:	4873      	ldr	r0, [pc, #460]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 8002528:	f006 fe67 	bl	80091fa <strncmp>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d127      	bne.n	8002582 <HAL_UART_RxCpltCallback+0x386>
                {
                    int len = sprintf(msg_int, "Turret 2 angle: %ld.%01ld deg\r\n", turret2_enc_deg / 10, labs(turret2_enc_deg % 10));
 8002532:	4b79      	ldr	r3, [pc, #484]	@ (8002718 <HAL_UART_RxCpltCallback+0x51c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a72      	ldr	r2, [pc, #456]	@ (8002700 <HAL_UART_RxCpltCallback+0x504>)
 8002538:	fb82 1203 	smull	r1, r2, r2, r3
 800253c:	1092      	asrs	r2, r2, #2
 800253e:	17db      	asrs	r3, r3, #31
 8002540:	1ad0      	subs	r0, r2, r3
 8002542:	4b75      	ldr	r3, [pc, #468]	@ (8002718 <HAL_UART_RxCpltCallback+0x51c>)
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	4b6e      	ldr	r3, [pc, #440]	@ (8002700 <HAL_UART_RxCpltCallback+0x504>)
 8002548:	fb83 2301 	smull	r2, r3, r3, r1
 800254c:	109a      	asrs	r2, r3, #2
 800254e:	17cb      	asrs	r3, r1, #31
 8002550:	1ad2      	subs	r2, r2, r3
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	1aca      	subs	r2, r1, r3
 800255c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8002560:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8002564:	4602      	mov	r2, r0
 8002566:	496d      	ldr	r1, [pc, #436]	@ (800271c <HAL_UART_RxCpltCallback+0x520>)
 8002568:	4867      	ldr	r0, [pc, #412]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 800256a:	f006 fdd9 	bl	8009120 <siprintf>
 800256e:	6238      	str	r0, [r7, #32]
                    HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	b29a      	uxth	r2, r3
 8002574:	f04f 33ff 	mov.w	r3, #4294967295
 8002578:	4963      	ldr	r1, [pc, #396]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 800257a:	4864      	ldr	r0, [pc, #400]	@ (800270c <HAL_UART_RxCpltCallback+0x510>)
 800257c:	f005 f817 	bl	80075ae <HAL_UART_Transmit>
 8002580:	e121      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
                }

                // ---------------- Turret 2 Set ----------------
                else if (rx_buffer[0] == 'T' && rx_buffer[1] == '2' &&
 8002582:	4b5c      	ldr	r3, [pc, #368]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b54      	cmp	r3, #84	@ 0x54
 8002588:	d162      	bne.n	8002650 <HAL_UART_RxCpltCallback+0x454>
 800258a:	4b5a      	ldr	r3, [pc, #360]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	2b32      	cmp	r3, #50	@ 0x32
 8002590:	d15e      	bne.n	8002650 <HAL_UART_RxCpltCallback+0x454>
                         isxdigit(rx_buffer[2]) && isxdigit(rx_buffer[3]))
 8002592:	4b58      	ldr	r3, [pc, #352]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 8002594:	789b      	ldrb	r3, [r3, #2]
 8002596:	3301      	adds	r3, #1
 8002598:	4a57      	ldr	r2, [pc, #348]	@ (80026f8 <HAL_UART_RxCpltCallback+0x4fc>)
 800259a:	4413      	add	r3, r2
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                else if (rx_buffer[0] == 'T' && rx_buffer[1] == '2' &&
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d054      	beq.n	8002650 <HAL_UART_RxCpltCallback+0x454>
                         isxdigit(rx_buffer[2]) && isxdigit(rx_buffer[3]))
 80025a6:	4b53      	ldr	r3, [pc, #332]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 80025a8:	78db      	ldrb	r3, [r3, #3]
 80025aa:	3301      	adds	r3, #1
 80025ac:	4a52      	ldr	r2, [pc, #328]	@ (80026f8 <HAL_UART_RxCpltCallback+0x4fc>)
 80025ae:	4413      	add	r3, r2
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d04a      	beq.n	8002650 <HAL_UART_RxCpltCallback+0x454>
                {
                    char hex_str[3] = { rx_buffer[2], rx_buffer[3], '\0' };
 80025ba:	4b4e      	ldr	r3, [pc, #312]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 80025bc:	789b      	ldrb	r3, [r3, #2]
 80025be:	733b      	strb	r3, [r7, #12]
 80025c0:	4b4c      	ldr	r3, [pc, #304]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 80025c2:	78db      	ldrb	r3, [r3, #3]
 80025c4:	737b      	strb	r3, [r7, #13]
 80025c6:	2300      	movs	r3, #0
 80025c8:	73bb      	strb	r3, [r7, #14]
                    uint8_t raw = (uint8_t)strtol(hex_str, NULL, 16);
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	2210      	movs	r2, #16
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f006 f882 	bl	80086dc <strtol>
 80025d8:	4603      	mov	r3, r0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	72fb      	strb	r3, [r7, #11]
                    int8_t signed_val = *(int8_t*)&raw;
 80025de:	f107 030b 	add.w	r3, r7, #11
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                    turret2_target = (int32_t)signed_val * 10;
 80025e8:	f997 2043 	ldrsb.w	r2, [r7, #67]	@ 0x43
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002720 <HAL_UART_RxCpltCallback+0x524>)
 80025f8:	601a      	str	r2, [r3, #0]

                    int len = sprintf(msg_int, "Turret 2 target set to: %ld.%01ld deg\r\n", turret2_target / 10, labs(turret2_target % 10));
 80025fa:	4b49      	ldr	r3, [pc, #292]	@ (8002720 <HAL_UART_RxCpltCallback+0x524>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a40      	ldr	r2, [pc, #256]	@ (8002700 <HAL_UART_RxCpltCallback+0x504>)
 8002600:	fb82 1203 	smull	r1, r2, r2, r3
 8002604:	1092      	asrs	r2, r2, #2
 8002606:	17db      	asrs	r3, r3, #31
 8002608:	1ad0      	subs	r0, r2, r3
 800260a:	4b45      	ldr	r3, [pc, #276]	@ (8002720 <HAL_UART_RxCpltCallback+0x524>)
 800260c:	6819      	ldr	r1, [r3, #0]
 800260e:	4b3c      	ldr	r3, [pc, #240]	@ (8002700 <HAL_UART_RxCpltCallback+0x504>)
 8002610:	fb83 2301 	smull	r2, r3, r3, r1
 8002614:	109a      	asrs	r2, r3, #2
 8002616:	17cb      	asrs	r3, r1, #31
 8002618:	1ad2      	subs	r2, r2, r3
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	1aca      	subs	r2, r1, r3
 8002624:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8002628:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800262c:	4602      	mov	r2, r0
 800262e:	493d      	ldr	r1, [pc, #244]	@ (8002724 <HAL_UART_RxCpltCallback+0x528>)
 8002630:	4835      	ldr	r0, [pc, #212]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 8002632:	f006 fd75 	bl	8009120 <siprintf>
 8002636:	63f8      	str	r0, [r7, #60]	@ 0x3c
                    HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 8002638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800263a:	b29a      	uxth	r2, r3
 800263c:	f04f 33ff 	mov.w	r3, #4294967295
 8002640:	4931      	ldr	r1, [pc, #196]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 8002642:	4832      	ldr	r0, [pc, #200]	@ (800270c <HAL_UART_RxCpltCallback+0x510>)
 8002644:	f004 ffb3 	bl	80075ae <HAL_UART_Transmit>

                    current_state = STATE_2;
 8002648:	4b31      	ldr	r3, [pc, #196]	@ (8002710 <HAL_UART_RxCpltCallback+0x514>)
 800264a:	2202      	movs	r2, #2
 800264c:	701a      	strb	r2, [r3, #0]
                {
 800264e:	e0ba      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
                }

                // ---------------- LIDAR Start ----------------
                else if (strncmp((char*)rx_buffer, "LIDA", 4) == 0)
 8002650:	2204      	movs	r2, #4
 8002652:	4935      	ldr	r1, [pc, #212]	@ (8002728 <HAL_UART_RxCpltCallback+0x52c>)
 8002654:	4827      	ldr	r0, [pc, #156]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 8002656:	f006 fdd0 	bl	80091fa <strncmp>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d113      	bne.n	8002688 <HAL_UART_RxCpltCallback+0x48c>
                {
                    lidar_mode = 1;
 8002660:	4b32      	ldr	r3, [pc, #200]	@ (800272c <HAL_UART_RxCpltCallback+0x530>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
                    int len = sprintf(msg_int, "LIDAR streaming started.\r\n");
 8002666:	4932      	ldr	r1, [pc, #200]	@ (8002730 <HAL_UART_RxCpltCallback+0x534>)
 8002668:	4827      	ldr	r0, [pc, #156]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 800266a:	f006 fd59 	bl	8009120 <siprintf>
 800266e:	6278      	str	r0, [r7, #36]	@ 0x24
                    HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	b29a      	uxth	r2, r3
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	4923      	ldr	r1, [pc, #140]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 800267a:	4824      	ldr	r0, [pc, #144]	@ (800270c <HAL_UART_RxCpltCallback+0x510>)
 800267c:	f004 ff97 	bl	80075ae <HAL_UART_Transmit>
                    current_state = STATE_3;
 8002680:	4b23      	ldr	r3, [pc, #140]	@ (8002710 <HAL_UART_RxCpltCallback+0x514>)
 8002682:	2203      	movs	r2, #3
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e09e      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
                }
                // SERVO LAUNCH
                else if (strncmp((char*)rx_buffer, "SRUN", 4) == 0)
 8002688:	2204      	movs	r2, #4
 800268a:	492a      	ldr	r1, [pc, #168]	@ (8002734 <HAL_UART_RxCpltCallback+0x538>)
 800268c:	4819      	ldr	r0, [pc, #100]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 800268e:	f006 fdb4 	bl	80091fa <strncmp>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d110      	bne.n	80026ba <HAL_UART_RxCpltCallback+0x4be>
                {
                	current_state = STATE_5;
 8002698:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <HAL_UART_RxCpltCallback+0x514>)
 800269a:	2205      	movs	r2, #5
 800269c:	701a      	strb	r2, [r3, #0]
                    int len = sprintf(msg_int, "Servo routine starting\r\n");
 800269e:	4926      	ldr	r1, [pc, #152]	@ (8002738 <HAL_UART_RxCpltCallback+0x53c>)
 80026a0:	4819      	ldr	r0, [pc, #100]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 80026a2:	f006 fd3d 	bl	8009120 <siprintf>
 80026a6:	62b8      	str	r0, [r7, #40]	@ 0x28
                    HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 80026a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
 80026b0:	4915      	ldr	r1, [pc, #84]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 80026b2:	4816      	ldr	r0, [pc, #88]	@ (800270c <HAL_UART_RxCpltCallback+0x510>)
 80026b4:	f004 ff7b 	bl	80075ae <HAL_UART_Transmit>
 80026b8:	e085      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
                }
                else if (strncmp((char*)rx_buffer, "SCAN", 4) == 0)
 80026ba:	2204      	movs	r2, #4
 80026bc:	491f      	ldr	r1, [pc, #124]	@ (800273c <HAL_UART_RxCpltCallback+0x540>)
 80026be:	480d      	ldr	r0, [pc, #52]	@ (80026f4 <HAL_UART_RxCpltCallback+0x4f8>)
 80026c0:	f006 fd9b 	bl	80091fa <strncmp>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d13e      	bne.n	8002748 <HAL_UART_RxCpltCallback+0x54c>
                {
                	auto_mode = 1;
 80026ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002740 <HAL_UART_RxCpltCallback+0x544>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
                	current_state = STATE_6;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <HAL_UART_RxCpltCallback+0x514>)
 80026d2:	2206      	movs	r2, #6
 80026d4:	701a      	strb	r2, [r3, #0]
                    int len = sprintf(msg_int, "Starting scan\r\n");
 80026d6:	491b      	ldr	r1, [pc, #108]	@ (8002744 <HAL_UART_RxCpltCallback+0x548>)
 80026d8:	480b      	ldr	r0, [pc, #44]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 80026da:	f006 fd21 	bl	8009120 <siprintf>
 80026de:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 80026e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	4907      	ldr	r1, [pc, #28]	@ (8002708 <HAL_UART_RxCpltCallback+0x50c>)
 80026ea:	4808      	ldr	r0, [pc, #32]	@ (800270c <HAL_UART_RxCpltCallback+0x510>)
 80026ec:	f004 ff5f 	bl	80075ae <HAL_UART_Transmit>
 80026f0:	e069      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
 80026f2:	bf00      	nop
 80026f4:	2000060c 	.word	0x2000060c
 80026f8:	0800b7b0 	.word	0x0800b7b0
 80026fc:	2000054c 	.word	0x2000054c
 8002700:	66666667 	.word	0x66666667
 8002704:	0800b668 	.word	0x0800b668
 8002708:	20000614 	.word	0x20000614
 800270c:	200004f4 	.word	0x200004f4
 8002710:	2000055c 	.word	0x2000055c
 8002714:	0800b690 	.word	0x0800b690
 8002718:	20000554 	.word	0x20000554
 800271c:	0800b698 	.word	0x0800b698
 8002720:	20000558 	.word	0x20000558
 8002724:	0800b6b8 	.word	0x0800b6b8
 8002728:	0800b6e0 	.word	0x0800b6e0
 800272c:	2000024d 	.word	0x2000024d
 8002730:	0800b6e8 	.word	0x0800b6e8
 8002734:	0800b704 	.word	0x0800b704
 8002738:	0800b70c 	.word	0x0800b70c
 800273c:	0800b728 	.word	0x0800b728
 8002740:	2000055d 	.word	0x2000055d
 8002744:	0800b730 	.word	0x0800b730
                }
                else if (strncmp((char*)rx_buffer, "HEAD", 4) == 0) {
 8002748:	2204      	movs	r2, #4
 800274a:	4931      	ldr	r1, [pc, #196]	@ (8002810 <HAL_UART_RxCpltCallback+0x614>)
 800274c:	4831      	ldr	r0, [pc, #196]	@ (8002814 <HAL_UART_RxCpltCallback+0x618>)
 800274e:	f006 fd54 	bl	80091fa <strncmp>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d110      	bne.n	800277a <HAL_UART_RxCpltCallback+0x57e>
                    imu_mode = 1;
 8002758:	4b2f      	ldr	r3, [pc, #188]	@ (8002818 <HAL_UART_RxCpltCallback+0x61c>)
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
                    int len = sprintf(msg_int, "IMU heading stream started\r\n");
 800275e:	492f      	ldr	r1, [pc, #188]	@ (800281c <HAL_UART_RxCpltCallback+0x620>)
 8002760:	482f      	ldr	r0, [pc, #188]	@ (8002820 <HAL_UART_RxCpltCallback+0x624>)
 8002762:	f006 fcdd 	bl	8009120 <siprintf>
 8002766:	6338      	str	r0, [r7, #48]	@ 0x30
                    HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 8002768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276a:	b29a      	uxth	r2, r3
 800276c:	f04f 33ff 	mov.w	r3, #4294967295
 8002770:	492b      	ldr	r1, [pc, #172]	@ (8002820 <HAL_UART_RxCpltCallback+0x624>)
 8002772:	482c      	ldr	r0, [pc, #176]	@ (8002824 <HAL_UART_RxCpltCallback+0x628>)
 8002774:	f004 ff1b 	bl	80075ae <HAL_UART_Transmit>
 8002778:	e025      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
                }
                else if (strncmp((char*)rx_buffer, "STOP", 4) == 0) {
 800277a:	2204      	movs	r2, #4
 800277c:	492a      	ldr	r1, [pc, #168]	@ (8002828 <HAL_UART_RxCpltCallback+0x62c>)
 800277e:	4825      	ldr	r0, [pc, #148]	@ (8002814 <HAL_UART_RxCpltCallback+0x618>)
 8002780:	f006 fd3b 	bl	80091fa <strncmp>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d110      	bne.n	80027ac <HAL_UART_RxCpltCallback+0x5b0>
                    imu_mode = 0;
 800278a:	4b23      	ldr	r3, [pc, #140]	@ (8002818 <HAL_UART_RxCpltCallback+0x61c>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
                    int len = sprintf(msg_int, "Streaming stopped\r\n");
 8002790:	4926      	ldr	r1, [pc, #152]	@ (800282c <HAL_UART_RxCpltCallback+0x630>)
 8002792:	4823      	ldr	r0, [pc, #140]	@ (8002820 <HAL_UART_RxCpltCallback+0x624>)
 8002794:	f006 fcc4 	bl	8009120 <siprintf>
 8002798:	6378      	str	r0, [r7, #52]	@ 0x34
                    HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 800279a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800279c:	b29a      	uxth	r2, r3
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	491f      	ldr	r1, [pc, #124]	@ (8002820 <HAL_UART_RxCpltCallback+0x624>)
 80027a4:	481f      	ldr	r0, [pc, #124]	@ (8002824 <HAL_UART_RxCpltCallback+0x628>)
 80027a6:	f004 ff02 	bl	80075ae <HAL_UART_Transmit>
 80027aa:	e00c      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x5ca>
                }*/

                // ---------------- Unknown Command ----------------
                else
                {
                    int len = sprintf(msg_int, "Invalid command\r\n");
 80027ac:	4920      	ldr	r1, [pc, #128]	@ (8002830 <HAL_UART_RxCpltCallback+0x634>)
 80027ae:	481c      	ldr	r0, [pc, #112]	@ (8002820 <HAL_UART_RxCpltCallback+0x624>)
 80027b0:	f006 fcb6 	bl	8009120 <siprintf>
 80027b4:	63b8      	str	r0, [r7, #56]	@ 0x38
                    HAL_UART_Transmit(&huart1, (uint8_t*)msg_int, len, HAL_MAX_DELAY);
 80027b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	4918      	ldr	r1, [pc, #96]	@ (8002820 <HAL_UART_RxCpltCallback+0x624>)
 80027c0:	4818      	ldr	r0, [pc, #96]	@ (8002824 <HAL_UART_RxCpltCallback+0x628>)
 80027c2:	f004 fef4 	bl	80075ae <HAL_UART_Transmit>
                }
            }

            // Always reset buffer after processing a command
            memset(rx_buffer, 0, RX_BUFFER_SIZE);
 80027c6:	2207      	movs	r2, #7
 80027c8:	2100      	movs	r1, #0
 80027ca:	4812      	ldr	r0, [pc, #72]	@ (8002814 <HAL_UART_RxCpltCallback+0x618>)
 80027cc:	f006 fd0d 	bl	80091ea <memset>
            rx_index = 0;
 80027d0:	4b18      	ldr	r3, [pc, #96]	@ (8002834 <HAL_UART_RxCpltCallback+0x638>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e00c      	b.n	80027f2 <HAL_UART_RxCpltCallback+0x5f6>
        }
        else
        {
            rx_index++;
 80027d8:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <HAL_UART_RxCpltCallback+0x638>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	3301      	adds	r3, #1
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <HAL_UART_RxCpltCallback+0x638>)
 80027e2:	701a      	strb	r2, [r3, #0]
            if (rx_index >= RX_BUFFER_SIZE)
 80027e4:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <HAL_UART_RxCpltCallback+0x638>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b06      	cmp	r3, #6
 80027ea:	d902      	bls.n	80027f2 <HAL_UART_RxCpltCallback+0x5f6>
                rx_index = 0;
 80027ec:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <HAL_UART_RxCpltCallback+0x638>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
        }

        // Re-arm UART reception
        HAL_UART_Receive_IT(&huart1, &rx_buffer[rx_index], 1);
 80027f2:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <HAL_UART_RxCpltCallback+0x638>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_UART_RxCpltCallback+0x618>)
 80027fa:	4413      	add	r3, r2
 80027fc:	2201      	movs	r2, #1
 80027fe:	4619      	mov	r1, r3
 8002800:	4808      	ldr	r0, [pc, #32]	@ (8002824 <HAL_UART_RxCpltCallback+0x628>)
 8002802:	f004 ff5f 	bl	80076c4 <HAL_UART_Receive_IT>
    }
}
 8002806:	bf00      	nop
 8002808:	3758      	adds	r7, #88	@ 0x58
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	0800b740 	.word	0x0800b740
 8002814:	2000060c 	.word	0x2000060c
 8002818:	2000024c 	.word	0x2000024c
 800281c:	0800b748 	.word	0x0800b748
 8002820:	20000614 	.word	0x20000614
 8002824:	200004f4 	.word	0x200004f4
 8002828:	0800b768 	.word	0x0800b768
 800282c:	0800b770 	.word	0x0800b770
 8002830:	0800b784 	.word	0x0800b784
 8002834:	20000613 	.word	0x20000613

08002838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800283c:	b672      	cpsid	i
}
 800283e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <Error_Handler+0x8>

08002844 <set_duty>:
#include <stdlib.h>

#define PWM_MAX 2399

void set_duty(motor_t* motor, int32_t duty)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
    // Invert logic for turret1 using complementary outputs
    extern motor_t turret1;
    if (motor == &turret1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a8a      	ldr	r2, [pc, #552]	@ (8002a7c <set_duty+0x238>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10f      	bne.n	8002876 <set_duty+0x32>
    {
        if (duty > 0) duty = 100 - duty;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	dd04      	ble.n	8002866 <set_duty+0x22>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	e007      	b.n	8002876 <set_duty+0x32>
        else if (duty < 0) duty = -(100 + duty); // e.g. -30 → -70
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	da04      	bge.n	8002876 <set_duty+0x32>
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	603b      	str	r3, [r7, #0]
    }

    if (duty > 100) duty = 100;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b64      	cmp	r3, #100	@ 0x64
 800287a:	dd01      	ble.n	8002880 <set_duty+0x3c>
 800287c:	2364      	movs	r3, #100	@ 0x64
 800287e:	603b      	str	r3, [r7, #0]
    if (duty < -100) duty = -100;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002886:	da02      	bge.n	800288e <set_duty+0x4a>
 8002888:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800288c:	603b      	str	r3, [r7, #0]

    uint32_t pwm_val_fwd = motor->htim_forward->Init.Period * abs(duty) / 100;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	2a00      	cmp	r2, #0
 8002898:	bfb8      	it	lt
 800289a:	4252      	neglt	r2, r2
 800289c:	fb02 f303 	mul.w	r3, r2, r3
 80028a0:	4a77      	ldr	r2, [pc, #476]	@ (8002a80 <set_duty+0x23c>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	60fb      	str	r3, [r7, #12]
    uint32_t pwm_val_rev = motor->htim_reverse->Init.Period * abs(duty) / 100;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	2a00      	cmp	r2, #0
 80028b4:	bfb8      	it	lt
 80028b6:	4252      	neglt	r2, r2
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	4a70      	ldr	r2, [pc, #448]	@ (8002a80 <set_duty+0x23c>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	60bb      	str	r3, [r7, #8]
    motor->duty = duty;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	611a      	str	r2, [r3, #16]

    if (duty > 0)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	dd56      	ble.n	8002980 <set_duty+0x13c>
    {
        // Forward: PWM on IN1, LOW on IN2
        HAL_TIM_PWM_Start(motor->htim_forward, motor->channel_forward);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f003 ff43 	bl	8006768 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(motor->htim_reverse, motor->channel_reverse);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4610      	mov	r0, r2
 80028ee:	f003 ffeb 	bl	80068c8 <HAL_TIM_PWM_Stop>

        __HAL_TIM_SET_COMPARE(motor->htim_forward, motor->channel_forward, pwm_val_fwd);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <set_duty+0xc2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	635a      	str	r2, [r3, #52]	@ 0x34
 8002904:	e018      	b.n	8002938 <set_duty+0xf4>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b04      	cmp	r3, #4
 800290c:	d105      	bne.n	800291a <set_duty+0xd6>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6393      	str	r3, [r2, #56]	@ 0x38
 8002918:	e00e      	b.n	8002938 <set_duty+0xf4>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b08      	cmp	r3, #8
 8002920:	d105      	bne.n	800292e <set_duty+0xea>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800292c:	e004      	b.n	8002938 <set_duty+0xf4>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor->htim_reverse, motor->channel_reverse, 0);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <set_duty+0x108>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Stop(motor->htim_reverse, motor->channel_reverse);

        __HAL_TIM_SET_COMPARE(motor->htim_forward, motor->channel_forward, 0);
        __HAL_TIM_SET_COMPARE(motor->htim_reverse, motor->channel_reverse, 0);
    }
}
 800294a:	e0ce      	b.n	8002aea <set_duty+0x2a6>
        __HAL_TIM_SET_COMPARE(motor->htim_reverse, motor->channel_reverse, 0);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d105      	bne.n	8002960 <set_duty+0x11c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	2300      	movs	r3, #0
 800295c:	6393      	str	r3, [r2, #56]	@ 0x38
 800295e:	e0c4      	b.n	8002aea <set_duty+0x2a6>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d105      	bne.n	8002974 <set_duty+0x130>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2300      	movs	r3, #0
 8002970:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002972:	e0ba      	b.n	8002aea <set_duty+0x2a6>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800297e:	e0b4      	b.n	8002aea <set_duty+0x2a6>
    else if (duty < 0)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	da56      	bge.n	8002a34 <set_duty+0x1f0>
        HAL_TIM_PWM_Stop(motor->htim_forward, motor->channel_forward);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f003 ff99 	bl	80068c8 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Start(motor->htim_reverse, motor->channel_reverse);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f003 fee1 	bl	8006768 <HAL_TIM_PWM_Start>
        __HAL_TIM_SET_COMPARE(motor->htim_forward, motor->channel_forward, 0);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d105      	bne.n	80029ba <set_duty+0x176>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80029b8:	e018      	b.n	80029ec <set_duty+0x1a8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d105      	bne.n	80029ce <set_duty+0x18a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2300      	movs	r3, #0
 80029ca:	6393      	str	r3, [r2, #56]	@ 0x38
 80029cc:	e00e      	b.n	80029ec <set_duty+0x1a8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d105      	bne.n	80029e2 <set_duty+0x19e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2300      	movs	r3, #0
 80029de:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80029e0:	e004      	b.n	80029ec <set_duty+0x1a8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2300      	movs	r3, #0
 80029ea:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor->htim_reverse, motor->channel_reverse, pwm_val_rev);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d105      	bne.n	8002a00 <set_duty+0x1bc>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80029fe:	e074      	b.n	8002aea <set_duty+0x2a6>
        __HAL_TIM_SET_COMPARE(motor->htim_reverse, motor->channel_reverse, pwm_val_rev);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d105      	bne.n	8002a14 <set_duty+0x1d0>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a12:	e06a      	b.n	8002aea <set_duty+0x2a6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d105      	bne.n	8002a28 <set_duty+0x1e4>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a26:	e060      	b.n	8002aea <set_duty+0x2a6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002a32:	e05a      	b.n	8002aea <set_duty+0x2a6>
        HAL_TIM_PWM_Stop(motor->htim_forward, motor->channel_forward);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f003 ff42 	bl	80068c8 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Stop(motor->htim_reverse, motor->channel_reverse);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f003 ff3a 	bl	80068c8 <HAL_TIM_PWM_Stop>
        __HAL_TIM_SET_COMPARE(motor->htim_forward, motor->channel_forward, 0);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <set_duty+0x224>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a66:	e01c      	b.n	8002aa2 <set_duty+0x25e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d109      	bne.n	8002a84 <set_duty+0x240>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	2300      	movs	r3, #0
 8002a78:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a7a:	e012      	b.n	8002aa2 <set_duty+0x25e>
 8002a7c:	2000001c 	.word	0x2000001c
 8002a80:	51eb851f 	.word	0x51eb851f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d105      	bne.n	8002a98 <set_duty+0x254>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2300      	movs	r3, #0
 8002a94:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a96:	e004      	b.n	8002aa2 <set_duty+0x25e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor->htim_reverse, motor->channel_reverse, 0);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d105      	bne.n	8002ab6 <set_duty+0x272>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002ab4:	e019      	b.n	8002aea <set_duty+0x2a6>
        __HAL_TIM_SET_COMPARE(motor->htim_reverse, motor->channel_reverse, 0);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d105      	bne.n	8002aca <set_duty+0x286>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002ac8:	e00f      	b.n	8002aea <set_duty+0x2a6>
        __HAL_TIM_SET_COMPARE(motor->htim_reverse, motor->channel_reverse, 0);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d105      	bne.n	8002ade <set_duty+0x29a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002adc:	e005      	b.n	8002aea <set_duty+0x2a6>
        __HAL_TIM_SET_COMPARE(motor->htim_reverse, motor->channel_reverse, 0);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002ae8:	e7ff      	b.n	8002aea <set_duty+0x2a6>
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop

08002af4 <move_to>:

void move_to(motor_t* p_mot, int32_t target, int32_t actual)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
    int32_t error = target - actual;
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	61bb      	str	r3, [r7, #24]
    int32_t duty = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
        set_duty(p_mot, 0); // Stop the motor
        return;
    }*/

    // Proportional gain (tune as needed)
    float Kp = 0.9f;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <move_to+0x88>)
 8002b0e:	617b      	str	r3, [r7, #20]

    // Proportional control calculation
    duty = (int32_t)(Kp * error);
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b26:	ee17 3a90 	vmov	r3, s15
 8002b2a:	61fb      	str	r3, [r7, #28]

    // Apply minimum duty to overcome static friction
    if (duty > 0 && duty < 50)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	dd05      	ble.n	8002b3e <move_to+0x4a>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2b31      	cmp	r3, #49	@ 0x31
 8002b36:	dc02      	bgt.n	8002b3e <move_to+0x4a>
        duty = 50;
 8002b38:	2332      	movs	r3, #50	@ 0x32
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	e009      	b.n	8002b52 <move_to+0x5e>
    else if (duty < 0 && duty > -50)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	da06      	bge.n	8002b52 <move_to+0x5e>
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f113 0f31 	cmn.w	r3, #49	@ 0x31
 8002b4a:	db02      	blt.n	8002b52 <move_to+0x5e>
        duty = -50;
 8002b4c:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8002b50:	61fb      	str	r3, [r7, #28]

    // Clamp to safe duty limits
    if (duty > 70) duty = 70;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	2b46      	cmp	r3, #70	@ 0x46
 8002b56:	dd01      	ble.n	8002b5c <move_to+0x68>
 8002b58:	2346      	movs	r3, #70	@ 0x46
 8002b5a:	61fb      	str	r3, [r7, #28]
    if (duty < -70) duty = -70;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 8002b62:	da02      	bge.n	8002b6a <move_to+0x76>
 8002b64:	f06f 0345 	mvn.w	r3, #69	@ 0x45
 8002b68:	61fb      	str	r3, [r7, #28]

    set_duty(p_mot, duty);
 8002b6a:	69f9      	ldr	r1, [r7, #28]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff fe69 	bl	8002844 <set_duty>
}
 8002b72:	bf00      	nop
 8002b74:	3720      	adds	r7, #32
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	3f666666 	.word	0x3f666666

08002b80 <enable>:
    HAL_TIM_PWM_Stop(p_mot->htim_forward, p_mot->channel_forward);
    HAL_TIM_PWM_Stop(p_mot->htim_reverse, p_mot->channel_reverse);
}

void enable(motor_t* p_mot)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(p_mot->htim_forward, p_mot->channel_forward);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f003 fde8 	bl	8006768 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(p_mot->htim_reverse, p_mot->channel_reverse);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f003 fde0 	bl	8006768 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(p_mot->htim_forward, p_mot->channel_forward, PWM_MAX);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d106      	bne.n	8002bbe <enable+0x3e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f640 125f 	movw	r2, #2399	@ 0x95f
 8002bba:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bbc:	e01b      	b.n	8002bf6 <enable+0x76>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d106      	bne.n	8002bd4 <enable+0x54>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	f640 135f 	movw	r3, #2399	@ 0x95f
 8002bd0:	6393      	str	r3, [r2, #56]	@ 0x38
 8002bd2:	e010      	b.n	8002bf6 <enable+0x76>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d106      	bne.n	8002bea <enable+0x6a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	f640 135f 	movw	r3, #2399	@ 0x95f
 8002be6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002be8:	e005      	b.n	8002bf6 <enable+0x76>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f640 135f 	movw	r3, #2399	@ 0x95f
 8002bf4:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(p_mot->htim_reverse, p_mot->channel_reverse, PWM_MAX);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <enable+0x8c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f640 125f 	movw	r2, #2399	@ 0x95f
 8002c08:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002c0a:	e01b      	b.n	8002c44 <enable+0xc4>
    __HAL_TIM_SET_COMPARE(p_mot->htim_reverse, p_mot->channel_reverse, PWM_MAX);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d106      	bne.n	8002c22 <enable+0xa2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	f640 135f 	movw	r3, #2399	@ 0x95f
 8002c1e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002c20:	e010      	b.n	8002c44 <enable+0xc4>
    __HAL_TIM_SET_COMPARE(p_mot->htim_reverse, p_mot->channel_reverse, PWM_MAX);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d106      	bne.n	8002c38 <enable+0xb8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	f640 135f 	movw	r3, #2399	@ 0x95f
 8002c34:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002c36:	e005      	b.n	8002c44 <enable+0xc4>
    __HAL_TIM_SET_COMPARE(p_mot->htim_reverse, p_mot->channel_reverse, PWM_MAX);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	f640 135f 	movw	r3, #2399	@ 0x95f
 8002c42:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c62:	4b0d      	ldr	r3, [pc, #52]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	4a08      	ldr	r2, [pc, #32]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800

08002c9c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	@ 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a17      	ldr	r2, [pc, #92]	@ (8002d18 <HAL_ADC_MspInit+0x7c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d127      	bne.n	8002d0e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <HAL_ADC_MspInit+0x80>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	4a15      	ldr	r2, [pc, #84]	@ (8002d1c <HAL_ADC_MspInit+0x80>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cce:	4b13      	ldr	r3, [pc, #76]	@ (8002d1c <HAL_ADC_MspInit+0x80>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b0f      	ldr	r3, [pc, #60]	@ (8002d1c <HAL_ADC_MspInit+0x80>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8002d1c <HAL_ADC_MspInit+0x80>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cea:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <HAL_ADC_MspInit+0x80>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	4805      	ldr	r0, [pc, #20]	@ (8002d20 <HAL_ADC_MspInit+0x84>)
 8002d0a:	f001 f889 	bl	8003e20 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d0e:	bf00      	nop
 8002d10:	3728      	adds	r7, #40	@ 0x28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40012000 	.word	0x40012000
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40020000 	.word	0x40020000

08002d24 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	@ 0x30
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	f107 031c 	add.w	r3, r7, #28
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a3a      	ldr	r2, [pc, #232]	@ (8002e2c <HAL_I2C_MspInit+0x108>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d12c      	bne.n	8002da0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	4a38      	ldr	r2, [pc, #224]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002d50:	f043 0302 	orr.w	r3, r3, #2
 8002d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d56:	4b36      	ldr	r3, [pc, #216]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d62:	23c0      	movs	r3, #192	@ 0xc0
 8002d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d66:	2312      	movs	r3, #18
 8002d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d72:	2304      	movs	r3, #4
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d76:	f107 031c 	add.w	r3, r7, #28
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	482d      	ldr	r0, [pc, #180]	@ (8002e34 <HAL_I2C_MspInit+0x110>)
 8002d7e:	f001 f84f 	bl	8003e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	4b2a      	ldr	r3, [pc, #168]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	4a29      	ldr	r2, [pc, #164]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002d8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d92:	4b27      	ldr	r3, [pc, #156]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d9e:	e041      	b.n	8002e24 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a24      	ldr	r2, [pc, #144]	@ (8002e38 <HAL_I2C_MspInit+0x114>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d13c      	bne.n	8002e24 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	4b20      	ldr	r3, [pc, #128]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dba:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dcc:	2312      	movs	r3, #18
 8002dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dd8:	2304      	movs	r3, #4
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ddc:	f107 031c 	add.w	r3, r7, #28
 8002de0:	4619      	mov	r1, r3
 8002de2:	4814      	ldr	r0, [pc, #80]	@ (8002e34 <HAL_I2C_MspInit+0x110>)
 8002de4:	f001 f81c 	bl	8003e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002de8:	2308      	movs	r3, #8
 8002dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dec:	2312      	movs	r3, #18
 8002dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df4:	2303      	movs	r3, #3
 8002df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002df8:	2309      	movs	r3, #9
 8002dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	4619      	mov	r1, r3
 8002e02:	480c      	ldr	r0, [pc, #48]	@ (8002e34 <HAL_I2C_MspInit+0x110>)
 8002e04:	f001 f80c 	bl	8003e20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	4a07      	ldr	r2, [pc, #28]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002e12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e16:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e18:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <HAL_I2C_MspInit+0x10c>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3730      	adds	r7, #48	@ 0x30
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40005400 	.word	0x40005400
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40005800 	.word	0x40005800

08002e3c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a15      	ldr	r2, [pc, #84]	@ (8002ea0 <HAL_TIM_PWM_MspInit+0x64>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10e      	bne.n	8002e6c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b14      	ldr	r3, [pc, #80]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x68>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	4a13      	ldr	r2, [pc, #76]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x68>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x68>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002e6a:	e012      	b.n	8002e92 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM9)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea8 <HAL_TIM_PWM_MspInit+0x6c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10d      	bne.n	8002e92 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x68>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x68>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e86:	4b07      	ldr	r3, [pc, #28]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x68>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40014000 	.word	0x40014000

08002eac <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08c      	sub	sp, #48	@ 0x30
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 031c 	add.w	r3, r7, #28
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ecc:	d12d      	bne.n	8002f2a <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	4b30      	ldr	r3, [pc, #192]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ede:	4b2d      	ldr	r3, [pc, #180]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	61bb      	str	r3, [r7, #24]
 8002ee8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	4b29      	ldr	r3, [pc, #164]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	4a28      	ldr	r2, [pc, #160]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efa:	4b26      	ldr	r3, [pc, #152]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002f06:	f248 0302 	movw	r3, #32770	@ 0x8002
 8002f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1c:	f107 031c 	add.w	r3, r7, #28
 8002f20:	4619      	mov	r1, r3
 8002f22:	481d      	ldr	r0, [pc, #116]	@ (8002f98 <HAL_TIM_Encoder_MspInit+0xec>)
 8002f24:	f000 ff7c 	bl	8003e20 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f28:	e030      	b.n	8002f8c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM3)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002f9c <HAL_TIM_Encoder_MspInit+0xf0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d12b      	bne.n	8002f8c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	4a15      	ldr	r2, [pc, #84]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002f3e:	f043 0302 	orr.w	r3, r3, #2
 8002f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f44:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	4a0e      	ldr	r2, [pc, #56]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f60:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f6c:	2330      	movs	r3, #48	@ 0x30
 8002f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f80:	f107 031c 	add.w	r3, r7, #28
 8002f84:	4619      	mov	r1, r3
 8002f86:	4806      	ldr	r0, [pc, #24]	@ (8002fa0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002f88:	f000 ff4a 	bl	8003e20 <HAL_GPIO_Init>
}
 8002f8c:	bf00      	nop
 8002f8e:	3730      	adds	r7, #48	@ 0x30
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020000 	.word	0x40020000
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40020400 	.word	0x40020400

08002fa4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a15      	ldr	r2, [pc, #84]	@ (8003008 <HAL_TIM_Base_MspInit+0x64>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <HAL_TIM_Base_MspInit+0x68>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	4a13      	ldr	r2, [pc, #76]	@ (800300c <HAL_TIM_Base_MspInit+0x68>)
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <HAL_TIM_Base_MspInit+0x68>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002fd2:	e012      	b.n	8002ffa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003010 <HAL_TIM_Base_MspInit+0x6c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10d      	bne.n	8002ffa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800300c <HAL_TIM_Base_MspInit+0x68>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	4a09      	ldr	r2, [pc, #36]	@ (800300c <HAL_TIM_Base_MspInit+0x68>)
 8002fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fee:	4b07      	ldr	r3, [pc, #28]	@ (800300c <HAL_TIM_Base_MspInit+0x68>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40014400 	.word	0x40014400
 800300c:	40023800 	.word	0x40023800
 8003010:	40014800 	.word	0x40014800

08003014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	@ 0x30
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 031c 	add.w	r3, r7, #28
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a58      	ldr	r2, [pc, #352]	@ (8003194 <HAL_TIM_MspPostInit+0x180>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d13d      	bne.n	80030b2 <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	4b57      	ldr	r3, [pc, #348]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	4a56      	ldr	r2, [pc, #344]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	6313      	str	r3, [r2, #48]	@ 0x30
 8003046:	4b54      	ldr	r3, [pc, #336]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	4b50      	ldr	r3, [pc, #320]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	4a4f      	ldr	r2, [pc, #316]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6313      	str	r3, [r2, #48]	@ 0x30
 8003062:	4b4d      	ldr	r3, [pc, #308]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	697b      	ldr	r3, [r7, #20]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800306e:	2303      	movs	r3, #3
 8003070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003072:	2302      	movs	r3, #2
 8003074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307a:	2300      	movs	r3, #0
 800307c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800307e:	2301      	movs	r3, #1
 8003080:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003082:	f107 031c 	add.w	r3, r7, #28
 8003086:	4619      	mov	r1, r3
 8003088:	4844      	ldr	r0, [pc, #272]	@ (800319c <HAL_TIM_MspPostInit+0x188>)
 800308a:	f000 fec9 	bl	8003e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800308e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8003092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030a0:	2301      	movs	r3, #1
 80030a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a4:	f107 031c 	add.w	r3, r7, #28
 80030a8:	4619      	mov	r1, r3
 80030aa:	483d      	ldr	r0, [pc, #244]	@ (80031a0 <HAL_TIM_MspPostInit+0x18c>)
 80030ac:	f000 feb8 	bl	8003e20 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM11_MspPostInit 1 */

    /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80030b0:	e06c      	b.n	800318c <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM9)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3b      	ldr	r2, [pc, #236]	@ (80031a4 <HAL_TIM_MspPostInit+0x190>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d11e      	bne.n	80030fa <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	4b35      	ldr	r3, [pc, #212]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c4:	4a34      	ldr	r2, [pc, #208]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80030cc:	4b32      	ldr	r3, [pc, #200]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030d8:	230c      	movs	r3, #12
 80030da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e4:	2300      	movs	r3, #0
 80030e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80030e8:	2303      	movs	r3, #3
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	4619      	mov	r1, r3
 80030f2:	482b      	ldr	r0, [pc, #172]	@ (80031a0 <HAL_TIM_MspPostInit+0x18c>)
 80030f4:	f000 fe94 	bl	8003e20 <HAL_GPIO_Init>
}
 80030f8:	e048      	b.n	800318c <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM10)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2a      	ldr	r2, [pc, #168]	@ (80031a8 <HAL_TIM_MspPostInit+0x194>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d11f      	bne.n	8003144 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	4b23      	ldr	r3, [pc, #140]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	4a22      	ldr	r2, [pc, #136]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 800310e:	f043 0302 	orr.w	r3, r3, #2
 8003112:	6313      	str	r3, [r2, #48]	@ 0x30
 8003114:	4b20      	ldr	r3, [pc, #128]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003120:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003132:	2303      	movs	r3, #3
 8003134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003136:	f107 031c 	add.w	r3, r7, #28
 800313a:	4619      	mov	r1, r3
 800313c:	4817      	ldr	r0, [pc, #92]	@ (800319c <HAL_TIM_MspPostInit+0x188>)
 800313e:	f000 fe6f 	bl	8003e20 <HAL_GPIO_Init>
}
 8003142:	e023      	b.n	800318c <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM11)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a18      	ldr	r2, [pc, #96]	@ (80031ac <HAL_TIM_MspPostInit+0x198>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d11e      	bne.n	800318c <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	4a10      	ldr	r2, [pc, #64]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 8003158:	f043 0302 	orr.w	r3, r3, #2
 800315c:	6313      	str	r3, [r2, #48]	@ 0x30
 800315e:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <HAL_TIM_MspPostInit+0x184>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800316a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800317c:	2303      	movs	r3, #3
 800317e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003180:	f107 031c 	add.w	r3, r7, #28
 8003184:	4619      	mov	r1, r3
 8003186:	4805      	ldr	r0, [pc, #20]	@ (800319c <HAL_TIM_MspPostInit+0x188>)
 8003188:	f000 fe4a 	bl	8003e20 <HAL_GPIO_Init>
}
 800318c:	bf00      	nop
 800318e:	3730      	adds	r7, #48	@ 0x30
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40010000 	.word	0x40010000
 8003198:	40023800 	.word	0x40023800
 800319c:	40020400 	.word	0x40020400
 80031a0:	40020000 	.word	0x40020000
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800

080031b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	@ 0x28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <HAL_UART_MspInit+0x94>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d134      	bne.n	800323c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003248 <HAL_UART_MspInit+0x98>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	4a1b      	ldr	r2, [pc, #108]	@ (8003248 <HAL_UART_MspInit+0x98>)
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031e2:	4b19      	ldr	r3, [pc, #100]	@ (8003248 <HAL_UART_MspInit+0x98>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <HAL_UART_MspInit+0x98>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	4a14      	ldr	r2, [pc, #80]	@ (8003248 <HAL_UART_MspInit+0x98>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fe:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <HAL_UART_MspInit+0x98>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800320a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800320e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003218:	2303      	movs	r3, #3
 800321a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800321c:	2307      	movs	r3, #7
 800321e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	4619      	mov	r1, r3
 8003226:	4809      	ldr	r0, [pc, #36]	@ (800324c <HAL_UART_MspInit+0x9c>)
 8003228:	f000 fdfa 	bl	8003e20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800322c:	2200      	movs	r2, #0
 800322e:	2100      	movs	r1, #0
 8003230:	2025      	movs	r0, #37	@ 0x25
 8003232:	f000 fd2c 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003236:	2025      	movs	r0, #37	@ 0x25
 8003238:	f000 fd45 	bl	8003cc6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800323c:	bf00      	nop
 800323e:	3728      	adds	r7, #40	@ 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40011000 	.word	0x40011000
 8003248:	40023800 	.word	0x40023800
 800324c:	40020000 	.word	0x40020000

08003250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003254:	bf00      	nop
 8003256:	e7fd      	b.n	8003254 <NMI_Handler+0x4>

08003258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800325c:	bf00      	nop
 800325e:	e7fd      	b.n	800325c <HardFault_Handler+0x4>

08003260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003264:	bf00      	nop
 8003266:	e7fd      	b.n	8003264 <MemManage_Handler+0x4>

08003268 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800326c:	bf00      	nop
 800326e:	e7fd      	b.n	800326c <BusFault_Handler+0x4>

08003270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003274:	bf00      	nop
 8003276:	e7fd      	b.n	8003274 <UsageFault_Handler+0x4>

08003278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a6:	f000 f961 	bl	800356c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032b4:	4802      	ldr	r0, [pc, #8]	@ (80032c0 <USART1_IRQHandler+0x10>)
 80032b6:	f004 fa2b 	bl	8007710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	200004f4 	.word	0x200004f4

080032c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return 1;
 80032c8:	2301      	movs	r3, #1
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <_kill>:

int _kill(int pid, int sig)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032de:	f005 ffe9 	bl	80092b4 <__errno>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2216      	movs	r2, #22
 80032e6:	601a      	str	r2, [r3, #0]
  return -1;
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_exit>:

void _exit (int status)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ffe7 	bl	80032d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003306:	bf00      	nop
 8003308:	e7fd      	b.n	8003306 <_exit+0x12>

0800330a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e00a      	b.n	8003332 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800331c:	f3af 8000 	nop.w
 8003320:	4601      	mov	r1, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	60ba      	str	r2, [r7, #8]
 8003328:	b2ca      	uxtb	r2, r1
 800332a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	3301      	adds	r3, #1
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	dbf0      	blt.n	800331c <_read+0x12>
  }

  return len;
 800333a:	687b      	ldr	r3, [r7, #4]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	e009      	b.n	800336a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	60ba      	str	r2, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3301      	adds	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	dbf1      	blt.n	8003356 <_write+0x12>
  }
  return len;
 8003372:	687b      	ldr	r3, [r7, #4]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_close>:

int _close(int file)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033a4:	605a      	str	r2, [r3, #4]
  return 0;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <_isatty>:

int _isatty(int file)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033bc:	2301      	movs	r3, #1
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033ec:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <_sbrk+0x5c>)
 80033ee:	4b15      	ldr	r3, [pc, #84]	@ (8003444 <_sbrk+0x60>)
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033f8:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <_sbrk+0x64>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003400:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <_sbrk+0x64>)
 8003402:	4a12      	ldr	r2, [pc, #72]	@ (800344c <_sbrk+0x68>)
 8003404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003406:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <_sbrk+0x64>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	429a      	cmp	r2, r3
 8003412:	d207      	bcs.n	8003424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003414:	f005 ff4e 	bl	80092b4 <__errno>
 8003418:	4603      	mov	r3, r0
 800341a:	220c      	movs	r2, #12
 800341c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
 8003422:	e009      	b.n	8003438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003424:	4b08      	ldr	r3, [pc, #32]	@ (8003448 <_sbrk+0x64>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800342a:	4b07      	ldr	r3, [pc, #28]	@ (8003448 <_sbrk+0x64>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	4a05      	ldr	r2, [pc, #20]	@ (8003448 <_sbrk+0x64>)
 8003434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003436:	68fb      	ldr	r3, [r7, #12]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20020000 	.word	0x20020000
 8003444:	00000400 	.word	0x00000400
 8003448:	200006a8 	.word	0x200006a8
 800344c:	20000800 	.word	0x20000800

08003450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003454:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <SystemInit+0x20>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345a:	4a05      	ldr	r2, [pc, #20]	@ (8003470 <SystemInit+0x20>)
 800345c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    		 /* set stack pointer */
 8003474:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003478:	f7ff ffea 	bl	8003450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800347c:	480c      	ldr	r0, [pc, #48]	@ (80034b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800347e:	490d      	ldr	r1, [pc, #52]	@ (80034b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003480:	4a0d      	ldr	r2, [pc, #52]	@ (80034b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003484:	e002      	b.n	800348c <LoopCopyDataInit>

08003486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348a:	3304      	adds	r3, #4

0800348c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800348c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800348e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003490:	d3f9      	bcc.n	8003486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003492:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003494:	4c0a      	ldr	r4, [pc, #40]	@ (80034c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003498:	e001      	b.n	800349e <LoopFillZerobss>

0800349a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800349c:	3204      	adds	r2, #4

0800349e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800349e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a0:	d3fb      	bcc.n	800349a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034a2:	f005 ff0d 	bl	80092c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034a6:	f7fd fe3b 	bl	8001120 <main>
  bx  lr    
 80034aa:	4770      	bx	lr
Reset_Handler:  ldr   sp, =_estack    		 /* set stack pointer */
 80034ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034b4:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80034b8:	0800bb30 	.word	0x0800bb30
  ldr r2, =_sbss
 80034bc:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 80034c0:	200007fc 	.word	0x200007fc

080034c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034c4:	e7fe      	b.n	80034c4 <ADC_IRQHandler>
	...

080034c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003508 <HAL_Init+0x40>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003508 <HAL_Init+0x40>)
 80034d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_Init+0x40>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003508 <HAL_Init+0x40>)
 80034de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034e4:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <HAL_Init+0x40>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a07      	ldr	r2, [pc, #28]	@ (8003508 <HAL_Init+0x40>)
 80034ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034f0:	2003      	movs	r0, #3
 80034f2:	f000 fbc1 	bl	8003c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034f6:	200f      	movs	r0, #15
 80034f8:	f000 f808 	bl	800350c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034fc:	f7ff fba6 	bl	8002c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023c00 	.word	0x40023c00

0800350c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003514:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <HAL_InitTick+0x54>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <HAL_InitTick+0x58>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	4619      	mov	r1, r3
 800351e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003522:	fbb3 f3f1 	udiv	r3, r3, r1
 8003526:	fbb2 f3f3 	udiv	r3, r2, r3
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fbd9 	bl	8003ce2 <HAL_SYSTICK_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e00e      	b.n	8003558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b0f      	cmp	r3, #15
 800353e:	d80a      	bhi.n	8003556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003540:	2200      	movs	r2, #0
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	f04f 30ff 	mov.w	r0, #4294967295
 8003548:	f000 fba1 	bl	8003c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800354c:	4a06      	ldr	r2, [pc, #24]	@ (8003568 <HAL_InitTick+0x5c>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e000      	b.n	8003558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20000058 	.word	0x20000058
 8003564:	20000060 	.word	0x20000060
 8003568:	2000005c 	.word	0x2000005c

0800356c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_IncTick+0x20>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <HAL_IncTick+0x24>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4413      	add	r3, r2
 800357c:	4a04      	ldr	r2, [pc, #16]	@ (8003590 <HAL_IncTick+0x24>)
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000060 	.word	0x20000060
 8003590:	200006ac 	.word	0x200006ac

08003594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return uwTick;
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <HAL_GetTick+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	200006ac 	.word	0x200006ac

080035ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff ffee 	bl	8003594 <HAL_GetTick>
 80035b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d005      	beq.n	80035d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035c6:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <HAL_Delay+0x44>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035d2:	bf00      	nop
 80035d4:	f7ff ffde 	bl	8003594 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d8f7      	bhi.n	80035d4 <HAL_Delay+0x28>
  {
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000060 	.word	0x20000060

080035f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e033      	b.n	8003672 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fb42 	bl	8002c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d118      	bne.n	8003664 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800363a:	f023 0302 	bic.w	r3, r3, #2
 800363e:	f043 0202 	orr.w	r2, r3, #2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f94a 	bl	80038e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	@ 0x40
 8003662:	e001      	b.n	8003668 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x1c>
 8003694:	2302      	movs	r3, #2
 8003696:	e113      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x244>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b09      	cmp	r3, #9
 80036a6:	d925      	bls.n	80036f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68d9      	ldr	r1, [r3, #12]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	3b1e      	subs	r3, #30
 80036be:	2207      	movs	r2, #7
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43da      	mvns	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	400a      	ands	r2, r1
 80036cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68d9      	ldr	r1, [r3, #12]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	4603      	mov	r3, r0
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4403      	add	r3, r0
 80036e6:	3b1e      	subs	r3, #30
 80036e8:	409a      	lsls	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e022      	b.n	800373a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6919      	ldr	r1, [r3, #16]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	2207      	movs	r2, #7
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43da      	mvns	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	400a      	ands	r2, r1
 8003716:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6919      	ldr	r1, [r3, #16]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	b29b      	uxth	r3, r3
 8003728:	4618      	mov	r0, r3
 800372a:	4603      	mov	r3, r0
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4403      	add	r3, r0
 8003730:	409a      	lsls	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d824      	bhi.n	800378c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	3b05      	subs	r3, #5
 8003754:	221f      	movs	r2, #31
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	400a      	ands	r2, r1
 8003762:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	4618      	mov	r0, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	3b05      	subs	r3, #5
 800377e:	fa00 f203 	lsl.w	r2, r0, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	635a      	str	r2, [r3, #52]	@ 0x34
 800378a:	e04c      	b.n	8003826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b0c      	cmp	r3, #12
 8003792:	d824      	bhi.n	80037de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	3b23      	subs	r3, #35	@ 0x23
 80037a6:	221f      	movs	r2, #31
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43da      	mvns	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	400a      	ands	r2, r1
 80037b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	4618      	mov	r0, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	3b23      	subs	r3, #35	@ 0x23
 80037d0:	fa00 f203 	lsl.w	r2, r0, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30
 80037dc:	e023      	b.n	8003826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	3b41      	subs	r3, #65	@ 0x41
 80037f0:	221f      	movs	r2, #31
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43da      	mvns	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	400a      	ands	r2, r1
 80037fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	4618      	mov	r0, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	3b41      	subs	r3, #65	@ 0x41
 800381a:	fa00 f203 	lsl.w	r2, r0, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003826:	4b29      	ldr	r3, [pc, #164]	@ (80038cc <HAL_ADC_ConfigChannel+0x250>)
 8003828:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a28      	ldr	r2, [pc, #160]	@ (80038d0 <HAL_ADC_ConfigChannel+0x254>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d10f      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x1d8>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b12      	cmp	r3, #18
 800383a:	d10b      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <HAL_ADC_ConfigChannel+0x254>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d12b      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x23a>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1c      	ldr	r2, [pc, #112]	@ (80038d4 <HAL_ADC_ConfigChannel+0x258>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x1f4>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b11      	cmp	r3, #17
 800386e:	d122      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a11      	ldr	r2, [pc, #68]	@ (80038d4 <HAL_ADC_ConfigChannel+0x258>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d111      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003892:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <HAL_ADC_ConfigChannel+0x25c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a11      	ldr	r2, [pc, #68]	@ (80038dc <HAL_ADC_ConfigChannel+0x260>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	0c9a      	lsrs	r2, r3, #18
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80038a8:	e002      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f9      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40012300 	.word	0x40012300
 80038d0:	40012000 	.word	0x40012000
 80038d4:	10000012 	.word	0x10000012
 80038d8:	20000058 	.word	0x20000058
 80038dc:	431bde83 	.word	0x431bde83

080038e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038e8:	4b79      	ldr	r3, [pc, #484]	@ (8003ad0 <ADC_Init+0x1f0>)
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	431a      	orrs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	021a      	lsls	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800395a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6899      	ldr	r1, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	4a58      	ldr	r2, [pc, #352]	@ (8003ad4 <ADC_Init+0x1f4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d022      	beq.n	80039be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	e00f      	b.n	80039de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80039cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0202 	bic.w	r2, r2, #2
 80039ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7e1b      	ldrb	r3, [r3, #24]
 80039f8:	005a      	lsls	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01b      	beq.n	8003a44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003a2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6859      	ldr	r1, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	3b01      	subs	r3, #1
 8003a38:	035a      	lsls	r2, r3, #13
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	e007      	b.n	8003a54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	051a      	lsls	r2, r3, #20
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6899      	ldr	r1, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a96:	025a      	lsls	r2, r3, #9
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6899      	ldr	r1, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	029a      	lsls	r2, r3, #10
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40012300 	.word	0x40012300
 8003ad4:	0f000001 	.word	0x0f000001

08003ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <__NVIC_SetPriorityGrouping+0x44>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003af4:	4013      	ands	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0a:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	60d3      	str	r3, [r2, #12]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b24:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <__NVIC_GetPriorityGrouping+0x18>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	f003 0307 	and.w	r3, r3, #7
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	db0b      	blt.n	8003b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	f003 021f 	and.w	r2, r3, #31
 8003b54:	4907      	ldr	r1, [pc, #28]	@ (8003b74 <__NVIC_EnableIRQ+0x38>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db0a      	blt.n	8003ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	490c      	ldr	r1, [pc, #48]	@ (8003bc4 <__NVIC_SetPriority+0x4c>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba0:	e00a      	b.n	8003bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4908      	ldr	r1, [pc, #32]	@ (8003bc8 <__NVIC_SetPriority+0x50>)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	761a      	strb	r2, [r3, #24]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	@ 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f1c3 0307 	rsb	r3, r3, #7
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	bf28      	it	cs
 8003bea:	2304      	movcs	r3, #4
 8003bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d902      	bls.n	8003bfc <NVIC_EncodePriority+0x30>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3b03      	subs	r3, #3
 8003bfa:	e000      	b.n	8003bfe <NVIC_EncodePriority+0x32>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	401a      	ands	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c14:	f04f 31ff 	mov.w	r1, #4294967295
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	43d9      	mvns	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	4313      	orrs	r3, r2
         );
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	@ 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c44:	d301      	bcc.n	8003c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00f      	b.n	8003c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c74 <SysTick_Config+0x40>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c52:	210f      	movs	r1, #15
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	f7ff ff8e 	bl	8003b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c5c:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <SysTick_Config+0x40>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c62:	4b04      	ldr	r3, [pc, #16]	@ (8003c74 <SysTick_Config+0x40>)
 8003c64:	2207      	movs	r2, #7
 8003c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	e000e010 	.word	0xe000e010

08003c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff29 	bl	8003ad8 <__NVIC_SetPriorityGrouping>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca0:	f7ff ff3e 	bl	8003b20 <__NVIC_GetPriorityGrouping>
 8003ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	6978      	ldr	r0, [r7, #20]
 8003cac:	f7ff ff8e 	bl	8003bcc <NVIC_EncodePriority>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff5d 	bl	8003b78 <__NVIC_SetPriority>
}
 8003cbe:	bf00      	nop
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff31 	bl	8003b3c <__NVIC_EnableIRQ>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ffa2 	bl	8003c34 <SysTick_Config>
 8003cf0:	4603      	mov	r3, r0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d06:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d08:	f7ff fc44 	bl	8003594 <HAL_GetTick>
 8003d0c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d008      	beq.n	8003d2c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2280      	movs	r2, #128	@ 0x80
 8003d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e052      	b.n	8003dd2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0216 	bic.w	r2, r2, #22
 8003d3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d4a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d103      	bne.n	8003d5c <HAL_DMA_Abort+0x62>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0208 	bic.w	r2, r2, #8
 8003d6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d7c:	e013      	b.n	8003da6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d7e:	f7ff fc09 	bl	8003594 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d90c      	bls.n	8003da6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2203      	movs	r2, #3
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e015      	b.n	8003dd2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e4      	bne.n	8003d7e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db8:	223f      	movs	r2, #63	@ 0x3f
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d004      	beq.n	8003df8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2280      	movs	r2, #128	@ 0x80
 8003df2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e00c      	b.n	8003e12 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2205      	movs	r2, #5
 8003dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	@ 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	e159      	b.n	80040f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	f040 8148 	bne.w	80040ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d005      	beq.n	8003e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d130      	bne.n	8003ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 0201 	and.w	r2, r3, #1
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d017      	beq.n	8003f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	2203      	movs	r2, #3
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d123      	bne.n	8003f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	08da      	lsrs	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3208      	adds	r2, #8
 8003f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	220f      	movs	r2, #15
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	08da      	lsrs	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3208      	adds	r2, #8
 8003f5e:	69b9      	ldr	r1, [r7, #24]
 8003f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2203      	movs	r2, #3
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0203 	and.w	r2, r3, #3
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80a2 	beq.w	80040ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	4b57      	ldr	r3, [pc, #348]	@ (8004108 <HAL_GPIO_Init+0x2e8>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	4a56      	ldr	r2, [pc, #344]	@ (8004108 <HAL_GPIO_Init+0x2e8>)
 8003fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fb6:	4b54      	ldr	r3, [pc, #336]	@ (8004108 <HAL_GPIO_Init+0x2e8>)
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fc2:	4a52      	ldr	r2, [pc, #328]	@ (800410c <HAL_GPIO_Init+0x2ec>)
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	089b      	lsrs	r3, r3, #2
 8003fc8:	3302      	adds	r3, #2
 8003fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	220f      	movs	r2, #15
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a49      	ldr	r2, [pc, #292]	@ (8004110 <HAL_GPIO_Init+0x2f0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d019      	beq.n	8004022 <HAL_GPIO_Init+0x202>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a48      	ldr	r2, [pc, #288]	@ (8004114 <HAL_GPIO_Init+0x2f4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_GPIO_Init+0x1fe>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a47      	ldr	r2, [pc, #284]	@ (8004118 <HAL_GPIO_Init+0x2f8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00d      	beq.n	800401a <HAL_GPIO_Init+0x1fa>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a46      	ldr	r2, [pc, #280]	@ (800411c <HAL_GPIO_Init+0x2fc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <HAL_GPIO_Init+0x1f6>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a45      	ldr	r2, [pc, #276]	@ (8004120 <HAL_GPIO_Init+0x300>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_GPIO_Init+0x1f2>
 800400e:	2304      	movs	r3, #4
 8004010:	e008      	b.n	8004024 <HAL_GPIO_Init+0x204>
 8004012:	2307      	movs	r3, #7
 8004014:	e006      	b.n	8004024 <HAL_GPIO_Init+0x204>
 8004016:	2303      	movs	r3, #3
 8004018:	e004      	b.n	8004024 <HAL_GPIO_Init+0x204>
 800401a:	2302      	movs	r3, #2
 800401c:	e002      	b.n	8004024 <HAL_GPIO_Init+0x204>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_GPIO_Init+0x204>
 8004022:	2300      	movs	r3, #0
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	f002 0203 	and.w	r2, r2, #3
 800402a:	0092      	lsls	r2, r2, #2
 800402c:	4093      	lsls	r3, r2
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004034:	4935      	ldr	r1, [pc, #212]	@ (800410c <HAL_GPIO_Init+0x2ec>)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	3302      	adds	r3, #2
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004042:	4b38      	ldr	r3, [pc, #224]	@ (8004124 <HAL_GPIO_Init+0x304>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004066:	4a2f      	ldr	r2, [pc, #188]	@ (8004124 <HAL_GPIO_Init+0x304>)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800406c:	4b2d      	ldr	r3, [pc, #180]	@ (8004124 <HAL_GPIO_Init+0x304>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004090:	4a24      	ldr	r2, [pc, #144]	@ (8004124 <HAL_GPIO_Init+0x304>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004096:	4b23      	ldr	r3, [pc, #140]	@ (8004124 <HAL_GPIO_Init+0x304>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004124 <HAL_GPIO_Init+0x304>)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040c0:	4b18      	ldr	r3, [pc, #96]	@ (8004124 <HAL_GPIO_Init+0x304>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004124 <HAL_GPIO_Init+0x304>)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3301      	adds	r3, #1
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	f67f aea2 	bls.w	8003e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3724      	adds	r7, #36	@ 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	40013800 	.word	0x40013800
 8004110:	40020000 	.word	0x40020000
 8004114:	40020400 	.word	0x40020400
 8004118:	40020800 	.word	0x40020800
 800411c:	40020c00 	.word	0x40020c00
 8004120:	40021000 	.word	0x40021000
 8004124:	40013c00 	.word	0x40013c00

08004128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	807b      	strh	r3, [r7, #2]
 8004134:	4613      	mov	r3, r2
 8004136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004138:	787b      	ldrb	r3, [r7, #1]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004144:	e003      	b.n	800414e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004146:	887b      	ldrh	r3, [r7, #2]
 8004148:	041a      	lsls	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	619a      	str	r2, [r3, #24]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e12b      	b.n	80043c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fe fdce 	bl	8002d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2224      	movs	r2, #36	@ 0x24
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0201 	bic.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041c0:	f002 fa0c 	bl	80065dc <HAL_RCC_GetPCLK1Freq>
 80041c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4a81      	ldr	r2, [pc, #516]	@ (80043d0 <HAL_I2C_Init+0x274>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d807      	bhi.n	80041e0 <HAL_I2C_Init+0x84>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a80      	ldr	r2, [pc, #512]	@ (80043d4 <HAL_I2C_Init+0x278>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	bf94      	ite	ls
 80041d8:	2301      	movls	r3, #1
 80041da:	2300      	movhi	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e006      	b.n	80041ee <HAL_I2C_Init+0x92>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a7d      	ldr	r2, [pc, #500]	@ (80043d8 <HAL_I2C_Init+0x27c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	bf94      	ite	ls
 80041e8:	2301      	movls	r3, #1
 80041ea:	2300      	movhi	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0e7      	b.n	80043c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a78      	ldr	r2, [pc, #480]	@ (80043dc <HAL_I2C_Init+0x280>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0c9b      	lsrs	r3, r3, #18
 8004200:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a6a      	ldr	r2, [pc, #424]	@ (80043d0 <HAL_I2C_Init+0x274>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d802      	bhi.n	8004230 <HAL_I2C_Init+0xd4>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	3301      	adds	r3, #1
 800422e:	e009      	b.n	8004244 <HAL_I2C_Init+0xe8>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	4a69      	ldr	r2, [pc, #420]	@ (80043e0 <HAL_I2C_Init+0x284>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	099b      	lsrs	r3, r3, #6
 8004242:	3301      	adds	r3, #1
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	430b      	orrs	r3, r1
 800424a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004256:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	495c      	ldr	r1, [pc, #368]	@ (80043d0 <HAL_I2C_Init+0x274>)
 8004260:	428b      	cmp	r3, r1
 8004262:	d819      	bhi.n	8004298 <HAL_I2C_Init+0x13c>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	1e59      	subs	r1, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004272:	1c59      	adds	r1, r3, #1
 8004274:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004278:	400b      	ands	r3, r1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <HAL_I2C_Init+0x138>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1e59      	subs	r1, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	fbb1 f3f3 	udiv	r3, r1, r3
 800428c:	3301      	adds	r3, #1
 800428e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004292:	e051      	b.n	8004338 <HAL_I2C_Init+0x1dc>
 8004294:	2304      	movs	r3, #4
 8004296:	e04f      	b.n	8004338 <HAL_I2C_Init+0x1dc>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d111      	bne.n	80042c4 <HAL_I2C_Init+0x168>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1e58      	subs	r0, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	440b      	add	r3, r1
 80042ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80042b2:	3301      	adds	r3, #1
 80042b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e012      	b.n	80042ea <HAL_I2C_Init+0x18e>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1e58      	subs	r0, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	0099      	lsls	r1, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042da:	3301      	adds	r3, #1
 80042dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_I2C_Init+0x196>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e022      	b.n	8004338 <HAL_I2C_Init+0x1dc>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10e      	bne.n	8004318 <HAL_I2C_Init+0x1bc>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1e58      	subs	r0, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6859      	ldr	r1, [r3, #4]
 8004302:	460b      	mov	r3, r1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	440b      	add	r3, r1
 8004308:	fbb0 f3f3 	udiv	r3, r0, r3
 800430c:	3301      	adds	r3, #1
 800430e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004316:	e00f      	b.n	8004338 <HAL_I2C_Init+0x1dc>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1e58      	subs	r0, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	0099      	lsls	r1, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	fbb0 f3f3 	udiv	r3, r0, r3
 800432e:	3301      	adds	r3, #1
 8004330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004334:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	6809      	ldr	r1, [r1, #0]
 800433c:	4313      	orrs	r3, r2
 800433e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004366:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6911      	ldr	r1, [r2, #16]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68d2      	ldr	r2, [r2, #12]
 8004372:	4311      	orrs	r1, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	430b      	orrs	r3, r1
 800437a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	000186a0 	.word	0x000186a0
 80043d4:	001e847f 	.word	0x001e847f
 80043d8:	003d08ff 	.word	0x003d08ff
 80043dc:	431bde83 	.word	0x431bde83
 80043e0:	10624dd3 	.word	0x10624dd3

080043e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	461a      	mov	r2, r3
 80043f0:	460b      	mov	r3, r1
 80043f2:	817b      	strh	r3, [r7, #10]
 80043f4:	4613      	mov	r3, r2
 80043f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043f8:	f7ff f8cc 	bl	8003594 <HAL_GetTick>
 80043fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b20      	cmp	r3, #32
 8004408:	f040 80e0 	bne.w	80045cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	2319      	movs	r3, #25
 8004412:	2201      	movs	r2, #1
 8004414:	4970      	ldr	r1, [pc, #448]	@ (80045d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f001 fa3c 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
 8004424:	e0d3      	b.n	80045ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_I2C_Master_Transmit+0x50>
 8004430:	2302      	movs	r3, #2
 8004432:	e0cc      	b.n	80045ce <HAL_I2C_Master_Transmit+0x1ea>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d007      	beq.n	800445a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0201 	orr.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004468:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2221      	movs	r2, #33	@ 0x21
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2210      	movs	r2, #16
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	893a      	ldrh	r2, [r7, #8]
 800448a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a50      	ldr	r2, [pc, #320]	@ (80045dc <HAL_I2C_Master_Transmit+0x1f8>)
 800449a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800449c:	8979      	ldrh	r1, [r7, #10]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 ff28 	bl	80052f8 <I2C_MasterRequestWrite>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e08d      	b.n	80045ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044c8:	e066      	b.n	8004598 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	6a39      	ldr	r1, [r7, #32]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f001 fafa 	bl	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d107      	bne.n	80044f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e06b      	b.n	80045ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	781a      	ldrb	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b04      	cmp	r3, #4
 8004532:	d11b      	bne.n	800456c <HAL_I2C_Master_Transmit+0x188>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004538:	2b00      	cmp	r3, #0
 800453a:	d017      	beq.n	800456c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	6a39      	ldr	r1, [r7, #32]
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f001 faf1 	bl	8005b58 <I2C_WaitOnBTFFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00d      	beq.n	8004598 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004580:	2b04      	cmp	r3, #4
 8004582:	d107      	bne.n	8004594 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004592:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e01a      	b.n	80045ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459c:	2b00      	cmp	r3, #0
 800459e:	d194      	bne.n	80044ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
  }
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	00100002 	.word	0x00100002
 80045dc:	ffff0000 	.word	0xffff0000

080045e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08c      	sub	sp, #48	@ 0x30
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	461a      	mov	r2, r3
 80045ec:	460b      	mov	r3, r1
 80045ee:	817b      	strh	r3, [r7, #10]
 80045f0:	4613      	mov	r3, r2
 80045f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045f4:	f7fe ffce 	bl	8003594 <HAL_GetTick>
 80045f8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b20      	cmp	r3, #32
 8004604:	f040 8217 	bne.w	8004a36 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2319      	movs	r3, #25
 800460e:	2201      	movs	r2, #1
 8004610:	497c      	ldr	r1, [pc, #496]	@ (8004804 <HAL_I2C_Master_Receive+0x224>)
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f001 f93e 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
 8004620:	e20a      	b.n	8004a38 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_I2C_Master_Receive+0x50>
 800462c:	2302      	movs	r3, #2
 800462e:	e203      	b.n	8004a38 <HAL_I2C_Master_Receive+0x458>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d007      	beq.n	8004656 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0201 	orr.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004664:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2222      	movs	r2, #34	@ 0x22
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2210      	movs	r2, #16
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	893a      	ldrh	r2, [r7, #8]
 8004686:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4a5c      	ldr	r2, [pc, #368]	@ (8004808 <HAL_I2C_Master_Receive+0x228>)
 8004696:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004698:	8979      	ldrh	r1, [r7, #10]
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 feac 	bl	80053fc <I2C_MasterRequestRead>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e1c4      	b.n	8004a38 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d113      	bne.n	80046de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b6:	2300      	movs	r3, #0
 80046b8:	623b      	str	r3, [r7, #32]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	623b      	str	r3, [r7, #32]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	623b      	str	r3, [r7, #32]
 80046ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	e198      	b.n	8004a10 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d11b      	bne.n	800471e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	e178      	b.n	8004a10 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004722:	2b02      	cmp	r3, #2
 8004724:	d11b      	bne.n	800475e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004734:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	e158      	b.n	8004a10 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800476c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004784:	e144      	b.n	8004a10 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478a:	2b03      	cmp	r3, #3
 800478c:	f200 80f1 	bhi.w	8004972 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004794:	2b01      	cmp	r3, #1
 8004796:	d123      	bne.n	80047e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f001 fa23 	bl	8005be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e145      	b.n	8004a38 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047de:	e117      	b.n	8004a10 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d14e      	bne.n	8004886 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	2200      	movs	r2, #0
 80047f0:	4906      	ldr	r1, [pc, #24]	@ (800480c <HAL_I2C_Master_Receive+0x22c>)
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f001 f84e 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e11a      	b.n	8004a38 <HAL_I2C_Master_Receive+0x458>
 8004802:	bf00      	nop
 8004804:	00100002 	.word	0x00100002
 8004808:	ffff0000 	.word	0xffff0000
 800480c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800481e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004884:	e0c4      	b.n	8004a10 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488c:	2200      	movs	r2, #0
 800488e:	496c      	ldr	r1, [pc, #432]	@ (8004a40 <HAL_I2C_Master_Receive+0x460>)
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 ffff 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0cb      	b.n	8004a38 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e8:	2200      	movs	r2, #0
 80048ea:	4955      	ldr	r1, [pc, #340]	@ (8004a40 <HAL_I2C_Master_Receive+0x460>)
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 ffd1 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e09d      	b.n	8004a38 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004970:	e04e      	b.n	8004a10 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004974:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f001 f936 	bl	8005be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e058      	b.n	8004a38 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d124      	bne.n	8004a10 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d107      	bne.n	80049de <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049dc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f47f aeb6 	bne.w	8004786 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e000      	b.n	8004a38 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
  }
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3728      	adds	r7, #40	@ 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	00010004 	.word	0x00010004

08004a44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	461a      	mov	r2, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	817b      	strh	r3, [r7, #10]
 8004a56:	460b      	mov	r3, r1
 8004a58:	813b      	strh	r3, [r7, #8]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a5e:	f7fe fd99 	bl	8003594 <HAL_GetTick>
 8004a62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	f040 80d9 	bne.w	8004c24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	2319      	movs	r3, #25
 8004a78:	2201      	movs	r2, #1
 8004a7a:	496d      	ldr	r1, [pc, #436]	@ (8004c30 <HAL_I2C_Mem_Write+0x1ec>)
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 ff09 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e0cc      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_I2C_Mem_Write+0x56>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e0c5      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d007      	beq.n	8004ac0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2221      	movs	r2, #33	@ 0x21
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2240      	movs	r2, #64	@ 0x40
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4a4d      	ldr	r2, [pc, #308]	@ (8004c34 <HAL_I2C_Mem_Write+0x1f0>)
 8004b00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b02:	88f8      	ldrh	r0, [r7, #6]
 8004b04:	893a      	ldrh	r2, [r7, #8]
 8004b06:	8979      	ldrh	r1, [r7, #10]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	4603      	mov	r3, r0
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 fd40 	bl	8005598 <I2C_RequestMemoryWrite>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d052      	beq.n	8004bc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e081      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 ffce 	bl	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00d      	beq.n	8004b4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d107      	bne.n	8004b4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e06b      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	781a      	ldrb	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_I2C_Mem_Write+0x180>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d017      	beq.n	8004bc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	781a      	ldrb	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1aa      	bne.n	8004b22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 ffc1 	bl	8005b58 <I2C_WaitOnBTFFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00d      	beq.n	8004bf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d107      	bne.n	8004bf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e016      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e000      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
  }
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	00100002 	.word	0x00100002
 8004c34:	ffff0000 	.word	0xffff0000

08004c38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08c      	sub	sp, #48	@ 0x30
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	4608      	mov	r0, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	461a      	mov	r2, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	817b      	strh	r3, [r7, #10]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	813b      	strh	r3, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c52:	f7fe fc9f 	bl	8003594 <HAL_GetTick>
 8004c56:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	f040 8214 	bne.w	800508e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	2319      	movs	r3, #25
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	497b      	ldr	r1, [pc, #492]	@ (8004e5c <HAL_I2C_Mem_Read+0x224>)
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fe0f 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e207      	b.n	8005090 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_I2C_Mem_Read+0x56>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e200      	b.n	8005090 <HAL_I2C_Mem_Read+0x458>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d007      	beq.n	8004cb4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2222      	movs	r2, #34	@ 0x22
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2240      	movs	r2, #64	@ 0x40
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a5b      	ldr	r2, [pc, #364]	@ (8004e60 <HAL_I2C_Mem_Read+0x228>)
 8004cf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cf6:	88f8      	ldrh	r0, [r7, #6]
 8004cf8:	893a      	ldrh	r2, [r7, #8]
 8004cfa:	8979      	ldrh	r1, [r7, #10]
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	4603      	mov	r3, r0
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fcdc 	bl	80056c4 <I2C_RequestMemoryRead>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e1bc      	b.n	8005090 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d113      	bne.n	8004d46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	623b      	str	r3, [r7, #32]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	623b      	str	r3, [r7, #32]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	623b      	str	r3, [r7, #32]
 8004d32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e190      	b.n	8005068 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d11b      	bne.n	8004d86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e170      	b.n	8005068 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d11b      	bne.n	8004dc6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dae:	2300      	movs	r3, #0
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	e150      	b.n	8005068 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ddc:	e144      	b.n	8005068 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	f200 80f1 	bhi.w	8004fca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d123      	bne.n	8004e38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fef7 	bl	8005be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e145      	b.n	8005090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e36:	e117      	b.n	8005068 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d14e      	bne.n	8004ede <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e46:	2200      	movs	r2, #0
 8004e48:	4906      	ldr	r1, [pc, #24]	@ (8004e64 <HAL_I2C_Mem_Read+0x22c>)
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fd22 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e11a      	b.n	8005090 <HAL_I2C_Mem_Read+0x458>
 8004e5a:	bf00      	nop
 8004e5c:	00100002 	.word	0x00100002
 8004e60:	ffff0000 	.word	0xffff0000
 8004e64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004edc:	e0c4      	b.n	8005068 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	496c      	ldr	r1, [pc, #432]	@ (8005098 <HAL_I2C_Mem_Read+0x460>)
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fcd3 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0cb      	b.n	8005090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f40:	2200      	movs	r2, #0
 8004f42:	4955      	ldr	r1, [pc, #340]	@ (8005098 <HAL_I2C_Mem_Read+0x460>)
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fca5 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e09d      	b.n	8005090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fc8:	e04e      	b.n	8005068 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fe0a 	bl	8005be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e058      	b.n	8005090 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b04      	cmp	r3, #4
 800501c:	d124      	bne.n	8005068 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005022:	2b03      	cmp	r3, #3
 8005024:	d107      	bne.n	8005036 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005034:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506c:	2b00      	cmp	r3, #0
 800506e:	f47f aeb6 	bne.w	8004dde <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e000      	b.n	8005090 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800508e:	2302      	movs	r3, #2
  }
}
 8005090:	4618      	mov	r0, r3
 8005092:	3728      	adds	r7, #40	@ 0x28
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	00010004 	.word	0x00010004

0800509c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	@ 0x28
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	460b      	mov	r3, r1
 80050aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80050ac:	f7fe fa72 	bl	8003594 <HAL_GetTick>
 80050b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b20      	cmp	r3, #32
 80050c0:	f040 8111 	bne.w	80052e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2319      	movs	r3, #25
 80050ca:	2201      	movs	r2, #1
 80050cc:	4988      	ldr	r1, [pc, #544]	@ (80052f0 <HAL_I2C_IsDeviceReady+0x254>)
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 fbe0 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
 80050dc:	e104      	b.n	80052e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_I2C_IsDeviceReady+0x50>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e0fd      	b.n	80052e8 <HAL_I2C_IsDeviceReady+0x24c>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d007      	beq.n	8005112 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0201 	orr.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005120:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2224      	movs	r2, #36	@ 0x24
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4a70      	ldr	r2, [pc, #448]	@ (80052f4 <HAL_I2C_IsDeviceReady+0x258>)
 8005134:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005144:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2200      	movs	r2, #0
 800514e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 fb9e 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00d      	beq.n	800517a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800516c:	d103      	bne.n	8005176 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005174:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e0b6      	b.n	80052e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800517a:	897b      	ldrh	r3, [r7, #10]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005188:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800518a:	f7fe fa03 	bl	8003594 <HAL_GetTick>
 800518e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b02      	cmp	r3, #2
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051be:	e025      	b.n	800520c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051c0:	f7fe f9e8 	bl	8003594 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d302      	bcc.n	80051d6 <HAL_I2C_IsDeviceReady+0x13a>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d103      	bne.n	80051de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	22a0      	movs	r2, #160	@ 0xa0
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005202:	bf0c      	ite	eq
 8005204:	2301      	moveq	r3, #1
 8005206:	2300      	movne	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2ba0      	cmp	r3, #160	@ 0xa0
 8005216:	d005      	beq.n	8005224 <HAL_I2C_IsDeviceReady+0x188>
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <HAL_I2C_IsDeviceReady+0x188>
 800521e:	7dbb      	ldrb	r3, [r7, #22]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0cd      	beq.n	80051c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b02      	cmp	r3, #2
 8005238:	d129      	bne.n	800528e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005248:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524a:	2300      	movs	r3, #0
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	2319      	movs	r3, #25
 8005266:	2201      	movs	r2, #1
 8005268:	4921      	ldr	r1, [pc, #132]	@ (80052f0 <HAL_I2C_IsDeviceReady+0x254>)
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 fb12 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e036      	b.n	80052e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e02c      	b.n	80052e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800529c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	2319      	movs	r3, #25
 80052ae:	2201      	movs	r2, #1
 80052b0:	490f      	ldr	r1, [pc, #60]	@ (80052f0 <HAL_I2C_IsDeviceReady+0x254>)
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 faee 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e012      	b.n	80052e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	3301      	adds	r3, #1
 80052c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	f4ff af32 	bcc.w	8005136 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	00100002 	.word	0x00100002
 80052f4:	ffff0000 	.word	0xffff0000

080052f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	460b      	mov	r3, r1
 8005306:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d006      	beq.n	8005322 <I2C_MasterRequestWrite+0x2a>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d003      	beq.n	8005322 <I2C_MasterRequestWrite+0x2a>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005320:	d108      	bne.n	8005334 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	e00b      	b.n	800534c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005338:	2b12      	cmp	r3, #18
 800533a:	d107      	bne.n	800534c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800534a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fa9b 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00d      	beq.n	8005380 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005372:	d103      	bne.n	800537c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800537a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e035      	b.n	80053ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005388:	d108      	bne.n	800539c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800538a:	897b      	ldrh	r3, [r7, #10]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005398:	611a      	str	r2, [r3, #16]
 800539a:	e01b      	b.n	80053d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800539c:	897b      	ldrh	r3, [r7, #10]
 800539e:	11db      	asrs	r3, r3, #7
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f003 0306 	and.w	r3, r3, #6
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f063 030f 	orn	r3, r3, #15
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	490e      	ldr	r1, [pc, #56]	@ (80053f4 <I2C_MasterRequestWrite+0xfc>)
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fae4 	bl	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e010      	b.n	80053ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053ca:	897b      	ldrh	r3, [r7, #10]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	4907      	ldr	r1, [pc, #28]	@ (80053f8 <I2C_MasterRequestWrite+0x100>)
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fad4 	bl	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	00010008 	.word	0x00010008
 80053f8:	00010002 	.word	0x00010002

080053fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	607a      	str	r2, [r7, #4]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	460b      	mov	r3, r1
 800540a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005410:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005420:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d006      	beq.n	8005436 <I2C_MasterRequestRead+0x3a>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d003      	beq.n	8005436 <I2C_MasterRequestRead+0x3a>
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005434:	d108      	bne.n	8005448 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e00b      	b.n	8005460 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544c:	2b11      	cmp	r3, #17
 800544e:	d107      	bne.n	8005460 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800545e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fa11 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00d      	beq.n	8005494 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005486:	d103      	bne.n	8005490 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800548e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e079      	b.n	8005588 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800549c:	d108      	bne.n	80054b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800549e:	897b      	ldrh	r3, [r7, #10]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	611a      	str	r2, [r3, #16]
 80054ae:	e05f      	b.n	8005570 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054b0:	897b      	ldrh	r3, [r7, #10]
 80054b2:	11db      	asrs	r3, r3, #7
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f003 0306 	and.w	r3, r3, #6
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	f063 030f 	orn	r3, r3, #15
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4930      	ldr	r1, [pc, #192]	@ (8005590 <I2C_MasterRequestRead+0x194>)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fa5a 	bl	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e054      	b.n	8005588 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054de:	897b      	ldrh	r3, [r7, #10]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4929      	ldr	r1, [pc, #164]	@ (8005594 <I2C_MasterRequestRead+0x198>)
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fa4a 	bl	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e044      	b.n	8005588 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054fe:	2300      	movs	r3, #0
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005522:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f9af 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800554a:	d103      	bne.n	8005554 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005552:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e017      	b.n	8005588 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005558:	897b      	ldrh	r3, [r7, #10]
 800555a:	11db      	asrs	r3, r3, #7
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0306 	and.w	r3, r3, #6
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f063 030e 	orn	r3, r3, #14
 8005568:	b2da      	uxtb	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	4907      	ldr	r1, [pc, #28]	@ (8005594 <I2C_MasterRequestRead+0x198>)
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fa06 	bl	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	00010008 	.word	0x00010008
 8005594:	00010002 	.word	0x00010002

08005598 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	4608      	mov	r0, r1
 80055a2:	4611      	mov	r1, r2
 80055a4:	461a      	mov	r2, r3
 80055a6:	4603      	mov	r3, r0
 80055a8:	817b      	strh	r3, [r7, #10]
 80055aa:	460b      	mov	r3, r1
 80055ac:	813b      	strh	r3, [r7, #8]
 80055ae:	4613      	mov	r3, r2
 80055b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f960 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00d      	beq.n	80055f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e8:	d103      	bne.n	80055f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e05f      	b.n	80056b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055f6:	897b      	ldrh	r3, [r7, #10]
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	6a3a      	ldr	r2, [r7, #32]
 800560a:	492d      	ldr	r1, [pc, #180]	@ (80056c0 <I2C_RequestMemoryWrite+0x128>)
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f9bb 	bl	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e04c      	b.n	80056b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005634:	6a39      	ldr	r1, [r7, #32]
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fa46 	bl	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00d      	beq.n	800565e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	2b04      	cmp	r3, #4
 8005648:	d107      	bne.n	800565a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e02b      	b.n	80056b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d105      	bne.n	8005670 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005664:	893b      	ldrh	r3, [r7, #8]
 8005666:	b2da      	uxtb	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	611a      	str	r2, [r3, #16]
 800566e:	e021      	b.n	80056b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005670:	893b      	ldrh	r3, [r7, #8]
 8005672:	0a1b      	lsrs	r3, r3, #8
 8005674:	b29b      	uxth	r3, r3
 8005676:	b2da      	uxtb	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800567e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005680:	6a39      	ldr	r1, [r7, #32]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fa20 	bl	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	2b04      	cmp	r3, #4
 8005694:	d107      	bne.n	80056a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e005      	b.n	80056b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056aa:	893b      	ldrh	r3, [r7, #8]
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	00010002 	.word	0x00010002

080056c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	461a      	mov	r2, r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	817b      	strh	r3, [r7, #10]
 80056d6:	460b      	mov	r3, r1
 80056d8:	813b      	strh	r3, [r7, #8]
 80056da:	4613      	mov	r3, r2
 80056dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	2200      	movs	r2, #0
 8005706:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f8c2 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00d      	beq.n	8005732 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005724:	d103      	bne.n	800572e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800572c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e0aa      	b.n	8005888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005732:	897b      	ldrh	r3, [r7, #10]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005740:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	6a3a      	ldr	r2, [r7, #32]
 8005746:	4952      	ldr	r1, [pc, #328]	@ (8005890 <I2C_RequestMemoryRead+0x1cc>)
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f91d 	bl	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e097      	b.n	8005888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800576e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005770:	6a39      	ldr	r1, [r7, #32]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f9a8 	bl	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	2b04      	cmp	r3, #4
 8005784:	d107      	bne.n	8005796 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005794:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e076      	b.n	8005888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057a0:	893b      	ldrh	r3, [r7, #8]
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	611a      	str	r2, [r3, #16]
 80057aa:	e021      	b.n	80057f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057ac:	893b      	ldrh	r3, [r7, #8]
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057bc:	6a39      	ldr	r1, [r7, #32]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f982 	bl	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00d      	beq.n	80057e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d107      	bne.n	80057e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e050      	b.n	8005888 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057e6:	893b      	ldrh	r3, [r7, #8]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f2:	6a39      	ldr	r1, [r7, #32]
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f967 	bl	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00d      	beq.n	800581c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005804:	2b04      	cmp	r3, #4
 8005806:	d107      	bne.n	8005818 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005816:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e035      	b.n	8005888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800582a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	2200      	movs	r2, #0
 8005834:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f82b 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00d      	beq.n	8005860 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005852:	d103      	bne.n	800585c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800585a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e013      	b.n	8005888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005860:	897b      	ldrh	r3, [r7, #10]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	6a3a      	ldr	r2, [r7, #32]
 8005874:	4906      	ldr	r1, [pc, #24]	@ (8005890 <I2C_RequestMemoryRead+0x1cc>)
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f886 	bl	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	00010002 	.word	0x00010002

08005894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	4613      	mov	r3, r2
 80058a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058a4:	e048      	b.n	8005938 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ac:	d044      	beq.n	8005938 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ae:	f7fd fe71 	bl	8003594 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d302      	bcc.n	80058c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d139      	bne.n	8005938 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	0c1b      	lsrs	r3, r3, #16
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d10d      	bne.n	80058ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	43da      	mvns	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4013      	ands	r3, r2
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	e00c      	b.n	8005904 <I2C_WaitOnFlagUntilTimeout+0x70>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	43da      	mvns	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	4013      	ands	r3, r2
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf0c      	ite	eq
 80058fc:	2301      	moveq	r3, #1
 80058fe:	2300      	movne	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	461a      	mov	r2, r3
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	429a      	cmp	r2, r3
 8005908:	d116      	bne.n	8005938 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e023      	b.n	8005980 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	0c1b      	lsrs	r3, r3, #16
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b01      	cmp	r3, #1
 8005940:	d10d      	bne.n	800595e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	43da      	mvns	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4013      	ands	r3, r2
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	bf0c      	ite	eq
 8005954:	2301      	moveq	r3, #1
 8005956:	2300      	movne	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	e00c      	b.n	8005978 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	43da      	mvns	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4013      	ands	r3, r2
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	429a      	cmp	r2, r3
 800597c:	d093      	beq.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005996:	e071      	b.n	8005a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a6:	d123      	bne.n	80059f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	f043 0204 	orr.w	r2, r3, #4
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e067      	b.n	8005ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f6:	d041      	beq.n	8005a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f8:	f7fd fdcc 	bl	8003594 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d302      	bcc.n	8005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d136      	bne.n	8005a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d10c      	bne.n	8005a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	43da      	mvns	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4013      	ands	r3, r2
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bf14      	ite	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	2300      	moveq	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	e00b      	b.n	8005a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	43da      	mvns	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bf14      	ite	ne
 8005a44:	2301      	movne	r3, #1
 8005a46:	2300      	moveq	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d016      	beq.n	8005a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a68:	f043 0220 	orr.w	r2, r3, #32
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e021      	b.n	8005ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	0c1b      	lsrs	r3, r3, #16
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d10c      	bne.n	8005aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	43da      	mvns	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e00b      	b.n	8005ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	43da      	mvns	r2, r3
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bf14      	ite	ne
 8005ab2:	2301      	movne	r3, #1
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f47f af6d 	bne.w	8005998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ad4:	e034      	b.n	8005b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f8e3 	bl	8005ca2 <I2C_IsAcknowledgeFailed>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e034      	b.n	8005b50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d028      	beq.n	8005b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aee:	f7fd fd51 	bl	8003594 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d302      	bcc.n	8005b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d11d      	bne.n	8005b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0e:	2b80      	cmp	r3, #128	@ 0x80
 8005b10:	d016      	beq.n	8005b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2c:	f043 0220 	orr.w	r2, r3, #32
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e007      	b.n	8005b50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b4a:	2b80      	cmp	r3, #128	@ 0x80
 8005b4c:	d1c3      	bne.n	8005ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b64:	e034      	b.n	8005bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f89b 	bl	8005ca2 <I2C_IsAcknowledgeFailed>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e034      	b.n	8005be0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d028      	beq.n	8005bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7e:	f7fd fd09 	bl	8003594 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d302      	bcc.n	8005b94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11d      	bne.n	8005bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d016      	beq.n	8005bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	f043 0220 	orr.w	r2, r3, #32
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e007      	b.n	8005be0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d1c3      	bne.n	8005b66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bf4:	e049      	b.n	8005c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d119      	bne.n	8005c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0210 	mvn.w	r2, #16
 8005c0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e030      	b.n	8005c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c38:	f7fd fcac 	bl	8003594 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d302      	bcc.n	8005c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d11d      	bne.n	8005c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c58:	2b40      	cmp	r3, #64	@ 0x40
 8005c5a:	d016      	beq.n	8005c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c76:	f043 0220 	orr.w	r2, r3, #32
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e007      	b.n	8005c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c94:	2b40      	cmp	r3, #64	@ 0x40
 8005c96:	d1ae      	bne.n	8005bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cb8:	d11b      	bne.n	8005cf2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cc2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cde:	f043 0204 	orr.w	r2, r3, #4
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e267      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d075      	beq.n	8005e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d1e:	4b88      	ldr	r3, [pc, #544]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 030c 	and.w	r3, r3, #12
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d00c      	beq.n	8005d44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d2a:	4b85      	ldr	r3, [pc, #532]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d112      	bne.n	8005d5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d36:	4b82      	ldr	r3, [pc, #520]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d42:	d10b      	bne.n	8005d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d44:	4b7e      	ldr	r3, [pc, #504]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d05b      	beq.n	8005e08 <HAL_RCC_OscConfig+0x108>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d157      	bne.n	8005e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e242      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d64:	d106      	bne.n	8005d74 <HAL_RCC_OscConfig+0x74>
 8005d66:	4b76      	ldr	r3, [pc, #472]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a75      	ldr	r2, [pc, #468]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	e01d      	b.n	8005db0 <HAL_RCC_OscConfig+0xb0>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d7c:	d10c      	bne.n	8005d98 <HAL_RCC_OscConfig+0x98>
 8005d7e:	4b70      	ldr	r3, [pc, #448]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a6f      	ldr	r2, [pc, #444]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	e00b      	b.n	8005db0 <HAL_RCC_OscConfig+0xb0>
 8005d98:	4b69      	ldr	r3, [pc, #420]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a68      	ldr	r2, [pc, #416]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	4b66      	ldr	r3, [pc, #408]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a65      	ldr	r2, [pc, #404]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d013      	beq.n	8005de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db8:	f7fd fbec 	bl	8003594 <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc0:	f7fd fbe8 	bl	8003594 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b64      	cmp	r3, #100	@ 0x64
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e207      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0f0      	beq.n	8005dc0 <HAL_RCC_OscConfig+0xc0>
 8005dde:	e014      	b.n	8005e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de0:	f7fd fbd8 	bl	8003594 <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de8:	f7fd fbd4 	bl	8003594 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b64      	cmp	r3, #100	@ 0x64
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e1f3      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dfa:	4b51      	ldr	r3, [pc, #324]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f0      	bne.n	8005de8 <HAL_RCC_OscConfig+0xe8>
 8005e06:	e000      	b.n	8005e0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d063      	beq.n	8005ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e16:	4b4a      	ldr	r3, [pc, #296]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 030c 	and.w	r3, r3, #12
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e22:	4b47      	ldr	r3, [pc, #284]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d11c      	bne.n	8005e68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e2e:	4b44      	ldr	r3, [pc, #272]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d116      	bne.n	8005e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e3a:	4b41      	ldr	r3, [pc, #260]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_RCC_OscConfig+0x152>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d001      	beq.n	8005e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e1c7      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e52:	4b3b      	ldr	r3, [pc, #236]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	4937      	ldr	r1, [pc, #220]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e66:	e03a      	b.n	8005ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d020      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e70:	4b34      	ldr	r3, [pc, #208]	@ (8005f44 <HAL_RCC_OscConfig+0x244>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e76:	f7fd fb8d 	bl	8003594 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e7c:	e008      	b.n	8005e90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e7e:	f7fd fb89 	bl	8003594 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e1a8      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e90:	4b2b      	ldr	r3, [pc, #172]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0f0      	beq.n	8005e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e9c:	4b28      	ldr	r3, [pc, #160]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4925      	ldr	r1, [pc, #148]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	600b      	str	r3, [r1, #0]
 8005eb0:	e015      	b.n	8005ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eb2:	4b24      	ldr	r3, [pc, #144]	@ (8005f44 <HAL_RCC_OscConfig+0x244>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb8:	f7fd fb6c 	bl	8003594 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec0:	f7fd fb68 	bl	8003594 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e187      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d036      	beq.n	8005f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d016      	beq.n	8005f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ef2:	4b15      	ldr	r3, [pc, #84]	@ (8005f48 <HAL_RCC_OscConfig+0x248>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef8:	f7fd fb4c 	bl	8003594 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f00:	f7fd fb48 	bl	8003594 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e167      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f12:	4b0b      	ldr	r3, [pc, #44]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0f0      	beq.n	8005f00 <HAL_RCC_OscConfig+0x200>
 8005f1e:	e01b      	b.n	8005f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f20:	4b09      	ldr	r3, [pc, #36]	@ (8005f48 <HAL_RCC_OscConfig+0x248>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f26:	f7fd fb35 	bl	8003594 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f2c:	e00e      	b.n	8005f4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f2e:	f7fd fb31 	bl	8003594 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d907      	bls.n	8005f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e150      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
 8005f40:	40023800 	.word	0x40023800
 8005f44:	42470000 	.word	0x42470000
 8005f48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f4c:	4b88      	ldr	r3, [pc, #544]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1ea      	bne.n	8005f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8097 	beq.w	8006094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f6a:	4b81      	ldr	r3, [pc, #516]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10f      	bne.n	8005f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f86:	4b7a      	ldr	r3, [pc, #488]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f8e:	60bb      	str	r3, [r7, #8]
 8005f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f92:	2301      	movs	r3, #1
 8005f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f96:	4b77      	ldr	r3, [pc, #476]	@ (8006174 <HAL_RCC_OscConfig+0x474>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d118      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fa2:	4b74      	ldr	r3, [pc, #464]	@ (8006174 <HAL_RCC_OscConfig+0x474>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a73      	ldr	r2, [pc, #460]	@ (8006174 <HAL_RCC_OscConfig+0x474>)
 8005fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fae:	f7fd faf1 	bl	8003594 <HAL_GetTick>
 8005fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb6:	f7fd faed 	bl	8003594 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e10c      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8006174 <HAL_RCC_OscConfig+0x474>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0f0      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d106      	bne.n	8005fea <HAL_RCC_OscConfig+0x2ea>
 8005fdc:	4b64      	ldr	r3, [pc, #400]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe0:	4a63      	ldr	r2, [pc, #396]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fe8:	e01c      	b.n	8006024 <HAL_RCC_OscConfig+0x324>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b05      	cmp	r3, #5
 8005ff0:	d10c      	bne.n	800600c <HAL_RCC_OscConfig+0x30c>
 8005ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005ff8:	f043 0304 	orr.w	r3, r3, #4
 8005ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006002:	4a5b      	ldr	r2, [pc, #364]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	6713      	str	r3, [r2, #112]	@ 0x70
 800600a:	e00b      	b.n	8006024 <HAL_RCC_OscConfig+0x324>
 800600c:	4b58      	ldr	r3, [pc, #352]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800600e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006010:	4a57      	ldr	r2, [pc, #348]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006012:	f023 0301 	bic.w	r3, r3, #1
 8006016:	6713      	str	r3, [r2, #112]	@ 0x70
 8006018:	4b55      	ldr	r3, [pc, #340]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601c:	4a54      	ldr	r2, [pc, #336]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800601e:	f023 0304 	bic.w	r3, r3, #4
 8006022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d015      	beq.n	8006058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602c:	f7fd fab2 	bl	8003594 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006032:	e00a      	b.n	800604a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006034:	f7fd faae 	bl	8003594 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006042:	4293      	cmp	r3, r2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e0cb      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800604a:	4b49      	ldr	r3, [pc, #292]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800604c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0ee      	beq.n	8006034 <HAL_RCC_OscConfig+0x334>
 8006056:	e014      	b.n	8006082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006058:	f7fd fa9c 	bl	8003594 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800605e:	e00a      	b.n	8006076 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006060:	f7fd fa98 	bl	8003594 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800606e:	4293      	cmp	r3, r2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e0b5      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006076:	4b3e      	ldr	r3, [pc, #248]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1ee      	bne.n	8006060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006082:	7dfb      	ldrb	r3, [r7, #23]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d105      	bne.n	8006094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006088:	4b39      	ldr	r3, [pc, #228]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800608a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608c:	4a38      	ldr	r2, [pc, #224]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800608e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006092:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80a1 	beq.w	80061e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800609e:	4b34      	ldr	r3, [pc, #208]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d05c      	beq.n	8006164 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d141      	bne.n	8006136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b2:	4b31      	ldr	r3, [pc, #196]	@ (8006178 <HAL_RCC_OscConfig+0x478>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b8:	f7fd fa6c 	bl	8003594 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c0:	f7fd fa68 	bl	8003594 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e087      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d2:	4b27      	ldr	r3, [pc, #156]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ec:	019b      	lsls	r3, r3, #6
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	3b01      	subs	r3, #1
 80060f8:	041b      	lsls	r3, r3, #16
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006100:	061b      	lsls	r3, r3, #24
 8006102:	491b      	ldr	r1, [pc, #108]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006104:	4313      	orrs	r3, r2
 8006106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006108:	4b1b      	ldr	r3, [pc, #108]	@ (8006178 <HAL_RCC_OscConfig+0x478>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610e:	f7fd fa41 	bl	8003594 <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006116:	f7fd fa3d 	bl	8003594 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e05c      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006128:	4b11      	ldr	r3, [pc, #68]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0f0      	beq.n	8006116 <HAL_RCC_OscConfig+0x416>
 8006134:	e054      	b.n	80061e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006136:	4b10      	ldr	r3, [pc, #64]	@ (8006178 <HAL_RCC_OscConfig+0x478>)
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800613c:	f7fd fa2a 	bl	8003594 <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006144:	f7fd fa26 	bl	8003594 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e045      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006156:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1f0      	bne.n	8006144 <HAL_RCC_OscConfig+0x444>
 8006162:	e03d      	b.n	80061e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d107      	bne.n	800617c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e038      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
 8006170:	40023800 	.word	0x40023800
 8006174:	40007000 	.word	0x40007000
 8006178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800617c:	4b1b      	ldr	r3, [pc, #108]	@ (80061ec <HAL_RCC_OscConfig+0x4ec>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d028      	beq.n	80061dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006194:	429a      	cmp	r2, r3
 8006196:	d121      	bne.n	80061dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d11a      	bne.n	80061dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061ac:	4013      	ands	r3, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d111      	bne.n	80061dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	3b01      	subs	r3, #1
 80061c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d107      	bne.n	80061dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d001      	beq.n	80061e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40023800 	.word	0x40023800

080061f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0cc      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006204:	4b68      	ldr	r3, [pc, #416]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d90c      	bls.n	800622c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006212:	4b65      	ldr	r3, [pc, #404]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800621a:	4b63      	ldr	r3, [pc, #396]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d001      	beq.n	800622c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e0b8      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d020      	beq.n	800627a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006244:	4b59      	ldr	r3, [pc, #356]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	4a58      	ldr	r2, [pc, #352]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800624e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800625c:	4b53      	ldr	r3, [pc, #332]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	4a52      	ldr	r2, [pc, #328]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006268:	4b50      	ldr	r3, [pc, #320]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	494d      	ldr	r1, [pc, #308]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	4313      	orrs	r3, r2
 8006278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d044      	beq.n	8006310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d107      	bne.n	800629e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628e:	4b47      	ldr	r3, [pc, #284]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d119      	bne.n	80062ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e07f      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d003      	beq.n	80062ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d107      	bne.n	80062be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ae:	4b3f      	ldr	r3, [pc, #252]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d109      	bne.n	80062ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e06f      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062be:	4b3b      	ldr	r3, [pc, #236]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e067      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ce:	4b37      	ldr	r3, [pc, #220]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f023 0203 	bic.w	r2, r3, #3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	4934      	ldr	r1, [pc, #208]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062e0:	f7fd f958 	bl	8003594 <HAL_GetTick>
 80062e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e6:	e00a      	b.n	80062fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e8:	f7fd f954 	bl	8003594 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e04f      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fe:	4b2b      	ldr	r3, [pc, #172]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 020c 	and.w	r2, r3, #12
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	429a      	cmp	r2, r3
 800630e:	d1eb      	bne.n	80062e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006310:	4b25      	ldr	r3, [pc, #148]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d20c      	bcs.n	8006338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631e:	4b22      	ldr	r3, [pc, #136]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006326:	4b20      	ldr	r3, [pc, #128]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e032      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d008      	beq.n	8006356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006344:	4b19      	ldr	r3, [pc, #100]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	4916      	ldr	r1, [pc, #88]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	4313      	orrs	r3, r2
 8006354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006362:	4b12      	ldr	r3, [pc, #72]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	490e      	ldr	r1, [pc, #56]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	4313      	orrs	r3, r2
 8006374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006376:	f000 f821 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 800637a:	4602      	mov	r2, r0
 800637c:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	091b      	lsrs	r3, r3, #4
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	490a      	ldr	r1, [pc, #40]	@ (80063b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006388:	5ccb      	ldrb	r3, [r1, r3]
 800638a:	fa22 f303 	lsr.w	r3, r2, r3
 800638e:	4a09      	ldr	r2, [pc, #36]	@ (80063b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006392:	4b09      	ldr	r3, [pc, #36]	@ (80063b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4618      	mov	r0, r3
 8006398:	f7fd f8b8 	bl	800350c <HAL_InitTick>

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	40023c00 	.word	0x40023c00
 80063ac:	40023800 	.word	0x40023800
 80063b0:	0800b798 	.word	0x0800b798
 80063b4:	20000058 	.word	0x20000058
 80063b8:	2000005c 	.word	0x2000005c

080063bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c0:	b094      	sub	sp, #80	@ 0x50
 80063c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063d4:	4b79      	ldr	r3, [pc, #484]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 030c 	and.w	r3, r3, #12
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d00d      	beq.n	80063fc <HAL_RCC_GetSysClockFreq+0x40>
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	f200 80e1 	bhi.w	80065a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_RCC_GetSysClockFreq+0x34>
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d003      	beq.n	80063f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80063ee:	e0db      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063f0:	4b73      	ldr	r3, [pc, #460]	@ (80065c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80063f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063f4:	e0db      	b.n	80065ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063f6:	4b72      	ldr	r3, [pc, #456]	@ (80065c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80063f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063fa:	e0d8      	b.n	80065ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063fc:	4b6f      	ldr	r3, [pc, #444]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006404:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006406:	4b6d      	ldr	r3, [pc, #436]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d063      	beq.n	80064da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006412:	4b6a      	ldr	r3, [pc, #424]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	099b      	lsrs	r3, r3, #6
 8006418:	2200      	movs	r2, #0
 800641a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800641c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800641e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006424:	633b      	str	r3, [r7, #48]	@ 0x30
 8006426:	2300      	movs	r3, #0
 8006428:	637b      	str	r3, [r7, #52]	@ 0x34
 800642a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800642e:	4622      	mov	r2, r4
 8006430:	462b      	mov	r3, r5
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f04f 0100 	mov.w	r1, #0
 800643a:	0159      	lsls	r1, r3, #5
 800643c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006440:	0150      	lsls	r0, r2, #5
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4621      	mov	r1, r4
 8006448:	1a51      	subs	r1, r2, r1
 800644a:	6139      	str	r1, [r7, #16]
 800644c:	4629      	mov	r1, r5
 800644e:	eb63 0301 	sbc.w	r3, r3, r1
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006460:	4659      	mov	r1, fp
 8006462:	018b      	lsls	r3, r1, #6
 8006464:	4651      	mov	r1, sl
 8006466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800646a:	4651      	mov	r1, sl
 800646c:	018a      	lsls	r2, r1, #6
 800646e:	4651      	mov	r1, sl
 8006470:	ebb2 0801 	subs.w	r8, r2, r1
 8006474:	4659      	mov	r1, fp
 8006476:	eb63 0901 	sbc.w	r9, r3, r1
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800648a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800648e:	4690      	mov	r8, r2
 8006490:	4699      	mov	r9, r3
 8006492:	4623      	mov	r3, r4
 8006494:	eb18 0303 	adds.w	r3, r8, r3
 8006498:	60bb      	str	r3, [r7, #8]
 800649a:	462b      	mov	r3, r5
 800649c:	eb49 0303 	adc.w	r3, r9, r3
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064ae:	4629      	mov	r1, r5
 80064b0:	028b      	lsls	r3, r1, #10
 80064b2:	4621      	mov	r1, r4
 80064b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064b8:	4621      	mov	r1, r4
 80064ba:	028a      	lsls	r2, r1, #10
 80064bc:	4610      	mov	r0, r2
 80064be:	4619      	mov	r1, r3
 80064c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064c2:	2200      	movs	r2, #0
 80064c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064cc:	f7fa fb74 	bl	8000bb8 <__aeabi_uldivmod>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4613      	mov	r3, r2
 80064d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064d8:	e058      	b.n	800658c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064da:	4b38      	ldr	r3, [pc, #224]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	099b      	lsrs	r3, r3, #6
 80064e0:	2200      	movs	r2, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	4611      	mov	r1, r2
 80064e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064ea:	623b      	str	r3, [r7, #32]
 80064ec:	2300      	movs	r3, #0
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064f4:	4642      	mov	r2, r8
 80064f6:	464b      	mov	r3, r9
 80064f8:	f04f 0000 	mov.w	r0, #0
 80064fc:	f04f 0100 	mov.w	r1, #0
 8006500:	0159      	lsls	r1, r3, #5
 8006502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006506:	0150      	lsls	r0, r2, #5
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4641      	mov	r1, r8
 800650e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006512:	4649      	mov	r1, r9
 8006514:	eb63 0b01 	sbc.w	fp, r3, r1
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800652c:	ebb2 040a 	subs.w	r4, r2, sl
 8006530:	eb63 050b 	sbc.w	r5, r3, fp
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	00eb      	lsls	r3, r5, #3
 800653e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006542:	00e2      	lsls	r2, r4, #3
 8006544:	4614      	mov	r4, r2
 8006546:	461d      	mov	r5, r3
 8006548:	4643      	mov	r3, r8
 800654a:	18e3      	adds	r3, r4, r3
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	464b      	mov	r3, r9
 8006550:	eb45 0303 	adc.w	r3, r5, r3
 8006554:	607b      	str	r3, [r7, #4]
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006562:	4629      	mov	r1, r5
 8006564:	028b      	lsls	r3, r1, #10
 8006566:	4621      	mov	r1, r4
 8006568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800656c:	4621      	mov	r1, r4
 800656e:	028a      	lsls	r2, r1, #10
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006576:	2200      	movs	r2, #0
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	61fa      	str	r2, [r7, #28]
 800657c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006580:	f7fa fb1a 	bl	8000bb8 <__aeabi_uldivmod>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4613      	mov	r3, r2
 800658a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800658c:	4b0b      	ldr	r3, [pc, #44]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	0c1b      	lsrs	r3, r3, #16
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	3301      	adds	r3, #1
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800659c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800659e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065a6:	e002      	b.n	80065ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065a8:	4b05      	ldr	r3, [pc, #20]	@ (80065c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80065aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3750      	adds	r7, #80	@ 0x50
 80065b4:	46bd      	mov	sp, r7
 80065b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ba:	bf00      	nop
 80065bc:	40023800 	.word	0x40023800
 80065c0:	00f42400 	.word	0x00f42400

080065c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065c8:	4b03      	ldr	r3, [pc, #12]	@ (80065d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80065ca:	681b      	ldr	r3, [r3, #0]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	20000058 	.word	0x20000058

080065dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065e0:	f7ff fff0 	bl	80065c4 <HAL_RCC_GetHCLKFreq>
 80065e4:	4602      	mov	r2, r0
 80065e6:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	0a9b      	lsrs	r3, r3, #10
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	4903      	ldr	r1, [pc, #12]	@ (8006600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065f2:	5ccb      	ldrb	r3, [r1, r3]
 80065f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40023800 	.word	0x40023800
 8006600:	0800b7a8 	.word	0x0800b7a8

08006604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006608:	f7ff ffdc 	bl	80065c4 <HAL_RCC_GetHCLKFreq>
 800660c:	4602      	mov	r2, r0
 800660e:	4b05      	ldr	r3, [pc, #20]	@ (8006624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	0b5b      	lsrs	r3, r3, #13
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	4903      	ldr	r1, [pc, #12]	@ (8006628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800661a:	5ccb      	ldrb	r3, [r1, r3]
 800661c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006620:	4618      	mov	r0, r3
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40023800 	.word	0x40023800
 8006628:	0800b7a8 	.word	0x0800b7a8

0800662c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e041      	b.n	80066c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fc fca6 	bl	8002fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3304      	adds	r3, #4
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f000 fb86 	bl	8006d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e041      	b.n	8006760 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d106      	bne.n	80066f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7fc fba3 	bl	8002e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2202      	movs	r2, #2
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3304      	adds	r3, #4
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f000 fb37 	bl	8006d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <HAL_TIM_PWM_Start+0x24>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	bf14      	ite	ne
 8006784:	2301      	movne	r3, #1
 8006786:	2300      	moveq	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	e022      	b.n	80067d2 <HAL_TIM_PWM_Start+0x6a>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b04      	cmp	r3, #4
 8006790:	d109      	bne.n	80067a6 <HAL_TIM_PWM_Start+0x3e>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b01      	cmp	r3, #1
 800679c:	bf14      	ite	ne
 800679e:	2301      	movne	r3, #1
 80067a0:	2300      	moveq	r3, #0
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	e015      	b.n	80067d2 <HAL_TIM_PWM_Start+0x6a>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d109      	bne.n	80067c0 <HAL_TIM_PWM_Start+0x58>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	bf14      	ite	ne
 80067b8:	2301      	movne	r3, #1
 80067ba:	2300      	moveq	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	e008      	b.n	80067d2 <HAL_TIM_PWM_Start+0x6a>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	bf14      	ite	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	2300      	moveq	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e068      	b.n	80068ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <HAL_TIM_PWM_Start+0x82>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067e8:	e013      	b.n	8006812 <HAL_TIM_PWM_Start+0xaa>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d104      	bne.n	80067fa <HAL_TIM_PWM_Start+0x92>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067f8:	e00b      	b.n	8006812 <HAL_TIM_PWM_Start+0xaa>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d104      	bne.n	800680a <HAL_TIM_PWM_Start+0xa2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006808:	e003      	b.n	8006812 <HAL_TIM_PWM_Start+0xaa>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2202      	movs	r2, #2
 800680e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2201      	movs	r2, #1
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f000 fcc0 	bl	80071a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a23      	ldr	r2, [pc, #140]	@ (80068b4 <HAL_TIM_PWM_Start+0x14c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d107      	bne.n	800683a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006838:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1d      	ldr	r2, [pc, #116]	@ (80068b4 <HAL_TIM_PWM_Start+0x14c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d018      	beq.n	8006876 <HAL_TIM_PWM_Start+0x10e>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684c:	d013      	beq.n	8006876 <HAL_TIM_PWM_Start+0x10e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a19      	ldr	r2, [pc, #100]	@ (80068b8 <HAL_TIM_PWM_Start+0x150>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00e      	beq.n	8006876 <HAL_TIM_PWM_Start+0x10e>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a17      	ldr	r2, [pc, #92]	@ (80068bc <HAL_TIM_PWM_Start+0x154>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d009      	beq.n	8006876 <HAL_TIM_PWM_Start+0x10e>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a16      	ldr	r2, [pc, #88]	@ (80068c0 <HAL_TIM_PWM_Start+0x158>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d004      	beq.n	8006876 <HAL_TIM_PWM_Start+0x10e>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a14      	ldr	r2, [pc, #80]	@ (80068c4 <HAL_TIM_PWM_Start+0x15c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d111      	bne.n	800689a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b06      	cmp	r3, #6
 8006886:	d010      	beq.n	80068aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006898:	e007      	b.n	80068aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0201 	orr.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40000400 	.word	0x40000400
 80068bc:	40000800 	.word	0x40000800
 80068c0:	40000c00 	.word	0x40000c00
 80068c4:	40014000 	.word	0x40014000

080068c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fc60 	bl	80071a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a29      	ldr	r2, [pc, #164]	@ (800698c <HAL_TIM_PWM_Stop+0xc4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d117      	bne.n	800691a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80068f4:	4013      	ands	r3, r2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10f      	bne.n	800691a <HAL_TIM_PWM_Stop+0x52>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	f240 4344 	movw	r3, #1092	@ 0x444
 8006904:	4013      	ands	r3, r2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d107      	bne.n	800691a <HAL_TIM_PWM_Stop+0x52>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006918:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006924:	4013      	ands	r3, r2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10f      	bne.n	800694a <HAL_TIM_PWM_Stop+0x82>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6a1a      	ldr	r2, [r3, #32]
 8006930:	f240 4344 	movw	r3, #1092	@ 0x444
 8006934:	4013      	ands	r3, r2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d107      	bne.n	800694a <HAL_TIM_PWM_Stop+0x82>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <HAL_TIM_PWM_Stop+0x92>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006958:	e013      	b.n	8006982 <HAL_TIM_PWM_Stop+0xba>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b04      	cmp	r3, #4
 800695e:	d104      	bne.n	800696a <HAL_TIM_PWM_Stop+0xa2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006968:	e00b      	b.n	8006982 <HAL_TIM_PWM_Stop+0xba>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b08      	cmp	r3, #8
 800696e:	d104      	bne.n	800697a <HAL_TIM_PWM_Stop+0xb2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006978:	e003      	b.n	8006982 <HAL_TIM_PWM_Stop+0xba>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40010000 	.word	0x40010000

08006990 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e097      	b.n	8006ad4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fc fa77 	bl	8002eac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2202      	movs	r2, #2
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6812      	ldr	r2, [r2, #0]
 80069d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069d4:	f023 0307 	bic.w	r3, r3, #7
 80069d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f000 f9c9 	bl	8006d7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a12:	f023 0303 	bic.w	r3, r3, #3
 8006a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	4313      	orrs	r3, r2
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006a30:	f023 030c 	bic.w	r3, r3, #12
 8006a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	011a      	lsls	r2, r3, #4
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	031b      	lsls	r3, r3, #12
 8006a60:	4313      	orrs	r3, r2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006a6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006a76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	4313      	orrs	r3, r2
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006aec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006af4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006afc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d110      	bne.n	8006b2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d102      	bne.n	8006b18 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b12:	7b7b      	ldrb	r3, [r7, #13]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d001      	beq.n	8006b1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e069      	b.n	8006bf0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b2c:	e031      	b.n	8006b92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d110      	bne.n	8006b56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d102      	bne.n	8006b40 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b3a:	7b3b      	ldrb	r3, [r7, #12]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d001      	beq.n	8006b44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e055      	b.n	8006bf0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b54:	e01d      	b.n	8006b92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d108      	bne.n	8006b6e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d105      	bne.n	8006b6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b62:	7b7b      	ldrb	r3, [r7, #13]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d102      	bne.n	8006b6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b68:	7b3b      	ldrb	r3, [r7, #12]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d001      	beq.n	8006b72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e03e      	b.n	8006bf0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2202      	movs	r2, #2
 8006b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_TIM_Encoder_Start+0xc4>
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d008      	beq.n	8006bb0 <HAL_TIM_Encoder_Start+0xd4>
 8006b9e:	e00f      	b.n	8006bc0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 faf9 	bl	80071a0 <TIM_CCxChannelCmd>
      break;
 8006bae:	e016      	b.n	8006bde <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	2104      	movs	r1, #4
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 faf1 	bl	80071a0 <TIM_CCxChannelCmd>
      break;
 8006bbe:	e00e      	b.n	8006bde <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fae9 	bl	80071a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	2104      	movs	r1, #4
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fae2 	bl	80071a0 <TIM_CCxChannelCmd>
      break;
 8006bdc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0201 	orr.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c12:	2302      	movs	r3, #2
 8006c14:	e0ae      	b.n	8006d74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b0c      	cmp	r3, #12
 8006c22:	f200 809f 	bhi.w	8006d64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c26:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c61 	.word	0x08006c61
 8006c30:	08006d65 	.word	0x08006d65
 8006c34:	08006d65 	.word	0x08006d65
 8006c38:	08006d65 	.word	0x08006d65
 8006c3c:	08006ca1 	.word	0x08006ca1
 8006c40:	08006d65 	.word	0x08006d65
 8006c44:	08006d65 	.word	0x08006d65
 8006c48:	08006d65 	.word	0x08006d65
 8006c4c:	08006ce3 	.word	0x08006ce3
 8006c50:	08006d65 	.word	0x08006d65
 8006c54:	08006d65 	.word	0x08006d65
 8006c58:	08006d65 	.word	0x08006d65
 8006c5c:	08006d23 	.word	0x08006d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 f90e 	bl	8006e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0208 	orr.w	r2, r2, #8
 8006c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0204 	bic.w	r2, r2, #4
 8006c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6999      	ldr	r1, [r3, #24]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	691a      	ldr	r2, [r3, #16]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	619a      	str	r2, [r3, #24]
      break;
 8006c9e:	e064      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 f954 	bl	8006f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6999      	ldr	r1, [r3, #24]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	021a      	lsls	r2, r3, #8
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	619a      	str	r2, [r3, #24]
      break;
 8006ce0:	e043      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f99f 	bl	800702c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f042 0208 	orr.w	r2, r2, #8
 8006cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69da      	ldr	r2, [r3, #28]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0204 	bic.w	r2, r2, #4
 8006d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69d9      	ldr	r1, [r3, #28]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	61da      	str	r2, [r3, #28]
      break;
 8006d20:	e023      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 f9e9 	bl	8007100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69d9      	ldr	r1, [r3, #28]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	021a      	lsls	r2, r3, #8
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	61da      	str	r2, [r3, #28]
      break;
 8006d62:	e002      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
      break;
 8006d68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a37      	ldr	r2, [pc, #220]	@ (8006e6c <TIM_Base_SetConfig+0xf0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00f      	beq.n	8006db4 <TIM_Base_SetConfig+0x38>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d9a:	d00b      	beq.n	8006db4 <TIM_Base_SetConfig+0x38>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a34      	ldr	r2, [pc, #208]	@ (8006e70 <TIM_Base_SetConfig+0xf4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d007      	beq.n	8006db4 <TIM_Base_SetConfig+0x38>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a33      	ldr	r2, [pc, #204]	@ (8006e74 <TIM_Base_SetConfig+0xf8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d003      	beq.n	8006db4 <TIM_Base_SetConfig+0x38>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a32      	ldr	r2, [pc, #200]	@ (8006e78 <TIM_Base_SetConfig+0xfc>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d108      	bne.n	8006dc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a28      	ldr	r2, [pc, #160]	@ (8006e6c <TIM_Base_SetConfig+0xf0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01b      	beq.n	8006e06 <TIM_Base_SetConfig+0x8a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd4:	d017      	beq.n	8006e06 <TIM_Base_SetConfig+0x8a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a25      	ldr	r2, [pc, #148]	@ (8006e70 <TIM_Base_SetConfig+0xf4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <TIM_Base_SetConfig+0x8a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a24      	ldr	r2, [pc, #144]	@ (8006e74 <TIM_Base_SetConfig+0xf8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00f      	beq.n	8006e06 <TIM_Base_SetConfig+0x8a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a23      	ldr	r2, [pc, #140]	@ (8006e78 <TIM_Base_SetConfig+0xfc>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0x8a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a22      	ldr	r2, [pc, #136]	@ (8006e7c <TIM_Base_SetConfig+0x100>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0x8a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a21      	ldr	r2, [pc, #132]	@ (8006e80 <TIM_Base_SetConfig+0x104>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0x8a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a20      	ldr	r2, [pc, #128]	@ (8006e84 <TIM_Base_SetConfig+0x108>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a0c      	ldr	r2, [pc, #48]	@ (8006e6c <TIM_Base_SetConfig+0xf0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d103      	bne.n	8006e46 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f043 0204 	orr.w	r2, r3, #4
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	601a      	str	r2, [r3, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	40010000 	.word	0x40010000
 8006e70:	40000400 	.word	0x40000400
 8006e74:	40000800 	.word	0x40000800
 8006e78:	40000c00 	.word	0x40000c00
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800

08006e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f023 0201 	bic.w	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0303 	bic.w	r3, r3, #3
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 0302 	bic.w	r3, r3, #2
 8006ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a1c      	ldr	r2, [pc, #112]	@ (8006f50 <TIM_OC1_SetConfig+0xc8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d10c      	bne.n	8006efe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f023 0308 	bic.w	r3, r3, #8
 8006eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f023 0304 	bic.w	r3, r3, #4
 8006efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a13      	ldr	r2, [pc, #76]	@ (8006f50 <TIM_OC1_SetConfig+0xc8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d111      	bne.n	8006f2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	621a      	str	r2, [r3, #32]
}
 8006f44:	bf00      	nop
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	40010000 	.word	0x40010000

08006f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	f023 0210 	bic.w	r2, r3, #16
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f023 0320 	bic.w	r3, r3, #32
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1e      	ldr	r2, [pc, #120]	@ (8007028 <TIM_OC2_SetConfig+0xd4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d10d      	bne.n	8006fd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a15      	ldr	r2, [pc, #84]	@ (8007028 <TIM_OC2_SetConfig+0xd4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d113      	bne.n	8007000 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	621a      	str	r2, [r3, #32]
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40010000 	.word	0x40010000

0800702c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800705a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1d      	ldr	r2, [pc, #116]	@ (80070fc <TIM_OC3_SetConfig+0xd0>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d10d      	bne.n	80070a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a14      	ldr	r2, [pc, #80]	@ (80070fc <TIM_OC3_SetConfig+0xd0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d113      	bne.n	80070d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	621a      	str	r2, [r3, #32]
}
 80070f0:	bf00      	nop
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	40010000 	.word	0x40010000

08007100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800712e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	021b      	lsls	r3, r3, #8
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4313      	orrs	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800714a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	031b      	lsls	r3, r3, #12
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a10      	ldr	r2, [pc, #64]	@ (800719c <TIM_OC4_SetConfig+0x9c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d109      	bne.n	8007174 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	019b      	lsls	r3, r3, #6
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40010000 	.word	0x40010000

080071a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2201      	movs	r2, #1
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6a1a      	ldr	r2, [r3, #32]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	43db      	mvns	r3, r3
 80071c2:	401a      	ands	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a1a      	ldr	r2, [r3, #32]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	fa01 f303 	lsl.w	r3, r1, r3
 80071d8:	431a      	orrs	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
	...

080071ec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d109      	bne.n	8007210 <HAL_TIMEx_PWMN_Start+0x24>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b01      	cmp	r3, #1
 8007206:	bf14      	ite	ne
 8007208:	2301      	movne	r3, #1
 800720a:	2300      	moveq	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	e022      	b.n	8007256 <HAL_TIMEx_PWMN_Start+0x6a>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2b04      	cmp	r3, #4
 8007214:	d109      	bne.n	800722a <HAL_TIMEx_PWMN_Start+0x3e>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b01      	cmp	r3, #1
 8007220:	bf14      	ite	ne
 8007222:	2301      	movne	r3, #1
 8007224:	2300      	moveq	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	e015      	b.n	8007256 <HAL_TIMEx_PWMN_Start+0x6a>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b08      	cmp	r3, #8
 800722e:	d109      	bne.n	8007244 <HAL_TIMEx_PWMN_Start+0x58>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b01      	cmp	r3, #1
 800723a:	bf14      	ite	ne
 800723c:	2301      	movne	r3, #1
 800723e:	2300      	moveq	r3, #0
 8007240:	b2db      	uxtb	r3, r3
 8007242:	e008      	b.n	8007256 <HAL_TIMEx_PWMN_Start+0x6a>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e063      	b.n	8007326 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <HAL_TIMEx_PWMN_Start+0x82>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800726c:	e013      	b.n	8007296 <HAL_TIMEx_PWMN_Start+0xaa>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b04      	cmp	r3, #4
 8007272:	d104      	bne.n	800727e <HAL_TIMEx_PWMN_Start+0x92>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800727c:	e00b      	b.n	8007296 <HAL_TIMEx_PWMN_Start+0xaa>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b08      	cmp	r3, #8
 8007282:	d104      	bne.n	800728e <HAL_TIMEx_PWMN_Start+0xa2>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800728c:	e003      	b.n	8007296 <HAL_TIMEx_PWMN_Start+0xaa>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2204      	movs	r2, #4
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f910 	bl	80074c4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007330 <HAL_TIMEx_PWMN_Start+0x144>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d018      	beq.n	80072f0 <HAL_TIMEx_PWMN_Start+0x104>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c6:	d013      	beq.n	80072f0 <HAL_TIMEx_PWMN_Start+0x104>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a19      	ldr	r2, [pc, #100]	@ (8007334 <HAL_TIMEx_PWMN_Start+0x148>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00e      	beq.n	80072f0 <HAL_TIMEx_PWMN_Start+0x104>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a18      	ldr	r2, [pc, #96]	@ (8007338 <HAL_TIMEx_PWMN_Start+0x14c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d009      	beq.n	80072f0 <HAL_TIMEx_PWMN_Start+0x104>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a16      	ldr	r2, [pc, #88]	@ (800733c <HAL_TIMEx_PWMN_Start+0x150>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d004      	beq.n	80072f0 <HAL_TIMEx_PWMN_Start+0x104>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a15      	ldr	r2, [pc, #84]	@ (8007340 <HAL_TIMEx_PWMN_Start+0x154>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d111      	bne.n	8007314 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b06      	cmp	r3, #6
 8007300:	d010      	beq.n	8007324 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 0201 	orr.w	r2, r2, #1
 8007310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007312:	e007      	b.n	8007324 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	40010000 	.word	0x40010000
 8007334:	40000400 	.word	0x40000400
 8007338:	40000800 	.word	0x40000800
 800733c:	40000c00 	.word	0x40000c00
 8007340:	40014000 	.word	0x40014000

08007344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007354:	2b01      	cmp	r3, #1
 8007356:	d101      	bne.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007358:	2302      	movs	r3, #2
 800735a:	e050      	b.n	80073fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a1c      	ldr	r2, [pc, #112]	@ (800740c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d018      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073a8:	d013      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a18      	ldr	r2, [pc, #96]	@ (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00e      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a16      	ldr	r2, [pc, #88]	@ (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d009      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a15      	ldr	r2, [pc, #84]	@ (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d004      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a13      	ldr	r2, [pc, #76]	@ (800741c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d10c      	bne.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40010000 	.word	0x40010000
 8007410:	40000400 	.word	0x40000400
 8007414:	40000800 	.word	0x40000800
 8007418:	40000c00 	.word	0x40000c00
 800741c:	40014000 	.word	0x40014000

08007420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007438:	2302      	movs	r3, #2
 800743a:	e03d      	b.n	80074b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	2204      	movs	r2, #4
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a1a      	ldr	r2, [r3, #32]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	43db      	mvns	r3, r3
 80074e6:	401a      	ands	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a1a      	ldr	r2, [r3, #32]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	fa01 f303 	lsl.w	r3, r1, r3
 80074fc:	431a      	orrs	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	621a      	str	r2, [r3, #32]
}
 8007502:	bf00      	nop
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e042      	b.n	80075a6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d106      	bne.n	800753a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7fb fe3b 	bl	80031b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2224      	movs	r2, #36	@ 0x24
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007550:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fdd4 	bl	8008100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691a      	ldr	r2, [r3, #16]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007566:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695a      	ldr	r2, [r3, #20]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007576:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007586:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b08a      	sub	sp, #40	@ 0x28
 80075b2:	af02      	add	r7, sp, #8
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b20      	cmp	r3, #32
 80075cc:	d175      	bne.n	80076ba <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_UART_Transmit+0x2c>
 80075d4:	88fb      	ldrh	r3, [r7, #6]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e06e      	b.n	80076bc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2221      	movs	r2, #33	@ 0x21
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075ec:	f7fb ffd2 	bl	8003594 <HAL_GetTick>
 80075f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	88fa      	ldrh	r2, [r7, #6]
 80075f6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	88fa      	ldrh	r2, [r7, #6]
 80075fc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007606:	d108      	bne.n	800761a <HAL_UART_Transmit+0x6c>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007610:	2300      	movs	r3, #0
 8007612:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e003      	b.n	8007622 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007622:	e02e      	b.n	8007682 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2200      	movs	r2, #0
 800762c:	2180      	movs	r1, #128	@ 0x80
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fb38 	bl	8007ca4 <UART_WaitOnFlagUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d005      	beq.n	8007646 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2220      	movs	r2, #32
 800763e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e03a      	b.n	80076bc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10b      	bne.n	8007664 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800765a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	3302      	adds	r3, #2
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	e007      	b.n	8007674 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	781a      	ldrb	r2, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	3301      	adds	r3, #1
 8007672:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1cb      	bne.n	8007624 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2200      	movs	r2, #0
 8007694:	2140      	movs	r1, #64	@ 0x40
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fb04 	bl	8007ca4 <UART_WaitOnFlagUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d005      	beq.n	80076ae <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e006      	b.n	80076bc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2220      	movs	r2, #32
 80076b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	e000      	b.n	80076bc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80076ba:	2302      	movs	r3, #2
  }
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3720      	adds	r7, #32
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b20      	cmp	r3, #32
 80076dc:	d112      	bne.n	8007704 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <HAL_UART_Receive_IT+0x26>
 80076e4:	88fb      	ldrh	r3, [r7, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e00b      	b.n	8007706 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076f4:	88fb      	ldrh	r3, [r7, #6]
 80076f6:	461a      	mov	r2, r3
 80076f8:	68b9      	ldr	r1, [r7, #8]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 fb2b 	bl	8007d56 <UART_Start_Receive_IT>
 8007700:	4603      	mov	r3, r0
 8007702:	e000      	b.n	8007706 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007704:	2302      	movs	r3, #2
  }
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b0ba      	sub	sp, #232	@ 0xe8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007736:	2300      	movs	r3, #0
 8007738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800773c:	2300      	movs	r3, #0
 800773e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800774e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10f      	bne.n	8007776 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d009      	beq.n	8007776 <HAL_UART_IRQHandler+0x66>
 8007762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fc07 	bl	8007f82 <UART_Receive_IT>
      return;
 8007774:	e273      	b.n	8007c5e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 80de 	beq.w	800793c <HAL_UART_IRQHandler+0x22c>
 8007780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	d106      	bne.n	800779a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800778c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007790:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 80d1 	beq.w	800793c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800779a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <HAL_UART_IRQHandler+0xae>
 80077a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b6:	f043 0201 	orr.w	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00b      	beq.n	80077e2 <HAL_UART_IRQHandler+0xd2>
 80077ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d005      	beq.n	80077e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077da:	f043 0202 	orr.w	r2, r3, #2
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <HAL_UART_IRQHandler+0xf6>
 80077ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d005      	beq.n	8007806 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077fe:	f043 0204 	orr.w	r2, r3, #4
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d011      	beq.n	8007836 <HAL_UART_IRQHandler+0x126>
 8007812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d105      	bne.n	800782a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800781e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782e:	f043 0208 	orr.w	r2, r3, #8
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 820a 	beq.w	8007c54 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b00      	cmp	r3, #0
 800784a:	d008      	beq.n	800785e <HAL_UART_IRQHandler+0x14e>
 800784c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007850:	f003 0320 	and.w	r3, r3, #32
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fb92 	bl	8007f82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007868:	2b40      	cmp	r3, #64	@ 0x40
 800786a:	bf0c      	ite	eq
 800786c:	2301      	moveq	r3, #1
 800786e:	2300      	movne	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d103      	bne.n	800788a <HAL_UART_IRQHandler+0x17a>
 8007882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007886:	2b00      	cmp	r3, #0
 8007888:	d04f      	beq.n	800792a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa9d 	bl	8007dca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800789a:	2b40      	cmp	r3, #64	@ 0x40
 800789c:	d141      	bne.n	8007922 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3314      	adds	r3, #20
 80078a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3314      	adds	r3, #20
 80078c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80078ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80078ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1d9      	bne.n	800789e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d013      	beq.n	800791a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078f6:	4a8a      	ldr	r2, [pc, #552]	@ (8007b20 <HAL_UART_IRQHandler+0x410>)
 80078f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fc fa6b 	bl	8003dda <HAL_DMA_Abort_IT>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d016      	beq.n	8007938 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800790e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007918:	e00e      	b.n	8007938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f9ac 	bl	8007c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007920:	e00a      	b.n	8007938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f9a8 	bl	8007c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007928:	e006      	b.n	8007938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f9a4 	bl	8007c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007936:	e18d      	b.n	8007c54 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007938:	bf00      	nop
    return;
 800793a:	e18b      	b.n	8007c54 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007940:	2b01      	cmp	r3, #1
 8007942:	f040 8167 	bne.w	8007c14 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794a:	f003 0310 	and.w	r3, r3, #16
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 8160 	beq.w	8007c14 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007958:	f003 0310 	and.w	r3, r3, #16
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8159 	beq.w	8007c14 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007962:	2300      	movs	r3, #0
 8007964:	60bb      	str	r3, [r7, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60bb      	str	r3, [r7, #8]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	60bb      	str	r3, [r7, #8]
 8007976:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007982:	2b40      	cmp	r3, #64	@ 0x40
 8007984:	f040 80ce 	bne.w	8007b24 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 80a9 	beq.w	8007af0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80079a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079a6:	429a      	cmp	r2, r3
 80079a8:	f080 80a2 	bcs.w	8007af0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079be:	f000 8088 	beq.w	8007ad2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	330c      	adds	r3, #12
 80079c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80079d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	330c      	adds	r3, #12
 80079ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80079ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80079fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1d9      	bne.n	80079c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3314      	adds	r3, #20
 8007a14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a20:	f023 0301 	bic.w	r3, r3, #1
 8007a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3314      	adds	r3, #20
 8007a2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e1      	bne.n	8007a0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3314      	adds	r3, #20
 8007a50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3314      	adds	r3, #20
 8007a6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e3      	bne.n	8007a4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aa2:	f023 0310 	bic.w	r3, r3, #16
 8007aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	330c      	adds	r3, #12
 8007ab0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007ab4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007ab6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007aba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e3      	bne.n	8007a90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fc f914 	bl	8003cfa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f8cf 	bl	8007c8c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007aee:	e0b3      	b.n	8007c58 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007af4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007af8:	429a      	cmp	r2, r3
 8007afa:	f040 80ad 	bne.w	8007c58 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b08:	f040 80a6 	bne.w	8007c58 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f8b7 	bl	8007c8c <HAL_UARTEx_RxEventCallback>
      return;
 8007b1e:	e09b      	b.n	8007c58 <HAL_UART_IRQHandler+0x548>
 8007b20:	08007e91 	.word	0x08007e91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 808e 	beq.w	8007c5c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 8089 	beq.w	8007c5c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	330c      	adds	r3, #12
 8007b50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	330c      	adds	r3, #12
 8007b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007b6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e3      	bne.n	8007b4a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3314      	adds	r3, #20
 8007b88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	623b      	str	r3, [r7, #32]
   return(result);
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ba6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e3      	bne.n	8007b82 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	330c      	adds	r3, #12
 8007be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007bec:	61fa      	str	r2, [r7, #28]
 8007bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	69b9      	ldr	r1, [r7, #24]
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e3      	bne.n	8007bc8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f83d 	bl	8007c8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c12:	e023      	b.n	8007c5c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d009      	beq.n	8007c34 <HAL_UART_IRQHandler+0x524>
 8007c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f940 	bl	8007eb2 <UART_Transmit_IT>
    return;
 8007c32:	e014      	b.n	8007c5e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00e      	beq.n	8007c5e <HAL_UART_IRQHandler+0x54e>
 8007c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d008      	beq.n	8007c5e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f980 	bl	8007f52 <UART_EndTransmit_IT>
    return;
 8007c52:	e004      	b.n	8007c5e <HAL_UART_IRQHandler+0x54e>
    return;
 8007c54:	bf00      	nop
 8007c56:	e002      	b.n	8007c5e <HAL_UART_IRQHandler+0x54e>
      return;
 8007c58:	bf00      	nop
 8007c5a:	e000      	b.n	8007c5e <HAL_UART_IRQHandler+0x54e>
      return;
 8007c5c:	bf00      	nop
  }
}
 8007c5e:	37e8      	adds	r7, #232	@ 0xe8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cb4:	e03b      	b.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbc:	d037      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cbe:	f7fb fc69 	bl	8003594 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	6a3a      	ldr	r2, [r7, #32]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d302      	bcc.n	8007cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e03a      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f003 0304 	and.w	r3, r3, #4
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d023      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b80      	cmp	r3, #128	@ 0x80
 8007cea:	d020      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b40      	cmp	r3, #64	@ 0x40
 8007cf0:	d01d      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0308 	and.w	r3, r3, #8
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d116      	bne.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007d00:	2300      	movs	r3, #0
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 f857 	bl	8007dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2208      	movs	r2, #8
 8007d20:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e00f      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	4013      	ands	r3, r2
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	bf0c      	ite	eq
 8007d3e:	2301      	moveq	r3, #1
 8007d40:	2300      	movne	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d0b4      	beq.n	8007cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3718      	adds	r7, #24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	4613      	mov	r3, r2
 8007d62:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	88fa      	ldrh	r2, [r7, #6]
 8007d6e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2222      	movs	r2, #34	@ 0x22
 8007d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d9a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	695a      	ldr	r2, [r3, #20]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 0220 	orr.w	r2, r2, #32
 8007dba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b095      	sub	sp, #84	@ 0x54
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	330c      	adds	r3, #12
 8007dd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	330c      	adds	r3, #12
 8007df0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007df2:	643a      	str	r2, [r7, #64]	@ 0x40
 8007df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007df8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e5      	bne.n	8007dd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3314      	adds	r3, #20
 8007e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3314      	adds	r3, #20
 8007e24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e5      	bne.n	8007e06 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d119      	bne.n	8007e76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	330c      	adds	r3, #12
 8007e48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f023 0310 	bic.w	r3, r3, #16
 8007e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	330c      	adds	r3, #12
 8007e60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e62:	61ba      	str	r2, [r7, #24]
 8007e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	6979      	ldr	r1, [r7, #20]
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e5      	bne.n	8007e42 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e84:	bf00      	nop
 8007e86:	3754      	adds	r7, #84	@ 0x54
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff fee7 	bl	8007c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eaa:	bf00      	nop
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b21      	cmp	r3, #33	@ 0x21
 8007ec4:	d13e      	bne.n	8007f44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ece:	d114      	bne.n	8007efa <UART_Transmit_IT+0x48>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d110      	bne.n	8007efa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	1c9a      	adds	r2, r3, #2
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	621a      	str	r2, [r3, #32]
 8007ef8:	e008      	b.n	8007f0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	1c59      	adds	r1, r3, #1
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	6211      	str	r1, [r2, #32]
 8007f04:	781a      	ldrb	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10f      	bne.n	8007f40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	e000      	b.n	8007f46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f44:	2302      	movs	r3, #2
  }
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7ff fe76 	bl	8007c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b08c      	sub	sp, #48	@ 0x30
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b22      	cmp	r3, #34	@ 0x22
 8007f9c:	f040 80aa 	bne.w	80080f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fa8:	d115      	bne.n	8007fd6 <UART_Receive_IT+0x54>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d111      	bne.n	8007fd6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fce:	1c9a      	adds	r2, r3, #2
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fd4:	e024      	b.n	8008020 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fe4:	d007      	beq.n	8007ff6 <UART_Receive_IT+0x74>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <UART_Receive_IT+0x82>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d106      	bne.n	8008004 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008000:	701a      	strb	r2, [r3, #0]
 8008002:	e008      	b.n	8008016 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008010:	b2da      	uxtb	r2, r3
 8008012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008014:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008024:	b29b      	uxth	r3, r3
 8008026:	3b01      	subs	r3, #1
 8008028:	b29b      	uxth	r3, r3
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	4619      	mov	r1, r3
 800802e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008030:	2b00      	cmp	r3, #0
 8008032:	d15d      	bne.n	80080f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 0220 	bic.w	r2, r2, #32
 8008042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	695a      	ldr	r2, [r3, #20]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0201 	bic.w	r2, r2, #1
 8008062:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2220      	movs	r2, #32
 8008068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008076:	2b01      	cmp	r3, #1
 8008078:	d135      	bne.n	80080e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	330c      	adds	r3, #12
 8008086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	e853 3f00 	ldrex	r3, [r3]
 800808e:	613b      	str	r3, [r7, #16]
   return(result);
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f023 0310 	bic.w	r3, r3, #16
 8008096:	627b      	str	r3, [r7, #36]	@ 0x24
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	330c      	adds	r3, #12
 800809e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080a0:	623a      	str	r2, [r7, #32]
 80080a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a4:	69f9      	ldr	r1, [r7, #28]
 80080a6:	6a3a      	ldr	r2, [r7, #32]
 80080a8:	e841 2300 	strex	r3, r2, [r1]
 80080ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e5      	bne.n	8008080 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0310 	and.w	r3, r3, #16
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d10a      	bne.n	80080d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff fdd4 	bl	8007c8c <HAL_UARTEx_RxEventCallback>
 80080e4:	e002      	b.n	80080ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fa f888 	bl	80021fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	e002      	b.n	80080f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	e000      	b.n	80080f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80080f4:	2302      	movs	r3, #2
  }
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3730      	adds	r7, #48	@ 0x30
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008104:	b0c0      	sub	sp, #256	@ 0x100
 8008106:	af00      	add	r7, sp, #0
 8008108:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800811c:	68d9      	ldr	r1, [r3, #12]
 800811e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	ea40 0301 	orr.w	r3, r0, r1
 8008128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800812a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800812e:	689a      	ldr	r2, [r3, #8]
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	431a      	orrs	r2, r3
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	431a      	orrs	r2, r3
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	4313      	orrs	r3, r2
 8008148:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800814c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008158:	f021 010c 	bic.w	r1, r1, #12
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008166:	430b      	orrs	r3, r1
 8008168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800816a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800817a:	6999      	ldr	r1, [r3, #24]
 800817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	ea40 0301 	orr.w	r3, r0, r1
 8008186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4b8f      	ldr	r3, [pc, #572]	@ (80083cc <UART_SetConfig+0x2cc>)
 8008190:	429a      	cmp	r2, r3
 8008192:	d005      	beq.n	80081a0 <UART_SetConfig+0xa0>
 8008194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4b8d      	ldr	r3, [pc, #564]	@ (80083d0 <UART_SetConfig+0x2d0>)
 800819c:	429a      	cmp	r2, r3
 800819e:	d104      	bne.n	80081aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081a0:	f7fe fa30 	bl	8006604 <HAL_RCC_GetPCLK2Freq>
 80081a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80081a8:	e003      	b.n	80081b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081aa:	f7fe fa17 	bl	80065dc <HAL_RCC_GetPCLK1Freq>
 80081ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081bc:	f040 810c 	bne.w	80083d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081c4:	2200      	movs	r2, #0
 80081c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80081ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80081d2:	4622      	mov	r2, r4
 80081d4:	462b      	mov	r3, r5
 80081d6:	1891      	adds	r1, r2, r2
 80081d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80081da:	415b      	adcs	r3, r3
 80081dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80081e2:	4621      	mov	r1, r4
 80081e4:	eb12 0801 	adds.w	r8, r2, r1
 80081e8:	4629      	mov	r1, r5
 80081ea:	eb43 0901 	adc.w	r9, r3, r1
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008202:	4690      	mov	r8, r2
 8008204:	4699      	mov	r9, r3
 8008206:	4623      	mov	r3, r4
 8008208:	eb18 0303 	adds.w	r3, r8, r3
 800820c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008210:	462b      	mov	r3, r5
 8008212:	eb49 0303 	adc.w	r3, r9, r3
 8008216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800821a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008226:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800822a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800822e:	460b      	mov	r3, r1
 8008230:	18db      	adds	r3, r3, r3
 8008232:	653b      	str	r3, [r7, #80]	@ 0x50
 8008234:	4613      	mov	r3, r2
 8008236:	eb42 0303 	adc.w	r3, r2, r3
 800823a:	657b      	str	r3, [r7, #84]	@ 0x54
 800823c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008244:	f7f8 fcb8 	bl	8000bb8 <__aeabi_uldivmod>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4b61      	ldr	r3, [pc, #388]	@ (80083d4 <UART_SetConfig+0x2d4>)
 800824e:	fba3 2302 	umull	r2, r3, r3, r2
 8008252:	095b      	lsrs	r3, r3, #5
 8008254:	011c      	lsls	r4, r3, #4
 8008256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800825a:	2200      	movs	r2, #0
 800825c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008260:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008268:	4642      	mov	r2, r8
 800826a:	464b      	mov	r3, r9
 800826c:	1891      	adds	r1, r2, r2
 800826e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008270:	415b      	adcs	r3, r3
 8008272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008278:	4641      	mov	r1, r8
 800827a:	eb12 0a01 	adds.w	sl, r2, r1
 800827e:	4649      	mov	r1, r9
 8008280:	eb43 0b01 	adc.w	fp, r3, r1
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	f04f 0300 	mov.w	r3, #0
 800828c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008298:	4692      	mov	sl, r2
 800829a:	469b      	mov	fp, r3
 800829c:	4643      	mov	r3, r8
 800829e:	eb1a 0303 	adds.w	r3, sl, r3
 80082a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082a6:	464b      	mov	r3, r9
 80082a8:	eb4b 0303 	adc.w	r3, fp, r3
 80082ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80082c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80082c4:	460b      	mov	r3, r1
 80082c6:	18db      	adds	r3, r3, r3
 80082c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80082ca:	4613      	mov	r3, r2
 80082cc:	eb42 0303 	adc.w	r3, r2, r3
 80082d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80082da:	f7f8 fc6d 	bl	8000bb8 <__aeabi_uldivmod>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4611      	mov	r1, r2
 80082e4:	4b3b      	ldr	r3, [pc, #236]	@ (80083d4 <UART_SetConfig+0x2d4>)
 80082e6:	fba3 2301 	umull	r2, r3, r3, r1
 80082ea:	095b      	lsrs	r3, r3, #5
 80082ec:	2264      	movs	r2, #100	@ 0x64
 80082ee:	fb02 f303 	mul.w	r3, r2, r3
 80082f2:	1acb      	subs	r3, r1, r3
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80082fa:	4b36      	ldr	r3, [pc, #216]	@ (80083d4 <UART_SetConfig+0x2d4>)
 80082fc:	fba3 2302 	umull	r2, r3, r3, r2
 8008300:	095b      	lsrs	r3, r3, #5
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008308:	441c      	add	r4, r3
 800830a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800830e:	2200      	movs	r2, #0
 8008310:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008314:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800831c:	4642      	mov	r2, r8
 800831e:	464b      	mov	r3, r9
 8008320:	1891      	adds	r1, r2, r2
 8008322:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008324:	415b      	adcs	r3, r3
 8008326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800832c:	4641      	mov	r1, r8
 800832e:	1851      	adds	r1, r2, r1
 8008330:	6339      	str	r1, [r7, #48]	@ 0x30
 8008332:	4649      	mov	r1, r9
 8008334:	414b      	adcs	r3, r1
 8008336:	637b      	str	r3, [r7, #52]	@ 0x34
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008344:	4659      	mov	r1, fp
 8008346:	00cb      	lsls	r3, r1, #3
 8008348:	4651      	mov	r1, sl
 800834a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800834e:	4651      	mov	r1, sl
 8008350:	00ca      	lsls	r2, r1, #3
 8008352:	4610      	mov	r0, r2
 8008354:	4619      	mov	r1, r3
 8008356:	4603      	mov	r3, r0
 8008358:	4642      	mov	r2, r8
 800835a:	189b      	adds	r3, r3, r2
 800835c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008360:	464b      	mov	r3, r9
 8008362:	460a      	mov	r2, r1
 8008364:	eb42 0303 	adc.w	r3, r2, r3
 8008368:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008378:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800837c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008380:	460b      	mov	r3, r1
 8008382:	18db      	adds	r3, r3, r3
 8008384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008386:	4613      	mov	r3, r2
 8008388:	eb42 0303 	adc.w	r3, r2, r3
 800838c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800838e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008396:	f7f8 fc0f 	bl	8000bb8 <__aeabi_uldivmod>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	4b0d      	ldr	r3, [pc, #52]	@ (80083d4 <UART_SetConfig+0x2d4>)
 80083a0:	fba3 1302 	umull	r1, r3, r3, r2
 80083a4:	095b      	lsrs	r3, r3, #5
 80083a6:	2164      	movs	r1, #100	@ 0x64
 80083a8:	fb01 f303 	mul.w	r3, r1, r3
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	3332      	adds	r3, #50	@ 0x32
 80083b2:	4a08      	ldr	r2, [pc, #32]	@ (80083d4 <UART_SetConfig+0x2d4>)
 80083b4:	fba2 2303 	umull	r2, r3, r2, r3
 80083b8:	095b      	lsrs	r3, r3, #5
 80083ba:	f003 0207 	and.w	r2, r3, #7
 80083be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4422      	add	r2, r4
 80083c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083c8:	e106      	b.n	80085d8 <UART_SetConfig+0x4d8>
 80083ca:	bf00      	nop
 80083cc:	40011000 	.word	0x40011000
 80083d0:	40011400 	.word	0x40011400
 80083d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083dc:	2200      	movs	r2, #0
 80083de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80083e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80083ea:	4642      	mov	r2, r8
 80083ec:	464b      	mov	r3, r9
 80083ee:	1891      	adds	r1, r2, r2
 80083f0:	6239      	str	r1, [r7, #32]
 80083f2:	415b      	adcs	r3, r3
 80083f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80083f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083fa:	4641      	mov	r1, r8
 80083fc:	1854      	adds	r4, r2, r1
 80083fe:	4649      	mov	r1, r9
 8008400:	eb43 0501 	adc.w	r5, r3, r1
 8008404:	f04f 0200 	mov.w	r2, #0
 8008408:	f04f 0300 	mov.w	r3, #0
 800840c:	00eb      	lsls	r3, r5, #3
 800840e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008412:	00e2      	lsls	r2, r4, #3
 8008414:	4614      	mov	r4, r2
 8008416:	461d      	mov	r5, r3
 8008418:	4643      	mov	r3, r8
 800841a:	18e3      	adds	r3, r4, r3
 800841c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008420:	464b      	mov	r3, r9
 8008422:	eb45 0303 	adc.w	r3, r5, r3
 8008426:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800842a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008436:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	f04f 0300 	mov.w	r3, #0
 8008442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008446:	4629      	mov	r1, r5
 8008448:	008b      	lsls	r3, r1, #2
 800844a:	4621      	mov	r1, r4
 800844c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008450:	4621      	mov	r1, r4
 8008452:	008a      	lsls	r2, r1, #2
 8008454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008458:	f7f8 fbae 	bl	8000bb8 <__aeabi_uldivmod>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4b60      	ldr	r3, [pc, #384]	@ (80085e4 <UART_SetConfig+0x4e4>)
 8008462:	fba3 2302 	umull	r2, r3, r3, r2
 8008466:	095b      	lsrs	r3, r3, #5
 8008468:	011c      	lsls	r4, r3, #4
 800846a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800846e:	2200      	movs	r2, #0
 8008470:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008474:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800847c:	4642      	mov	r2, r8
 800847e:	464b      	mov	r3, r9
 8008480:	1891      	adds	r1, r2, r2
 8008482:	61b9      	str	r1, [r7, #24]
 8008484:	415b      	adcs	r3, r3
 8008486:	61fb      	str	r3, [r7, #28]
 8008488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800848c:	4641      	mov	r1, r8
 800848e:	1851      	adds	r1, r2, r1
 8008490:	6139      	str	r1, [r7, #16]
 8008492:	4649      	mov	r1, r9
 8008494:	414b      	adcs	r3, r1
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084a4:	4659      	mov	r1, fp
 80084a6:	00cb      	lsls	r3, r1, #3
 80084a8:	4651      	mov	r1, sl
 80084aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084ae:	4651      	mov	r1, sl
 80084b0:	00ca      	lsls	r2, r1, #3
 80084b2:	4610      	mov	r0, r2
 80084b4:	4619      	mov	r1, r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	4642      	mov	r2, r8
 80084ba:	189b      	adds	r3, r3, r2
 80084bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084c0:	464b      	mov	r3, r9
 80084c2:	460a      	mov	r2, r1
 80084c4:	eb42 0303 	adc.w	r3, r2, r3
 80084c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80084d8:	f04f 0200 	mov.w	r2, #0
 80084dc:	f04f 0300 	mov.w	r3, #0
 80084e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80084e4:	4649      	mov	r1, r9
 80084e6:	008b      	lsls	r3, r1, #2
 80084e8:	4641      	mov	r1, r8
 80084ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084ee:	4641      	mov	r1, r8
 80084f0:	008a      	lsls	r2, r1, #2
 80084f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80084f6:	f7f8 fb5f 	bl	8000bb8 <__aeabi_uldivmod>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	4611      	mov	r1, r2
 8008500:	4b38      	ldr	r3, [pc, #224]	@ (80085e4 <UART_SetConfig+0x4e4>)
 8008502:	fba3 2301 	umull	r2, r3, r3, r1
 8008506:	095b      	lsrs	r3, r3, #5
 8008508:	2264      	movs	r2, #100	@ 0x64
 800850a:	fb02 f303 	mul.w	r3, r2, r3
 800850e:	1acb      	subs	r3, r1, r3
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	3332      	adds	r3, #50	@ 0x32
 8008514:	4a33      	ldr	r2, [pc, #204]	@ (80085e4 <UART_SetConfig+0x4e4>)
 8008516:	fba2 2303 	umull	r2, r3, r2, r3
 800851a:	095b      	lsrs	r3, r3, #5
 800851c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008520:	441c      	add	r4, r3
 8008522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008526:	2200      	movs	r2, #0
 8008528:	673b      	str	r3, [r7, #112]	@ 0x70
 800852a:	677a      	str	r2, [r7, #116]	@ 0x74
 800852c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008530:	4642      	mov	r2, r8
 8008532:	464b      	mov	r3, r9
 8008534:	1891      	adds	r1, r2, r2
 8008536:	60b9      	str	r1, [r7, #8]
 8008538:	415b      	adcs	r3, r3
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008540:	4641      	mov	r1, r8
 8008542:	1851      	adds	r1, r2, r1
 8008544:	6039      	str	r1, [r7, #0]
 8008546:	4649      	mov	r1, r9
 8008548:	414b      	adcs	r3, r1
 800854a:	607b      	str	r3, [r7, #4]
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	f04f 0300 	mov.w	r3, #0
 8008554:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008558:	4659      	mov	r1, fp
 800855a:	00cb      	lsls	r3, r1, #3
 800855c:	4651      	mov	r1, sl
 800855e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008562:	4651      	mov	r1, sl
 8008564:	00ca      	lsls	r2, r1, #3
 8008566:	4610      	mov	r0, r2
 8008568:	4619      	mov	r1, r3
 800856a:	4603      	mov	r3, r0
 800856c:	4642      	mov	r2, r8
 800856e:	189b      	adds	r3, r3, r2
 8008570:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008572:	464b      	mov	r3, r9
 8008574:	460a      	mov	r2, r1
 8008576:	eb42 0303 	adc.w	r3, r2, r3
 800857a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800857c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	663b      	str	r3, [r7, #96]	@ 0x60
 8008586:	667a      	str	r2, [r7, #100]	@ 0x64
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008594:	4649      	mov	r1, r9
 8008596:	008b      	lsls	r3, r1, #2
 8008598:	4641      	mov	r1, r8
 800859a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800859e:	4641      	mov	r1, r8
 80085a0:	008a      	lsls	r2, r1, #2
 80085a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80085a6:	f7f8 fb07 	bl	8000bb8 <__aeabi_uldivmod>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4b0d      	ldr	r3, [pc, #52]	@ (80085e4 <UART_SetConfig+0x4e4>)
 80085b0:	fba3 1302 	umull	r1, r3, r3, r2
 80085b4:	095b      	lsrs	r3, r3, #5
 80085b6:	2164      	movs	r1, #100	@ 0x64
 80085b8:	fb01 f303 	mul.w	r3, r1, r3
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	3332      	adds	r3, #50	@ 0x32
 80085c2:	4a08      	ldr	r2, [pc, #32]	@ (80085e4 <UART_SetConfig+0x4e4>)
 80085c4:	fba2 2303 	umull	r2, r3, r2, r3
 80085c8:	095b      	lsrs	r3, r3, #5
 80085ca:	f003 020f 	and.w	r2, r3, #15
 80085ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4422      	add	r2, r4
 80085d6:	609a      	str	r2, [r3, #8]
}
 80085d8:	bf00      	nop
 80085da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80085de:	46bd      	mov	sp, r7
 80085e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085e4:	51eb851f 	.word	0x51eb851f

080085e8 <_strtol_l.isra.0>:
 80085e8:	2b24      	cmp	r3, #36	@ 0x24
 80085ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ee:	4686      	mov	lr, r0
 80085f0:	4690      	mov	r8, r2
 80085f2:	d801      	bhi.n	80085f8 <_strtol_l.isra.0+0x10>
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d106      	bne.n	8008606 <_strtol_l.isra.0+0x1e>
 80085f8:	f000 fe5c 	bl	80092b4 <__errno>
 80085fc:	2316      	movs	r3, #22
 80085fe:	6003      	str	r3, [r0, #0]
 8008600:	2000      	movs	r0, #0
 8008602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008606:	4834      	ldr	r0, [pc, #208]	@ (80086d8 <_strtol_l.isra.0+0xf0>)
 8008608:	460d      	mov	r5, r1
 800860a:	462a      	mov	r2, r5
 800860c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008610:	5d06      	ldrb	r6, [r0, r4]
 8008612:	f016 0608 	ands.w	r6, r6, #8
 8008616:	d1f8      	bne.n	800860a <_strtol_l.isra.0+0x22>
 8008618:	2c2d      	cmp	r4, #45	@ 0x2d
 800861a:	d110      	bne.n	800863e <_strtol_l.isra.0+0x56>
 800861c:	782c      	ldrb	r4, [r5, #0]
 800861e:	2601      	movs	r6, #1
 8008620:	1c95      	adds	r5, r2, #2
 8008622:	f033 0210 	bics.w	r2, r3, #16
 8008626:	d115      	bne.n	8008654 <_strtol_l.isra.0+0x6c>
 8008628:	2c30      	cmp	r4, #48	@ 0x30
 800862a:	d10d      	bne.n	8008648 <_strtol_l.isra.0+0x60>
 800862c:	782a      	ldrb	r2, [r5, #0]
 800862e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008632:	2a58      	cmp	r2, #88	@ 0x58
 8008634:	d108      	bne.n	8008648 <_strtol_l.isra.0+0x60>
 8008636:	786c      	ldrb	r4, [r5, #1]
 8008638:	3502      	adds	r5, #2
 800863a:	2310      	movs	r3, #16
 800863c:	e00a      	b.n	8008654 <_strtol_l.isra.0+0x6c>
 800863e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008640:	bf04      	itt	eq
 8008642:	782c      	ldrbeq	r4, [r5, #0]
 8008644:	1c95      	addeq	r5, r2, #2
 8008646:	e7ec      	b.n	8008622 <_strtol_l.isra.0+0x3a>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1f6      	bne.n	800863a <_strtol_l.isra.0+0x52>
 800864c:	2c30      	cmp	r4, #48	@ 0x30
 800864e:	bf14      	ite	ne
 8008650:	230a      	movne	r3, #10
 8008652:	2308      	moveq	r3, #8
 8008654:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008658:	f10c 3cff 	add.w	ip, ip, #4294967295
 800865c:	2200      	movs	r2, #0
 800865e:	fbbc f9f3 	udiv	r9, ip, r3
 8008662:	4610      	mov	r0, r2
 8008664:	fb03 ca19 	mls	sl, r3, r9, ip
 8008668:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800866c:	2f09      	cmp	r7, #9
 800866e:	d80f      	bhi.n	8008690 <_strtol_l.isra.0+0xa8>
 8008670:	463c      	mov	r4, r7
 8008672:	42a3      	cmp	r3, r4
 8008674:	dd1b      	ble.n	80086ae <_strtol_l.isra.0+0xc6>
 8008676:	1c57      	adds	r7, r2, #1
 8008678:	d007      	beq.n	800868a <_strtol_l.isra.0+0xa2>
 800867a:	4581      	cmp	r9, r0
 800867c:	d314      	bcc.n	80086a8 <_strtol_l.isra.0+0xc0>
 800867e:	d101      	bne.n	8008684 <_strtol_l.isra.0+0x9c>
 8008680:	45a2      	cmp	sl, r4
 8008682:	db11      	blt.n	80086a8 <_strtol_l.isra.0+0xc0>
 8008684:	fb00 4003 	mla	r0, r0, r3, r4
 8008688:	2201      	movs	r2, #1
 800868a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800868e:	e7eb      	b.n	8008668 <_strtol_l.isra.0+0x80>
 8008690:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008694:	2f19      	cmp	r7, #25
 8008696:	d801      	bhi.n	800869c <_strtol_l.isra.0+0xb4>
 8008698:	3c37      	subs	r4, #55	@ 0x37
 800869a:	e7ea      	b.n	8008672 <_strtol_l.isra.0+0x8a>
 800869c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80086a0:	2f19      	cmp	r7, #25
 80086a2:	d804      	bhi.n	80086ae <_strtol_l.isra.0+0xc6>
 80086a4:	3c57      	subs	r4, #87	@ 0x57
 80086a6:	e7e4      	b.n	8008672 <_strtol_l.isra.0+0x8a>
 80086a8:	f04f 32ff 	mov.w	r2, #4294967295
 80086ac:	e7ed      	b.n	800868a <_strtol_l.isra.0+0xa2>
 80086ae:	1c53      	adds	r3, r2, #1
 80086b0:	d108      	bne.n	80086c4 <_strtol_l.isra.0+0xdc>
 80086b2:	2322      	movs	r3, #34	@ 0x22
 80086b4:	f8ce 3000 	str.w	r3, [lr]
 80086b8:	4660      	mov	r0, ip
 80086ba:	f1b8 0f00 	cmp.w	r8, #0
 80086be:	d0a0      	beq.n	8008602 <_strtol_l.isra.0+0x1a>
 80086c0:	1e69      	subs	r1, r5, #1
 80086c2:	e006      	b.n	80086d2 <_strtol_l.isra.0+0xea>
 80086c4:	b106      	cbz	r6, 80086c8 <_strtol_l.isra.0+0xe0>
 80086c6:	4240      	negs	r0, r0
 80086c8:	f1b8 0f00 	cmp.w	r8, #0
 80086cc:	d099      	beq.n	8008602 <_strtol_l.isra.0+0x1a>
 80086ce:	2a00      	cmp	r2, #0
 80086d0:	d1f6      	bne.n	80086c0 <_strtol_l.isra.0+0xd8>
 80086d2:	f8c8 1000 	str.w	r1, [r8]
 80086d6:	e794      	b.n	8008602 <_strtol_l.isra.0+0x1a>
 80086d8:	0800b7b1 	.word	0x0800b7b1

080086dc <strtol>:
 80086dc:	4613      	mov	r3, r2
 80086de:	460a      	mov	r2, r1
 80086e0:	4601      	mov	r1, r0
 80086e2:	4802      	ldr	r0, [pc, #8]	@ (80086ec <strtol+0x10>)
 80086e4:	6800      	ldr	r0, [r0, #0]
 80086e6:	f7ff bf7f 	b.w	80085e8 <_strtol_l.isra.0>
 80086ea:	bf00      	nop
 80086ec:	20000070 	.word	0x20000070

080086f0 <__cvt>:
 80086f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	ec57 6b10 	vmov	r6, r7, d0
 80086f8:	2f00      	cmp	r7, #0
 80086fa:	460c      	mov	r4, r1
 80086fc:	4619      	mov	r1, r3
 80086fe:	463b      	mov	r3, r7
 8008700:	bfbb      	ittet	lt
 8008702:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008706:	461f      	movlt	r7, r3
 8008708:	2300      	movge	r3, #0
 800870a:	232d      	movlt	r3, #45	@ 0x2d
 800870c:	700b      	strb	r3, [r1, #0]
 800870e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008710:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008714:	4691      	mov	r9, r2
 8008716:	f023 0820 	bic.w	r8, r3, #32
 800871a:	bfbc      	itt	lt
 800871c:	4632      	movlt	r2, r6
 800871e:	4616      	movlt	r6, r2
 8008720:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008724:	d005      	beq.n	8008732 <__cvt+0x42>
 8008726:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800872a:	d100      	bne.n	800872e <__cvt+0x3e>
 800872c:	3401      	adds	r4, #1
 800872e:	2102      	movs	r1, #2
 8008730:	e000      	b.n	8008734 <__cvt+0x44>
 8008732:	2103      	movs	r1, #3
 8008734:	ab03      	add	r3, sp, #12
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	ab02      	add	r3, sp, #8
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	ec47 6b10 	vmov	d0, r6, r7
 8008740:	4653      	mov	r3, sl
 8008742:	4622      	mov	r2, r4
 8008744:	f000 fe6c 	bl	8009420 <_dtoa_r>
 8008748:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800874c:	4605      	mov	r5, r0
 800874e:	d119      	bne.n	8008784 <__cvt+0x94>
 8008750:	f019 0f01 	tst.w	r9, #1
 8008754:	d00e      	beq.n	8008774 <__cvt+0x84>
 8008756:	eb00 0904 	add.w	r9, r0, r4
 800875a:	2200      	movs	r2, #0
 800875c:	2300      	movs	r3, #0
 800875e:	4630      	mov	r0, r6
 8008760:	4639      	mov	r1, r7
 8008762:	f7f8 f9b9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008766:	b108      	cbz	r0, 800876c <__cvt+0x7c>
 8008768:	f8cd 900c 	str.w	r9, [sp, #12]
 800876c:	2230      	movs	r2, #48	@ 0x30
 800876e:	9b03      	ldr	r3, [sp, #12]
 8008770:	454b      	cmp	r3, r9
 8008772:	d31e      	bcc.n	80087b2 <__cvt+0xc2>
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008778:	1b5b      	subs	r3, r3, r5
 800877a:	4628      	mov	r0, r5
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	b004      	add	sp, #16
 8008780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008784:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008788:	eb00 0904 	add.w	r9, r0, r4
 800878c:	d1e5      	bne.n	800875a <__cvt+0x6a>
 800878e:	7803      	ldrb	r3, [r0, #0]
 8008790:	2b30      	cmp	r3, #48	@ 0x30
 8008792:	d10a      	bne.n	80087aa <__cvt+0xba>
 8008794:	2200      	movs	r2, #0
 8008796:	2300      	movs	r3, #0
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f8 f99c 	bl	8000ad8 <__aeabi_dcmpeq>
 80087a0:	b918      	cbnz	r0, 80087aa <__cvt+0xba>
 80087a2:	f1c4 0401 	rsb	r4, r4, #1
 80087a6:	f8ca 4000 	str.w	r4, [sl]
 80087aa:	f8da 3000 	ldr.w	r3, [sl]
 80087ae:	4499      	add	r9, r3
 80087b0:	e7d3      	b.n	800875a <__cvt+0x6a>
 80087b2:	1c59      	adds	r1, r3, #1
 80087b4:	9103      	str	r1, [sp, #12]
 80087b6:	701a      	strb	r2, [r3, #0]
 80087b8:	e7d9      	b.n	800876e <__cvt+0x7e>

080087ba <__exponent>:
 80087ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087bc:	2900      	cmp	r1, #0
 80087be:	bfba      	itte	lt
 80087c0:	4249      	neglt	r1, r1
 80087c2:	232d      	movlt	r3, #45	@ 0x2d
 80087c4:	232b      	movge	r3, #43	@ 0x2b
 80087c6:	2909      	cmp	r1, #9
 80087c8:	7002      	strb	r2, [r0, #0]
 80087ca:	7043      	strb	r3, [r0, #1]
 80087cc:	dd29      	ble.n	8008822 <__exponent+0x68>
 80087ce:	f10d 0307 	add.w	r3, sp, #7
 80087d2:	461d      	mov	r5, r3
 80087d4:	270a      	movs	r7, #10
 80087d6:	461a      	mov	r2, r3
 80087d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80087dc:	fb07 1416 	mls	r4, r7, r6, r1
 80087e0:	3430      	adds	r4, #48	@ 0x30
 80087e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80087e6:	460c      	mov	r4, r1
 80087e8:	2c63      	cmp	r4, #99	@ 0x63
 80087ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80087ee:	4631      	mov	r1, r6
 80087f0:	dcf1      	bgt.n	80087d6 <__exponent+0x1c>
 80087f2:	3130      	adds	r1, #48	@ 0x30
 80087f4:	1e94      	subs	r4, r2, #2
 80087f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80087fa:	1c41      	adds	r1, r0, #1
 80087fc:	4623      	mov	r3, r4
 80087fe:	42ab      	cmp	r3, r5
 8008800:	d30a      	bcc.n	8008818 <__exponent+0x5e>
 8008802:	f10d 0309 	add.w	r3, sp, #9
 8008806:	1a9b      	subs	r3, r3, r2
 8008808:	42ac      	cmp	r4, r5
 800880a:	bf88      	it	hi
 800880c:	2300      	movhi	r3, #0
 800880e:	3302      	adds	r3, #2
 8008810:	4403      	add	r3, r0
 8008812:	1a18      	subs	r0, r3, r0
 8008814:	b003      	add	sp, #12
 8008816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008818:	f813 6b01 	ldrb.w	r6, [r3], #1
 800881c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008820:	e7ed      	b.n	80087fe <__exponent+0x44>
 8008822:	2330      	movs	r3, #48	@ 0x30
 8008824:	3130      	adds	r1, #48	@ 0x30
 8008826:	7083      	strb	r3, [r0, #2]
 8008828:	70c1      	strb	r1, [r0, #3]
 800882a:	1d03      	adds	r3, r0, #4
 800882c:	e7f1      	b.n	8008812 <__exponent+0x58>
	...

08008830 <_printf_float>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	b08d      	sub	sp, #52	@ 0x34
 8008836:	460c      	mov	r4, r1
 8008838:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800883c:	4616      	mov	r6, r2
 800883e:	461f      	mov	r7, r3
 8008840:	4605      	mov	r5, r0
 8008842:	f000 fced 	bl	8009220 <_localeconv_r>
 8008846:	6803      	ldr	r3, [r0, #0]
 8008848:	9304      	str	r3, [sp, #16]
 800884a:	4618      	mov	r0, r3
 800884c:	f7f7 fd18 	bl	8000280 <strlen>
 8008850:	2300      	movs	r3, #0
 8008852:	930a      	str	r3, [sp, #40]	@ 0x28
 8008854:	f8d8 3000 	ldr.w	r3, [r8]
 8008858:	9005      	str	r0, [sp, #20]
 800885a:	3307      	adds	r3, #7
 800885c:	f023 0307 	bic.w	r3, r3, #7
 8008860:	f103 0208 	add.w	r2, r3, #8
 8008864:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008868:	f8d4 b000 	ldr.w	fp, [r4]
 800886c:	f8c8 2000 	str.w	r2, [r8]
 8008870:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008874:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008878:	9307      	str	r3, [sp, #28]
 800887a:	f8cd 8018 	str.w	r8, [sp, #24]
 800887e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008882:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008886:	4b9c      	ldr	r3, [pc, #624]	@ (8008af8 <_printf_float+0x2c8>)
 8008888:	f04f 32ff 	mov.w	r2, #4294967295
 800888c:	f7f8 f956 	bl	8000b3c <__aeabi_dcmpun>
 8008890:	bb70      	cbnz	r0, 80088f0 <_printf_float+0xc0>
 8008892:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008896:	4b98      	ldr	r3, [pc, #608]	@ (8008af8 <_printf_float+0x2c8>)
 8008898:	f04f 32ff 	mov.w	r2, #4294967295
 800889c:	f7f8 f930 	bl	8000b00 <__aeabi_dcmple>
 80088a0:	bb30      	cbnz	r0, 80088f0 <_printf_float+0xc0>
 80088a2:	2200      	movs	r2, #0
 80088a4:	2300      	movs	r3, #0
 80088a6:	4640      	mov	r0, r8
 80088a8:	4649      	mov	r1, r9
 80088aa:	f7f8 f91f 	bl	8000aec <__aeabi_dcmplt>
 80088ae:	b110      	cbz	r0, 80088b6 <_printf_float+0x86>
 80088b0:	232d      	movs	r3, #45	@ 0x2d
 80088b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088b6:	4a91      	ldr	r2, [pc, #580]	@ (8008afc <_printf_float+0x2cc>)
 80088b8:	4b91      	ldr	r3, [pc, #580]	@ (8008b00 <_printf_float+0x2d0>)
 80088ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80088be:	bf8c      	ite	hi
 80088c0:	4690      	movhi	r8, r2
 80088c2:	4698      	movls	r8, r3
 80088c4:	2303      	movs	r3, #3
 80088c6:	6123      	str	r3, [r4, #16]
 80088c8:	f02b 0304 	bic.w	r3, fp, #4
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	f04f 0900 	mov.w	r9, #0
 80088d2:	9700      	str	r7, [sp, #0]
 80088d4:	4633      	mov	r3, r6
 80088d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80088d8:	4621      	mov	r1, r4
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 f9d2 	bl	8008c84 <_printf_common>
 80088e0:	3001      	adds	r0, #1
 80088e2:	f040 808d 	bne.w	8008a00 <_printf_float+0x1d0>
 80088e6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ea:	b00d      	add	sp, #52	@ 0x34
 80088ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f0:	4642      	mov	r2, r8
 80088f2:	464b      	mov	r3, r9
 80088f4:	4640      	mov	r0, r8
 80088f6:	4649      	mov	r1, r9
 80088f8:	f7f8 f920 	bl	8000b3c <__aeabi_dcmpun>
 80088fc:	b140      	cbz	r0, 8008910 <_printf_float+0xe0>
 80088fe:	464b      	mov	r3, r9
 8008900:	2b00      	cmp	r3, #0
 8008902:	bfbc      	itt	lt
 8008904:	232d      	movlt	r3, #45	@ 0x2d
 8008906:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800890a:	4a7e      	ldr	r2, [pc, #504]	@ (8008b04 <_printf_float+0x2d4>)
 800890c:	4b7e      	ldr	r3, [pc, #504]	@ (8008b08 <_printf_float+0x2d8>)
 800890e:	e7d4      	b.n	80088ba <_printf_float+0x8a>
 8008910:	6863      	ldr	r3, [r4, #4]
 8008912:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008916:	9206      	str	r2, [sp, #24]
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	d13b      	bne.n	8008994 <_printf_float+0x164>
 800891c:	2306      	movs	r3, #6
 800891e:	6063      	str	r3, [r4, #4]
 8008920:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008924:	2300      	movs	r3, #0
 8008926:	6022      	str	r2, [r4, #0]
 8008928:	9303      	str	r3, [sp, #12]
 800892a:	ab0a      	add	r3, sp, #40	@ 0x28
 800892c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008930:	ab09      	add	r3, sp, #36	@ 0x24
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	6861      	ldr	r1, [r4, #4]
 8008936:	ec49 8b10 	vmov	d0, r8, r9
 800893a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800893e:	4628      	mov	r0, r5
 8008940:	f7ff fed6 	bl	80086f0 <__cvt>
 8008944:	9b06      	ldr	r3, [sp, #24]
 8008946:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008948:	2b47      	cmp	r3, #71	@ 0x47
 800894a:	4680      	mov	r8, r0
 800894c:	d129      	bne.n	80089a2 <_printf_float+0x172>
 800894e:	1cc8      	adds	r0, r1, #3
 8008950:	db02      	blt.n	8008958 <_printf_float+0x128>
 8008952:	6863      	ldr	r3, [r4, #4]
 8008954:	4299      	cmp	r1, r3
 8008956:	dd41      	ble.n	80089dc <_printf_float+0x1ac>
 8008958:	f1aa 0a02 	sub.w	sl, sl, #2
 800895c:	fa5f fa8a 	uxtb.w	sl, sl
 8008960:	3901      	subs	r1, #1
 8008962:	4652      	mov	r2, sl
 8008964:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008968:	9109      	str	r1, [sp, #36]	@ 0x24
 800896a:	f7ff ff26 	bl	80087ba <__exponent>
 800896e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008970:	1813      	adds	r3, r2, r0
 8008972:	2a01      	cmp	r2, #1
 8008974:	4681      	mov	r9, r0
 8008976:	6123      	str	r3, [r4, #16]
 8008978:	dc02      	bgt.n	8008980 <_printf_float+0x150>
 800897a:	6822      	ldr	r2, [r4, #0]
 800897c:	07d2      	lsls	r2, r2, #31
 800897e:	d501      	bpl.n	8008984 <_printf_float+0x154>
 8008980:	3301      	adds	r3, #1
 8008982:	6123      	str	r3, [r4, #16]
 8008984:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0a2      	beq.n	80088d2 <_printf_float+0xa2>
 800898c:	232d      	movs	r3, #45	@ 0x2d
 800898e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008992:	e79e      	b.n	80088d2 <_printf_float+0xa2>
 8008994:	9a06      	ldr	r2, [sp, #24]
 8008996:	2a47      	cmp	r2, #71	@ 0x47
 8008998:	d1c2      	bne.n	8008920 <_printf_float+0xf0>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1c0      	bne.n	8008920 <_printf_float+0xf0>
 800899e:	2301      	movs	r3, #1
 80089a0:	e7bd      	b.n	800891e <_printf_float+0xee>
 80089a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089a6:	d9db      	bls.n	8008960 <_printf_float+0x130>
 80089a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80089ac:	d118      	bne.n	80089e0 <_printf_float+0x1b0>
 80089ae:	2900      	cmp	r1, #0
 80089b0:	6863      	ldr	r3, [r4, #4]
 80089b2:	dd0b      	ble.n	80089cc <_printf_float+0x19c>
 80089b4:	6121      	str	r1, [r4, #16]
 80089b6:	b913      	cbnz	r3, 80089be <_printf_float+0x18e>
 80089b8:	6822      	ldr	r2, [r4, #0]
 80089ba:	07d0      	lsls	r0, r2, #31
 80089bc:	d502      	bpl.n	80089c4 <_printf_float+0x194>
 80089be:	3301      	adds	r3, #1
 80089c0:	440b      	add	r3, r1
 80089c2:	6123      	str	r3, [r4, #16]
 80089c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80089c6:	f04f 0900 	mov.w	r9, #0
 80089ca:	e7db      	b.n	8008984 <_printf_float+0x154>
 80089cc:	b913      	cbnz	r3, 80089d4 <_printf_float+0x1a4>
 80089ce:	6822      	ldr	r2, [r4, #0]
 80089d0:	07d2      	lsls	r2, r2, #31
 80089d2:	d501      	bpl.n	80089d8 <_printf_float+0x1a8>
 80089d4:	3302      	adds	r3, #2
 80089d6:	e7f4      	b.n	80089c2 <_printf_float+0x192>
 80089d8:	2301      	movs	r3, #1
 80089da:	e7f2      	b.n	80089c2 <_printf_float+0x192>
 80089dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80089e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089e2:	4299      	cmp	r1, r3
 80089e4:	db05      	blt.n	80089f2 <_printf_float+0x1c2>
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	6121      	str	r1, [r4, #16]
 80089ea:	07d8      	lsls	r0, r3, #31
 80089ec:	d5ea      	bpl.n	80089c4 <_printf_float+0x194>
 80089ee:	1c4b      	adds	r3, r1, #1
 80089f0:	e7e7      	b.n	80089c2 <_printf_float+0x192>
 80089f2:	2900      	cmp	r1, #0
 80089f4:	bfd4      	ite	le
 80089f6:	f1c1 0202 	rsble	r2, r1, #2
 80089fa:	2201      	movgt	r2, #1
 80089fc:	4413      	add	r3, r2
 80089fe:	e7e0      	b.n	80089c2 <_printf_float+0x192>
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	055a      	lsls	r2, r3, #21
 8008a04:	d407      	bmi.n	8008a16 <_printf_float+0x1e6>
 8008a06:	6923      	ldr	r3, [r4, #16]
 8008a08:	4642      	mov	r2, r8
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	47b8      	blx	r7
 8008a10:	3001      	adds	r0, #1
 8008a12:	d12b      	bne.n	8008a6c <_printf_float+0x23c>
 8008a14:	e767      	b.n	80088e6 <_printf_float+0xb6>
 8008a16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a1a:	f240 80dd 	bls.w	8008bd8 <_printf_float+0x3a8>
 8008a1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a22:	2200      	movs	r2, #0
 8008a24:	2300      	movs	r3, #0
 8008a26:	f7f8 f857 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d033      	beq.n	8008a96 <_printf_float+0x266>
 8008a2e:	4a37      	ldr	r2, [pc, #220]	@ (8008b0c <_printf_float+0x2dc>)
 8008a30:	2301      	movs	r3, #1
 8008a32:	4631      	mov	r1, r6
 8008a34:	4628      	mov	r0, r5
 8008a36:	47b8      	blx	r7
 8008a38:	3001      	adds	r0, #1
 8008a3a:	f43f af54 	beq.w	80088e6 <_printf_float+0xb6>
 8008a3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a42:	4543      	cmp	r3, r8
 8008a44:	db02      	blt.n	8008a4c <_printf_float+0x21c>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	07d8      	lsls	r0, r3, #31
 8008a4a:	d50f      	bpl.n	8008a6c <_printf_float+0x23c>
 8008a4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a50:	4631      	mov	r1, r6
 8008a52:	4628      	mov	r0, r5
 8008a54:	47b8      	blx	r7
 8008a56:	3001      	adds	r0, #1
 8008a58:	f43f af45 	beq.w	80088e6 <_printf_float+0xb6>
 8008a5c:	f04f 0900 	mov.w	r9, #0
 8008a60:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a64:	f104 0a1a 	add.w	sl, r4, #26
 8008a68:	45c8      	cmp	r8, r9
 8008a6a:	dc09      	bgt.n	8008a80 <_printf_float+0x250>
 8008a6c:	6823      	ldr	r3, [r4, #0]
 8008a6e:	079b      	lsls	r3, r3, #30
 8008a70:	f100 8103 	bmi.w	8008c7a <_printf_float+0x44a>
 8008a74:	68e0      	ldr	r0, [r4, #12]
 8008a76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a78:	4298      	cmp	r0, r3
 8008a7a:	bfb8      	it	lt
 8008a7c:	4618      	movlt	r0, r3
 8008a7e:	e734      	b.n	80088ea <_printf_float+0xba>
 8008a80:	2301      	movs	r3, #1
 8008a82:	4652      	mov	r2, sl
 8008a84:	4631      	mov	r1, r6
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b8      	blx	r7
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	f43f af2b 	beq.w	80088e6 <_printf_float+0xb6>
 8008a90:	f109 0901 	add.w	r9, r9, #1
 8008a94:	e7e8      	b.n	8008a68 <_printf_float+0x238>
 8008a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dc39      	bgt.n	8008b10 <_printf_float+0x2e0>
 8008a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8008b0c <_printf_float+0x2dc>)
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b8      	blx	r7
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	f43f af1d 	beq.w	80088e6 <_printf_float+0xb6>
 8008aac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ab0:	ea59 0303 	orrs.w	r3, r9, r3
 8008ab4:	d102      	bne.n	8008abc <_printf_float+0x28c>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	07d9      	lsls	r1, r3, #31
 8008aba:	d5d7      	bpl.n	8008a6c <_printf_float+0x23c>
 8008abc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	47b8      	blx	r7
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	f43f af0d 	beq.w	80088e6 <_printf_float+0xb6>
 8008acc:	f04f 0a00 	mov.w	sl, #0
 8008ad0:	f104 0b1a 	add.w	fp, r4, #26
 8008ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad6:	425b      	negs	r3, r3
 8008ad8:	4553      	cmp	r3, sl
 8008ada:	dc01      	bgt.n	8008ae0 <_printf_float+0x2b0>
 8008adc:	464b      	mov	r3, r9
 8008ade:	e793      	b.n	8008a08 <_printf_float+0x1d8>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	465a      	mov	r2, fp
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	f43f aefb 	beq.w	80088e6 <_printf_float+0xb6>
 8008af0:	f10a 0a01 	add.w	sl, sl, #1
 8008af4:	e7ee      	b.n	8008ad4 <_printf_float+0x2a4>
 8008af6:	bf00      	nop
 8008af8:	7fefffff 	.word	0x7fefffff
 8008afc:	0800b8b5 	.word	0x0800b8b5
 8008b00:	0800b8b1 	.word	0x0800b8b1
 8008b04:	0800b8bd 	.word	0x0800b8bd
 8008b08:	0800b8b9 	.word	0x0800b8b9
 8008b0c:	0800b8c1 	.word	0x0800b8c1
 8008b10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b12:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b16:	4553      	cmp	r3, sl
 8008b18:	bfa8      	it	ge
 8008b1a:	4653      	movge	r3, sl
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	4699      	mov	r9, r3
 8008b20:	dc36      	bgt.n	8008b90 <_printf_float+0x360>
 8008b22:	f04f 0b00 	mov.w	fp, #0
 8008b26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b2a:	f104 021a 	add.w	r2, r4, #26
 8008b2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b30:	9306      	str	r3, [sp, #24]
 8008b32:	eba3 0309 	sub.w	r3, r3, r9
 8008b36:	455b      	cmp	r3, fp
 8008b38:	dc31      	bgt.n	8008b9e <_printf_float+0x36e>
 8008b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b3c:	459a      	cmp	sl, r3
 8008b3e:	dc3a      	bgt.n	8008bb6 <_printf_float+0x386>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	07da      	lsls	r2, r3, #31
 8008b44:	d437      	bmi.n	8008bb6 <_printf_float+0x386>
 8008b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b48:	ebaa 0903 	sub.w	r9, sl, r3
 8008b4c:	9b06      	ldr	r3, [sp, #24]
 8008b4e:	ebaa 0303 	sub.w	r3, sl, r3
 8008b52:	4599      	cmp	r9, r3
 8008b54:	bfa8      	it	ge
 8008b56:	4699      	movge	r9, r3
 8008b58:	f1b9 0f00 	cmp.w	r9, #0
 8008b5c:	dc33      	bgt.n	8008bc6 <_printf_float+0x396>
 8008b5e:	f04f 0800 	mov.w	r8, #0
 8008b62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b66:	f104 0b1a 	add.w	fp, r4, #26
 8008b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b6c:	ebaa 0303 	sub.w	r3, sl, r3
 8008b70:	eba3 0309 	sub.w	r3, r3, r9
 8008b74:	4543      	cmp	r3, r8
 8008b76:	f77f af79 	ble.w	8008a6c <_printf_float+0x23c>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	465a      	mov	r2, fp
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	f43f aeae 	beq.w	80088e6 <_printf_float+0xb6>
 8008b8a:	f108 0801 	add.w	r8, r8, #1
 8008b8e:	e7ec      	b.n	8008b6a <_printf_float+0x33a>
 8008b90:	4642      	mov	r2, r8
 8008b92:	4631      	mov	r1, r6
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b8      	blx	r7
 8008b98:	3001      	adds	r0, #1
 8008b9a:	d1c2      	bne.n	8008b22 <_printf_float+0x2f2>
 8008b9c:	e6a3      	b.n	80088e6 <_printf_float+0xb6>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	9206      	str	r2, [sp, #24]
 8008ba6:	47b8      	blx	r7
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f43f ae9c 	beq.w	80088e6 <_printf_float+0xb6>
 8008bae:	9a06      	ldr	r2, [sp, #24]
 8008bb0:	f10b 0b01 	add.w	fp, fp, #1
 8008bb4:	e7bb      	b.n	8008b2e <_printf_float+0x2fe>
 8008bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d1c0      	bne.n	8008b46 <_printf_float+0x316>
 8008bc4:	e68f      	b.n	80088e6 <_printf_float+0xb6>
 8008bc6:	9a06      	ldr	r2, [sp, #24]
 8008bc8:	464b      	mov	r3, r9
 8008bca:	4442      	add	r2, r8
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b8      	blx	r7
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	d1c3      	bne.n	8008b5e <_printf_float+0x32e>
 8008bd6:	e686      	b.n	80088e6 <_printf_float+0xb6>
 8008bd8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008bdc:	f1ba 0f01 	cmp.w	sl, #1
 8008be0:	dc01      	bgt.n	8008be6 <_printf_float+0x3b6>
 8008be2:	07db      	lsls	r3, r3, #31
 8008be4:	d536      	bpl.n	8008c54 <_printf_float+0x424>
 8008be6:	2301      	movs	r3, #1
 8008be8:	4642      	mov	r2, r8
 8008bea:	4631      	mov	r1, r6
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b8      	blx	r7
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	f43f ae78 	beq.w	80088e6 <_printf_float+0xb6>
 8008bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b8      	blx	r7
 8008c00:	3001      	adds	r0, #1
 8008c02:	f43f ae70 	beq.w	80088e6 <_printf_float+0xb6>
 8008c06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c12:	f7f7 ff61 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c16:	b9c0      	cbnz	r0, 8008c4a <_printf_float+0x41a>
 8008c18:	4653      	mov	r3, sl
 8008c1a:	f108 0201 	add.w	r2, r8, #1
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b8      	blx	r7
 8008c24:	3001      	adds	r0, #1
 8008c26:	d10c      	bne.n	8008c42 <_printf_float+0x412>
 8008c28:	e65d      	b.n	80088e6 <_printf_float+0xb6>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	465a      	mov	r2, fp
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	f43f ae56 	beq.w	80088e6 <_printf_float+0xb6>
 8008c3a:	f108 0801 	add.w	r8, r8, #1
 8008c3e:	45d0      	cmp	r8, sl
 8008c40:	dbf3      	blt.n	8008c2a <_printf_float+0x3fa>
 8008c42:	464b      	mov	r3, r9
 8008c44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c48:	e6df      	b.n	8008a0a <_printf_float+0x1da>
 8008c4a:	f04f 0800 	mov.w	r8, #0
 8008c4e:	f104 0b1a 	add.w	fp, r4, #26
 8008c52:	e7f4      	b.n	8008c3e <_printf_float+0x40e>
 8008c54:	2301      	movs	r3, #1
 8008c56:	4642      	mov	r2, r8
 8008c58:	e7e1      	b.n	8008c1e <_printf_float+0x3ee>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	464a      	mov	r2, r9
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	f43f ae3e 	beq.w	80088e6 <_printf_float+0xb6>
 8008c6a:	f108 0801 	add.w	r8, r8, #1
 8008c6e:	68e3      	ldr	r3, [r4, #12]
 8008c70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c72:	1a5b      	subs	r3, r3, r1
 8008c74:	4543      	cmp	r3, r8
 8008c76:	dcf0      	bgt.n	8008c5a <_printf_float+0x42a>
 8008c78:	e6fc      	b.n	8008a74 <_printf_float+0x244>
 8008c7a:	f04f 0800 	mov.w	r8, #0
 8008c7e:	f104 0919 	add.w	r9, r4, #25
 8008c82:	e7f4      	b.n	8008c6e <_printf_float+0x43e>

08008c84 <_printf_common>:
 8008c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	4616      	mov	r6, r2
 8008c8a:	4698      	mov	r8, r3
 8008c8c:	688a      	ldr	r2, [r1, #8]
 8008c8e:	690b      	ldr	r3, [r1, #16]
 8008c90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c94:	4293      	cmp	r3, r2
 8008c96:	bfb8      	it	lt
 8008c98:	4613      	movlt	r3, r2
 8008c9a:	6033      	str	r3, [r6, #0]
 8008c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	b10a      	cbz	r2, 8008caa <_printf_common+0x26>
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	6033      	str	r3, [r6, #0]
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	0699      	lsls	r1, r3, #26
 8008cae:	bf42      	ittt	mi
 8008cb0:	6833      	ldrmi	r3, [r6, #0]
 8008cb2:	3302      	addmi	r3, #2
 8008cb4:	6033      	strmi	r3, [r6, #0]
 8008cb6:	6825      	ldr	r5, [r4, #0]
 8008cb8:	f015 0506 	ands.w	r5, r5, #6
 8008cbc:	d106      	bne.n	8008ccc <_printf_common+0x48>
 8008cbe:	f104 0a19 	add.w	sl, r4, #25
 8008cc2:	68e3      	ldr	r3, [r4, #12]
 8008cc4:	6832      	ldr	r2, [r6, #0]
 8008cc6:	1a9b      	subs	r3, r3, r2
 8008cc8:	42ab      	cmp	r3, r5
 8008cca:	dc26      	bgt.n	8008d1a <_printf_common+0x96>
 8008ccc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cd0:	6822      	ldr	r2, [r4, #0]
 8008cd2:	3b00      	subs	r3, #0
 8008cd4:	bf18      	it	ne
 8008cd6:	2301      	movne	r3, #1
 8008cd8:	0692      	lsls	r2, r2, #26
 8008cda:	d42b      	bmi.n	8008d34 <_printf_common+0xb0>
 8008cdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ce0:	4641      	mov	r1, r8
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	47c8      	blx	r9
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	d01e      	beq.n	8008d28 <_printf_common+0xa4>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	6922      	ldr	r2, [r4, #16]
 8008cee:	f003 0306 	and.w	r3, r3, #6
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	bf02      	ittt	eq
 8008cf6:	68e5      	ldreq	r5, [r4, #12]
 8008cf8:	6833      	ldreq	r3, [r6, #0]
 8008cfa:	1aed      	subeq	r5, r5, r3
 8008cfc:	68a3      	ldr	r3, [r4, #8]
 8008cfe:	bf0c      	ite	eq
 8008d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d04:	2500      	movne	r5, #0
 8008d06:	4293      	cmp	r3, r2
 8008d08:	bfc4      	itt	gt
 8008d0a:	1a9b      	subgt	r3, r3, r2
 8008d0c:	18ed      	addgt	r5, r5, r3
 8008d0e:	2600      	movs	r6, #0
 8008d10:	341a      	adds	r4, #26
 8008d12:	42b5      	cmp	r5, r6
 8008d14:	d11a      	bne.n	8008d4c <_printf_common+0xc8>
 8008d16:	2000      	movs	r0, #0
 8008d18:	e008      	b.n	8008d2c <_printf_common+0xa8>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	4652      	mov	r2, sl
 8008d1e:	4641      	mov	r1, r8
 8008d20:	4638      	mov	r0, r7
 8008d22:	47c8      	blx	r9
 8008d24:	3001      	adds	r0, #1
 8008d26:	d103      	bne.n	8008d30 <_printf_common+0xac>
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d30:	3501      	adds	r5, #1
 8008d32:	e7c6      	b.n	8008cc2 <_printf_common+0x3e>
 8008d34:	18e1      	adds	r1, r4, r3
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	2030      	movs	r0, #48	@ 0x30
 8008d3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d3e:	4422      	add	r2, r4
 8008d40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d48:	3302      	adds	r3, #2
 8008d4a:	e7c7      	b.n	8008cdc <_printf_common+0x58>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	4622      	mov	r2, r4
 8008d50:	4641      	mov	r1, r8
 8008d52:	4638      	mov	r0, r7
 8008d54:	47c8      	blx	r9
 8008d56:	3001      	adds	r0, #1
 8008d58:	d0e6      	beq.n	8008d28 <_printf_common+0xa4>
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	e7d9      	b.n	8008d12 <_printf_common+0x8e>
	...

08008d60 <_printf_i>:
 8008d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d64:	7e0f      	ldrb	r7, [r1, #24]
 8008d66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d68:	2f78      	cmp	r7, #120	@ 0x78
 8008d6a:	4691      	mov	r9, r2
 8008d6c:	4680      	mov	r8, r0
 8008d6e:	460c      	mov	r4, r1
 8008d70:	469a      	mov	sl, r3
 8008d72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d76:	d807      	bhi.n	8008d88 <_printf_i+0x28>
 8008d78:	2f62      	cmp	r7, #98	@ 0x62
 8008d7a:	d80a      	bhi.n	8008d92 <_printf_i+0x32>
 8008d7c:	2f00      	cmp	r7, #0
 8008d7e:	f000 80d1 	beq.w	8008f24 <_printf_i+0x1c4>
 8008d82:	2f58      	cmp	r7, #88	@ 0x58
 8008d84:	f000 80b8 	beq.w	8008ef8 <_printf_i+0x198>
 8008d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d90:	e03a      	b.n	8008e08 <_printf_i+0xa8>
 8008d92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d96:	2b15      	cmp	r3, #21
 8008d98:	d8f6      	bhi.n	8008d88 <_printf_i+0x28>
 8008d9a:	a101      	add	r1, pc, #4	@ (adr r1, 8008da0 <_printf_i+0x40>)
 8008d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008da0:	08008df9 	.word	0x08008df9
 8008da4:	08008e0d 	.word	0x08008e0d
 8008da8:	08008d89 	.word	0x08008d89
 8008dac:	08008d89 	.word	0x08008d89
 8008db0:	08008d89 	.word	0x08008d89
 8008db4:	08008d89 	.word	0x08008d89
 8008db8:	08008e0d 	.word	0x08008e0d
 8008dbc:	08008d89 	.word	0x08008d89
 8008dc0:	08008d89 	.word	0x08008d89
 8008dc4:	08008d89 	.word	0x08008d89
 8008dc8:	08008d89 	.word	0x08008d89
 8008dcc:	08008f0b 	.word	0x08008f0b
 8008dd0:	08008e37 	.word	0x08008e37
 8008dd4:	08008ec5 	.word	0x08008ec5
 8008dd8:	08008d89 	.word	0x08008d89
 8008ddc:	08008d89 	.word	0x08008d89
 8008de0:	08008f2d 	.word	0x08008f2d
 8008de4:	08008d89 	.word	0x08008d89
 8008de8:	08008e37 	.word	0x08008e37
 8008dec:	08008d89 	.word	0x08008d89
 8008df0:	08008d89 	.word	0x08008d89
 8008df4:	08008ecd 	.word	0x08008ecd
 8008df8:	6833      	ldr	r3, [r6, #0]
 8008dfa:	1d1a      	adds	r2, r3, #4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6032      	str	r2, [r6, #0]
 8008e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e09c      	b.n	8008f46 <_printf_i+0x1e6>
 8008e0c:	6833      	ldr	r3, [r6, #0]
 8008e0e:	6820      	ldr	r0, [r4, #0]
 8008e10:	1d19      	adds	r1, r3, #4
 8008e12:	6031      	str	r1, [r6, #0]
 8008e14:	0606      	lsls	r6, r0, #24
 8008e16:	d501      	bpl.n	8008e1c <_printf_i+0xbc>
 8008e18:	681d      	ldr	r5, [r3, #0]
 8008e1a:	e003      	b.n	8008e24 <_printf_i+0xc4>
 8008e1c:	0645      	lsls	r5, r0, #25
 8008e1e:	d5fb      	bpl.n	8008e18 <_printf_i+0xb8>
 8008e20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e24:	2d00      	cmp	r5, #0
 8008e26:	da03      	bge.n	8008e30 <_printf_i+0xd0>
 8008e28:	232d      	movs	r3, #45	@ 0x2d
 8008e2a:	426d      	negs	r5, r5
 8008e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e30:	4858      	ldr	r0, [pc, #352]	@ (8008f94 <_printf_i+0x234>)
 8008e32:	230a      	movs	r3, #10
 8008e34:	e011      	b.n	8008e5a <_printf_i+0xfa>
 8008e36:	6821      	ldr	r1, [r4, #0]
 8008e38:	6833      	ldr	r3, [r6, #0]
 8008e3a:	0608      	lsls	r0, r1, #24
 8008e3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e40:	d402      	bmi.n	8008e48 <_printf_i+0xe8>
 8008e42:	0649      	lsls	r1, r1, #25
 8008e44:	bf48      	it	mi
 8008e46:	b2ad      	uxthmi	r5, r5
 8008e48:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e4a:	4852      	ldr	r0, [pc, #328]	@ (8008f94 <_printf_i+0x234>)
 8008e4c:	6033      	str	r3, [r6, #0]
 8008e4e:	bf14      	ite	ne
 8008e50:	230a      	movne	r3, #10
 8008e52:	2308      	moveq	r3, #8
 8008e54:	2100      	movs	r1, #0
 8008e56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e5a:	6866      	ldr	r6, [r4, #4]
 8008e5c:	60a6      	str	r6, [r4, #8]
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	db05      	blt.n	8008e6e <_printf_i+0x10e>
 8008e62:	6821      	ldr	r1, [r4, #0]
 8008e64:	432e      	orrs	r6, r5
 8008e66:	f021 0104 	bic.w	r1, r1, #4
 8008e6a:	6021      	str	r1, [r4, #0]
 8008e6c:	d04b      	beq.n	8008f06 <_printf_i+0x1a6>
 8008e6e:	4616      	mov	r6, r2
 8008e70:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e74:	fb03 5711 	mls	r7, r3, r1, r5
 8008e78:	5dc7      	ldrb	r7, [r0, r7]
 8008e7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e7e:	462f      	mov	r7, r5
 8008e80:	42bb      	cmp	r3, r7
 8008e82:	460d      	mov	r5, r1
 8008e84:	d9f4      	bls.n	8008e70 <_printf_i+0x110>
 8008e86:	2b08      	cmp	r3, #8
 8008e88:	d10b      	bne.n	8008ea2 <_printf_i+0x142>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	07df      	lsls	r7, r3, #31
 8008e8e:	d508      	bpl.n	8008ea2 <_printf_i+0x142>
 8008e90:	6923      	ldr	r3, [r4, #16]
 8008e92:	6861      	ldr	r1, [r4, #4]
 8008e94:	4299      	cmp	r1, r3
 8008e96:	bfde      	ittt	le
 8008e98:	2330      	movle	r3, #48	@ 0x30
 8008e9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ea2:	1b92      	subs	r2, r2, r6
 8008ea4:	6122      	str	r2, [r4, #16]
 8008ea6:	f8cd a000 	str.w	sl, [sp]
 8008eaa:	464b      	mov	r3, r9
 8008eac:	aa03      	add	r2, sp, #12
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	f7ff fee7 	bl	8008c84 <_printf_common>
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	d14a      	bne.n	8008f50 <_printf_i+0x1f0>
 8008eba:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebe:	b004      	add	sp, #16
 8008ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	f043 0320 	orr.w	r3, r3, #32
 8008eca:	6023      	str	r3, [r4, #0]
 8008ecc:	4832      	ldr	r0, [pc, #200]	@ (8008f98 <_printf_i+0x238>)
 8008ece:	2778      	movs	r7, #120	@ 0x78
 8008ed0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	6831      	ldr	r1, [r6, #0]
 8008ed8:	061f      	lsls	r7, r3, #24
 8008eda:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ede:	d402      	bmi.n	8008ee6 <_printf_i+0x186>
 8008ee0:	065f      	lsls	r7, r3, #25
 8008ee2:	bf48      	it	mi
 8008ee4:	b2ad      	uxthmi	r5, r5
 8008ee6:	6031      	str	r1, [r6, #0]
 8008ee8:	07d9      	lsls	r1, r3, #31
 8008eea:	bf44      	itt	mi
 8008eec:	f043 0320 	orrmi.w	r3, r3, #32
 8008ef0:	6023      	strmi	r3, [r4, #0]
 8008ef2:	b11d      	cbz	r5, 8008efc <_printf_i+0x19c>
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	e7ad      	b.n	8008e54 <_printf_i+0xf4>
 8008ef8:	4826      	ldr	r0, [pc, #152]	@ (8008f94 <_printf_i+0x234>)
 8008efa:	e7e9      	b.n	8008ed0 <_printf_i+0x170>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	f023 0320 	bic.w	r3, r3, #32
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	e7f6      	b.n	8008ef4 <_printf_i+0x194>
 8008f06:	4616      	mov	r6, r2
 8008f08:	e7bd      	b.n	8008e86 <_printf_i+0x126>
 8008f0a:	6833      	ldr	r3, [r6, #0]
 8008f0c:	6825      	ldr	r5, [r4, #0]
 8008f0e:	6961      	ldr	r1, [r4, #20]
 8008f10:	1d18      	adds	r0, r3, #4
 8008f12:	6030      	str	r0, [r6, #0]
 8008f14:	062e      	lsls	r6, r5, #24
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	d501      	bpl.n	8008f1e <_printf_i+0x1be>
 8008f1a:	6019      	str	r1, [r3, #0]
 8008f1c:	e002      	b.n	8008f24 <_printf_i+0x1c4>
 8008f1e:	0668      	lsls	r0, r5, #25
 8008f20:	d5fb      	bpl.n	8008f1a <_printf_i+0x1ba>
 8008f22:	8019      	strh	r1, [r3, #0]
 8008f24:	2300      	movs	r3, #0
 8008f26:	6123      	str	r3, [r4, #16]
 8008f28:	4616      	mov	r6, r2
 8008f2a:	e7bc      	b.n	8008ea6 <_printf_i+0x146>
 8008f2c:	6833      	ldr	r3, [r6, #0]
 8008f2e:	1d1a      	adds	r2, r3, #4
 8008f30:	6032      	str	r2, [r6, #0]
 8008f32:	681e      	ldr	r6, [r3, #0]
 8008f34:	6862      	ldr	r2, [r4, #4]
 8008f36:	2100      	movs	r1, #0
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f7f7 f951 	bl	80001e0 <memchr>
 8008f3e:	b108      	cbz	r0, 8008f44 <_printf_i+0x1e4>
 8008f40:	1b80      	subs	r0, r0, r6
 8008f42:	6060      	str	r0, [r4, #4]
 8008f44:	6863      	ldr	r3, [r4, #4]
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f4e:	e7aa      	b.n	8008ea6 <_printf_i+0x146>
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	4632      	mov	r2, r6
 8008f54:	4649      	mov	r1, r9
 8008f56:	4640      	mov	r0, r8
 8008f58:	47d0      	blx	sl
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d0ad      	beq.n	8008eba <_printf_i+0x15a>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	079b      	lsls	r3, r3, #30
 8008f62:	d413      	bmi.n	8008f8c <_printf_i+0x22c>
 8008f64:	68e0      	ldr	r0, [r4, #12]
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	4298      	cmp	r0, r3
 8008f6a:	bfb8      	it	lt
 8008f6c:	4618      	movlt	r0, r3
 8008f6e:	e7a6      	b.n	8008ebe <_printf_i+0x15e>
 8008f70:	2301      	movs	r3, #1
 8008f72:	4632      	mov	r2, r6
 8008f74:	4649      	mov	r1, r9
 8008f76:	4640      	mov	r0, r8
 8008f78:	47d0      	blx	sl
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d09d      	beq.n	8008eba <_printf_i+0x15a>
 8008f7e:	3501      	adds	r5, #1
 8008f80:	68e3      	ldr	r3, [r4, #12]
 8008f82:	9903      	ldr	r1, [sp, #12]
 8008f84:	1a5b      	subs	r3, r3, r1
 8008f86:	42ab      	cmp	r3, r5
 8008f88:	dcf2      	bgt.n	8008f70 <_printf_i+0x210>
 8008f8a:	e7eb      	b.n	8008f64 <_printf_i+0x204>
 8008f8c:	2500      	movs	r5, #0
 8008f8e:	f104 0619 	add.w	r6, r4, #25
 8008f92:	e7f5      	b.n	8008f80 <_printf_i+0x220>
 8008f94:	0800b8c3 	.word	0x0800b8c3
 8008f98:	0800b8d4 	.word	0x0800b8d4

08008f9c <std>:
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	b510      	push	{r4, lr}
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8008fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008faa:	6083      	str	r3, [r0, #8]
 8008fac:	8181      	strh	r1, [r0, #12]
 8008fae:	6643      	str	r3, [r0, #100]	@ 0x64
 8008fb0:	81c2      	strh	r2, [r0, #14]
 8008fb2:	6183      	str	r3, [r0, #24]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	2208      	movs	r2, #8
 8008fb8:	305c      	adds	r0, #92	@ 0x5c
 8008fba:	f000 f916 	bl	80091ea <memset>
 8008fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff4 <std+0x58>)
 8008fc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff8 <std+0x5c>)
 8008fc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008ffc <std+0x60>)
 8008fc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008fca:	4b0d      	ldr	r3, [pc, #52]	@ (8009000 <std+0x64>)
 8008fcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008fce:	4b0d      	ldr	r3, [pc, #52]	@ (8009004 <std+0x68>)
 8008fd0:	6224      	str	r4, [r4, #32]
 8008fd2:	429c      	cmp	r4, r3
 8008fd4:	d006      	beq.n	8008fe4 <std+0x48>
 8008fd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008fda:	4294      	cmp	r4, r2
 8008fdc:	d002      	beq.n	8008fe4 <std+0x48>
 8008fde:	33d0      	adds	r3, #208	@ 0xd0
 8008fe0:	429c      	cmp	r4, r3
 8008fe2:	d105      	bne.n	8008ff0 <std+0x54>
 8008fe4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fec:	f000 b98c 	b.w	8009308 <__retarget_lock_init_recursive>
 8008ff0:	bd10      	pop	{r4, pc}
 8008ff2:	bf00      	nop
 8008ff4:	08009165 	.word	0x08009165
 8008ff8:	08009187 	.word	0x08009187
 8008ffc:	080091bf 	.word	0x080091bf
 8009000:	080091e3 	.word	0x080091e3
 8009004:	200006b0 	.word	0x200006b0

08009008 <stdio_exit_handler>:
 8009008:	4a02      	ldr	r2, [pc, #8]	@ (8009014 <stdio_exit_handler+0xc>)
 800900a:	4903      	ldr	r1, [pc, #12]	@ (8009018 <stdio_exit_handler+0x10>)
 800900c:	4803      	ldr	r0, [pc, #12]	@ (800901c <stdio_exit_handler+0x14>)
 800900e:	f000 b869 	b.w	80090e4 <_fwalk_sglue>
 8009012:	bf00      	nop
 8009014:	20000064 	.word	0x20000064
 8009018:	0800ac6d 	.word	0x0800ac6d
 800901c:	20000074 	.word	0x20000074

08009020 <cleanup_stdio>:
 8009020:	6841      	ldr	r1, [r0, #4]
 8009022:	4b0c      	ldr	r3, [pc, #48]	@ (8009054 <cleanup_stdio+0x34>)
 8009024:	4299      	cmp	r1, r3
 8009026:	b510      	push	{r4, lr}
 8009028:	4604      	mov	r4, r0
 800902a:	d001      	beq.n	8009030 <cleanup_stdio+0x10>
 800902c:	f001 fe1e 	bl	800ac6c <_fflush_r>
 8009030:	68a1      	ldr	r1, [r4, #8]
 8009032:	4b09      	ldr	r3, [pc, #36]	@ (8009058 <cleanup_stdio+0x38>)
 8009034:	4299      	cmp	r1, r3
 8009036:	d002      	beq.n	800903e <cleanup_stdio+0x1e>
 8009038:	4620      	mov	r0, r4
 800903a:	f001 fe17 	bl	800ac6c <_fflush_r>
 800903e:	68e1      	ldr	r1, [r4, #12]
 8009040:	4b06      	ldr	r3, [pc, #24]	@ (800905c <cleanup_stdio+0x3c>)
 8009042:	4299      	cmp	r1, r3
 8009044:	d004      	beq.n	8009050 <cleanup_stdio+0x30>
 8009046:	4620      	mov	r0, r4
 8009048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800904c:	f001 be0e 	b.w	800ac6c <_fflush_r>
 8009050:	bd10      	pop	{r4, pc}
 8009052:	bf00      	nop
 8009054:	200006b0 	.word	0x200006b0
 8009058:	20000718 	.word	0x20000718
 800905c:	20000780 	.word	0x20000780

08009060 <global_stdio_init.part.0>:
 8009060:	b510      	push	{r4, lr}
 8009062:	4b0b      	ldr	r3, [pc, #44]	@ (8009090 <global_stdio_init.part.0+0x30>)
 8009064:	4c0b      	ldr	r4, [pc, #44]	@ (8009094 <global_stdio_init.part.0+0x34>)
 8009066:	4a0c      	ldr	r2, [pc, #48]	@ (8009098 <global_stdio_init.part.0+0x38>)
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	4620      	mov	r0, r4
 800906c:	2200      	movs	r2, #0
 800906e:	2104      	movs	r1, #4
 8009070:	f7ff ff94 	bl	8008f9c <std>
 8009074:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009078:	2201      	movs	r2, #1
 800907a:	2109      	movs	r1, #9
 800907c:	f7ff ff8e 	bl	8008f9c <std>
 8009080:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009084:	2202      	movs	r2, #2
 8009086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800908a:	2112      	movs	r1, #18
 800908c:	f7ff bf86 	b.w	8008f9c <std>
 8009090:	200007e8 	.word	0x200007e8
 8009094:	200006b0 	.word	0x200006b0
 8009098:	08009009 	.word	0x08009009

0800909c <__sfp_lock_acquire>:
 800909c:	4801      	ldr	r0, [pc, #4]	@ (80090a4 <__sfp_lock_acquire+0x8>)
 800909e:	f000 b934 	b.w	800930a <__retarget_lock_acquire_recursive>
 80090a2:	bf00      	nop
 80090a4:	200007f1 	.word	0x200007f1

080090a8 <__sfp_lock_release>:
 80090a8:	4801      	ldr	r0, [pc, #4]	@ (80090b0 <__sfp_lock_release+0x8>)
 80090aa:	f000 b92f 	b.w	800930c <__retarget_lock_release_recursive>
 80090ae:	bf00      	nop
 80090b0:	200007f1 	.word	0x200007f1

080090b4 <__sinit>:
 80090b4:	b510      	push	{r4, lr}
 80090b6:	4604      	mov	r4, r0
 80090b8:	f7ff fff0 	bl	800909c <__sfp_lock_acquire>
 80090bc:	6a23      	ldr	r3, [r4, #32]
 80090be:	b11b      	cbz	r3, 80090c8 <__sinit+0x14>
 80090c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c4:	f7ff bff0 	b.w	80090a8 <__sfp_lock_release>
 80090c8:	4b04      	ldr	r3, [pc, #16]	@ (80090dc <__sinit+0x28>)
 80090ca:	6223      	str	r3, [r4, #32]
 80090cc:	4b04      	ldr	r3, [pc, #16]	@ (80090e0 <__sinit+0x2c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1f5      	bne.n	80090c0 <__sinit+0xc>
 80090d4:	f7ff ffc4 	bl	8009060 <global_stdio_init.part.0>
 80090d8:	e7f2      	b.n	80090c0 <__sinit+0xc>
 80090da:	bf00      	nop
 80090dc:	08009021 	.word	0x08009021
 80090e0:	200007e8 	.word	0x200007e8

080090e4 <_fwalk_sglue>:
 80090e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e8:	4607      	mov	r7, r0
 80090ea:	4688      	mov	r8, r1
 80090ec:	4614      	mov	r4, r2
 80090ee:	2600      	movs	r6, #0
 80090f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090f4:	f1b9 0901 	subs.w	r9, r9, #1
 80090f8:	d505      	bpl.n	8009106 <_fwalk_sglue+0x22>
 80090fa:	6824      	ldr	r4, [r4, #0]
 80090fc:	2c00      	cmp	r4, #0
 80090fe:	d1f7      	bne.n	80090f0 <_fwalk_sglue+0xc>
 8009100:	4630      	mov	r0, r6
 8009102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009106:	89ab      	ldrh	r3, [r5, #12]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d907      	bls.n	800911c <_fwalk_sglue+0x38>
 800910c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009110:	3301      	adds	r3, #1
 8009112:	d003      	beq.n	800911c <_fwalk_sglue+0x38>
 8009114:	4629      	mov	r1, r5
 8009116:	4638      	mov	r0, r7
 8009118:	47c0      	blx	r8
 800911a:	4306      	orrs	r6, r0
 800911c:	3568      	adds	r5, #104	@ 0x68
 800911e:	e7e9      	b.n	80090f4 <_fwalk_sglue+0x10>

08009120 <siprintf>:
 8009120:	b40e      	push	{r1, r2, r3}
 8009122:	b510      	push	{r4, lr}
 8009124:	b09d      	sub	sp, #116	@ 0x74
 8009126:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009128:	9002      	str	r0, [sp, #8]
 800912a:	9006      	str	r0, [sp, #24]
 800912c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009130:	480a      	ldr	r0, [pc, #40]	@ (800915c <siprintf+0x3c>)
 8009132:	9107      	str	r1, [sp, #28]
 8009134:	9104      	str	r1, [sp, #16]
 8009136:	490a      	ldr	r1, [pc, #40]	@ (8009160 <siprintf+0x40>)
 8009138:	f853 2b04 	ldr.w	r2, [r3], #4
 800913c:	9105      	str	r1, [sp, #20]
 800913e:	2400      	movs	r4, #0
 8009140:	a902      	add	r1, sp, #8
 8009142:	6800      	ldr	r0, [r0, #0]
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009148:	f001 fc10 	bl	800a96c <_svfiprintf_r>
 800914c:	9b02      	ldr	r3, [sp, #8]
 800914e:	701c      	strb	r4, [r3, #0]
 8009150:	b01d      	add	sp, #116	@ 0x74
 8009152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009156:	b003      	add	sp, #12
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	20000070 	.word	0x20000070
 8009160:	ffff0208 	.word	0xffff0208

08009164 <__sread>:
 8009164:	b510      	push	{r4, lr}
 8009166:	460c      	mov	r4, r1
 8009168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916c:	f000 f87e 	bl	800926c <_read_r>
 8009170:	2800      	cmp	r0, #0
 8009172:	bfab      	itete	ge
 8009174:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009176:	89a3      	ldrhlt	r3, [r4, #12]
 8009178:	181b      	addge	r3, r3, r0
 800917a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800917e:	bfac      	ite	ge
 8009180:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009182:	81a3      	strhlt	r3, [r4, #12]
 8009184:	bd10      	pop	{r4, pc}

08009186 <__swrite>:
 8009186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800918a:	461f      	mov	r7, r3
 800918c:	898b      	ldrh	r3, [r1, #12]
 800918e:	05db      	lsls	r3, r3, #23
 8009190:	4605      	mov	r5, r0
 8009192:	460c      	mov	r4, r1
 8009194:	4616      	mov	r6, r2
 8009196:	d505      	bpl.n	80091a4 <__swrite+0x1e>
 8009198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800919c:	2302      	movs	r3, #2
 800919e:	2200      	movs	r2, #0
 80091a0:	f000 f852 	bl	8009248 <_lseek_r>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	4632      	mov	r2, r6
 80091b2:	463b      	mov	r3, r7
 80091b4:	4628      	mov	r0, r5
 80091b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ba:	f000 b869 	b.w	8009290 <_write_r>

080091be <__sseek>:
 80091be:	b510      	push	{r4, lr}
 80091c0:	460c      	mov	r4, r1
 80091c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c6:	f000 f83f 	bl	8009248 <_lseek_r>
 80091ca:	1c43      	adds	r3, r0, #1
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	bf15      	itete	ne
 80091d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091da:	81a3      	strheq	r3, [r4, #12]
 80091dc:	bf18      	it	ne
 80091de:	81a3      	strhne	r3, [r4, #12]
 80091e0:	bd10      	pop	{r4, pc}

080091e2 <__sclose>:
 80091e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e6:	f000 b81f 	b.w	8009228 <_close_r>

080091ea <memset>:
 80091ea:	4402      	add	r2, r0
 80091ec:	4603      	mov	r3, r0
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d100      	bne.n	80091f4 <memset+0xa>
 80091f2:	4770      	bx	lr
 80091f4:	f803 1b01 	strb.w	r1, [r3], #1
 80091f8:	e7f9      	b.n	80091ee <memset+0x4>

080091fa <strncmp>:
 80091fa:	b510      	push	{r4, lr}
 80091fc:	b16a      	cbz	r2, 800921a <strncmp+0x20>
 80091fe:	3901      	subs	r1, #1
 8009200:	1884      	adds	r4, r0, r2
 8009202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009206:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800920a:	429a      	cmp	r2, r3
 800920c:	d103      	bne.n	8009216 <strncmp+0x1c>
 800920e:	42a0      	cmp	r0, r4
 8009210:	d001      	beq.n	8009216 <strncmp+0x1c>
 8009212:	2a00      	cmp	r2, #0
 8009214:	d1f5      	bne.n	8009202 <strncmp+0x8>
 8009216:	1ad0      	subs	r0, r2, r3
 8009218:	bd10      	pop	{r4, pc}
 800921a:	4610      	mov	r0, r2
 800921c:	e7fc      	b.n	8009218 <strncmp+0x1e>
	...

08009220 <_localeconv_r>:
 8009220:	4800      	ldr	r0, [pc, #0]	@ (8009224 <_localeconv_r+0x4>)
 8009222:	4770      	bx	lr
 8009224:	200001b0 	.word	0x200001b0

08009228 <_close_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d06      	ldr	r5, [pc, #24]	@ (8009244 <_close_r+0x1c>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	f7fa f8a2 	bl	800337c <_close>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_close_r+0x1a>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b103      	cbz	r3, 8009242 <_close_r+0x1a>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	200007ec 	.word	0x200007ec

08009248 <_lseek_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d07      	ldr	r5, [pc, #28]	@ (8009268 <_lseek_r+0x20>)
 800924c:	4604      	mov	r4, r0
 800924e:	4608      	mov	r0, r1
 8009250:	4611      	mov	r1, r2
 8009252:	2200      	movs	r2, #0
 8009254:	602a      	str	r2, [r5, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	f7fa f8b7 	bl	80033ca <_lseek>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_lseek_r+0x1e>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_lseek_r+0x1e>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	200007ec 	.word	0x200007ec

0800926c <_read_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4d07      	ldr	r5, [pc, #28]	@ (800928c <_read_r+0x20>)
 8009270:	4604      	mov	r4, r0
 8009272:	4608      	mov	r0, r1
 8009274:	4611      	mov	r1, r2
 8009276:	2200      	movs	r2, #0
 8009278:	602a      	str	r2, [r5, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	f7fa f845 	bl	800330a <_read>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_read_r+0x1e>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_read_r+0x1e>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	200007ec 	.word	0x200007ec

08009290 <_write_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d07      	ldr	r5, [pc, #28]	@ (80092b0 <_write_r+0x20>)
 8009294:	4604      	mov	r4, r0
 8009296:	4608      	mov	r0, r1
 8009298:	4611      	mov	r1, r2
 800929a:	2200      	movs	r2, #0
 800929c:	602a      	str	r2, [r5, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	f7fa f850 	bl	8003344 <_write>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d102      	bne.n	80092ae <_write_r+0x1e>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	b103      	cbz	r3, 80092ae <_write_r+0x1e>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	200007ec 	.word	0x200007ec

080092b4 <__errno>:
 80092b4:	4b01      	ldr	r3, [pc, #4]	@ (80092bc <__errno+0x8>)
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	20000070 	.word	0x20000070

080092c0 <__libc_init_array>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	4d0d      	ldr	r5, [pc, #52]	@ (80092f8 <__libc_init_array+0x38>)
 80092c4:	4c0d      	ldr	r4, [pc, #52]	@ (80092fc <__libc_init_array+0x3c>)
 80092c6:	1b64      	subs	r4, r4, r5
 80092c8:	10a4      	asrs	r4, r4, #2
 80092ca:	2600      	movs	r6, #0
 80092cc:	42a6      	cmp	r6, r4
 80092ce:	d109      	bne.n	80092e4 <__libc_init_array+0x24>
 80092d0:	4d0b      	ldr	r5, [pc, #44]	@ (8009300 <__libc_init_array+0x40>)
 80092d2:	4c0c      	ldr	r4, [pc, #48]	@ (8009304 <__libc_init_array+0x44>)
 80092d4:	f002 f868 	bl	800b3a8 <_init>
 80092d8:	1b64      	subs	r4, r4, r5
 80092da:	10a4      	asrs	r4, r4, #2
 80092dc:	2600      	movs	r6, #0
 80092de:	42a6      	cmp	r6, r4
 80092e0:	d105      	bne.n	80092ee <__libc_init_array+0x2e>
 80092e2:	bd70      	pop	{r4, r5, r6, pc}
 80092e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092e8:	4798      	blx	r3
 80092ea:	3601      	adds	r6, #1
 80092ec:	e7ee      	b.n	80092cc <__libc_init_array+0xc>
 80092ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f2:	4798      	blx	r3
 80092f4:	3601      	adds	r6, #1
 80092f6:	e7f2      	b.n	80092de <__libc_init_array+0x1e>
 80092f8:	0800bb28 	.word	0x0800bb28
 80092fc:	0800bb28 	.word	0x0800bb28
 8009300:	0800bb28 	.word	0x0800bb28
 8009304:	0800bb2c 	.word	0x0800bb2c

08009308 <__retarget_lock_init_recursive>:
 8009308:	4770      	bx	lr

0800930a <__retarget_lock_acquire_recursive>:
 800930a:	4770      	bx	lr

0800930c <__retarget_lock_release_recursive>:
 800930c:	4770      	bx	lr

0800930e <quorem>:
 800930e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009312:	6903      	ldr	r3, [r0, #16]
 8009314:	690c      	ldr	r4, [r1, #16]
 8009316:	42a3      	cmp	r3, r4
 8009318:	4607      	mov	r7, r0
 800931a:	db7e      	blt.n	800941a <quorem+0x10c>
 800931c:	3c01      	subs	r4, #1
 800931e:	f101 0814 	add.w	r8, r1, #20
 8009322:	00a3      	lsls	r3, r4, #2
 8009324:	f100 0514 	add.w	r5, r0, #20
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009338:	3301      	adds	r3, #1
 800933a:	429a      	cmp	r2, r3
 800933c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009340:	fbb2 f6f3 	udiv	r6, r2, r3
 8009344:	d32e      	bcc.n	80093a4 <quorem+0x96>
 8009346:	f04f 0a00 	mov.w	sl, #0
 800934a:	46c4      	mov	ip, r8
 800934c:	46ae      	mov	lr, r5
 800934e:	46d3      	mov	fp, sl
 8009350:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009354:	b298      	uxth	r0, r3
 8009356:	fb06 a000 	mla	r0, r6, r0, sl
 800935a:	0c02      	lsrs	r2, r0, #16
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	fb06 2303 	mla	r3, r6, r3, r2
 8009362:	f8de 2000 	ldr.w	r2, [lr]
 8009366:	b280      	uxth	r0, r0
 8009368:	b292      	uxth	r2, r2
 800936a:	1a12      	subs	r2, r2, r0
 800936c:	445a      	add	r2, fp
 800936e:	f8de 0000 	ldr.w	r0, [lr]
 8009372:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009376:	b29b      	uxth	r3, r3
 8009378:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800937c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009380:	b292      	uxth	r2, r2
 8009382:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009386:	45e1      	cmp	r9, ip
 8009388:	f84e 2b04 	str.w	r2, [lr], #4
 800938c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009390:	d2de      	bcs.n	8009350 <quorem+0x42>
 8009392:	9b00      	ldr	r3, [sp, #0]
 8009394:	58eb      	ldr	r3, [r5, r3]
 8009396:	b92b      	cbnz	r3, 80093a4 <quorem+0x96>
 8009398:	9b01      	ldr	r3, [sp, #4]
 800939a:	3b04      	subs	r3, #4
 800939c:	429d      	cmp	r5, r3
 800939e:	461a      	mov	r2, r3
 80093a0:	d32f      	bcc.n	8009402 <quorem+0xf4>
 80093a2:	613c      	str	r4, [r7, #16]
 80093a4:	4638      	mov	r0, r7
 80093a6:	f001 f97d 	bl	800a6a4 <__mcmp>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	db25      	blt.n	80093fa <quorem+0xec>
 80093ae:	4629      	mov	r1, r5
 80093b0:	2000      	movs	r0, #0
 80093b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80093b6:	f8d1 c000 	ldr.w	ip, [r1]
 80093ba:	fa1f fe82 	uxth.w	lr, r2
 80093be:	fa1f f38c 	uxth.w	r3, ip
 80093c2:	eba3 030e 	sub.w	r3, r3, lr
 80093c6:	4403      	add	r3, r0
 80093c8:	0c12      	lsrs	r2, r2, #16
 80093ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d8:	45c1      	cmp	r9, r8
 80093da:	f841 3b04 	str.w	r3, [r1], #4
 80093de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093e2:	d2e6      	bcs.n	80093b2 <quorem+0xa4>
 80093e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ec:	b922      	cbnz	r2, 80093f8 <quorem+0xea>
 80093ee:	3b04      	subs	r3, #4
 80093f0:	429d      	cmp	r5, r3
 80093f2:	461a      	mov	r2, r3
 80093f4:	d30b      	bcc.n	800940e <quorem+0x100>
 80093f6:	613c      	str	r4, [r7, #16]
 80093f8:	3601      	adds	r6, #1
 80093fa:	4630      	mov	r0, r6
 80093fc:	b003      	add	sp, #12
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	6812      	ldr	r2, [r2, #0]
 8009404:	3b04      	subs	r3, #4
 8009406:	2a00      	cmp	r2, #0
 8009408:	d1cb      	bne.n	80093a2 <quorem+0x94>
 800940a:	3c01      	subs	r4, #1
 800940c:	e7c6      	b.n	800939c <quorem+0x8e>
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	3b04      	subs	r3, #4
 8009412:	2a00      	cmp	r2, #0
 8009414:	d1ef      	bne.n	80093f6 <quorem+0xe8>
 8009416:	3c01      	subs	r4, #1
 8009418:	e7ea      	b.n	80093f0 <quorem+0xe2>
 800941a:	2000      	movs	r0, #0
 800941c:	e7ee      	b.n	80093fc <quorem+0xee>
	...

08009420 <_dtoa_r>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	69c7      	ldr	r7, [r0, #28]
 8009426:	b097      	sub	sp, #92	@ 0x5c
 8009428:	ed8d 0b04 	vstr	d0, [sp, #16]
 800942c:	ec55 4b10 	vmov	r4, r5, d0
 8009430:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009432:	9107      	str	r1, [sp, #28]
 8009434:	4681      	mov	r9, r0
 8009436:	920c      	str	r2, [sp, #48]	@ 0x30
 8009438:	9311      	str	r3, [sp, #68]	@ 0x44
 800943a:	b97f      	cbnz	r7, 800945c <_dtoa_r+0x3c>
 800943c:	2010      	movs	r0, #16
 800943e:	f000 fe09 	bl	800a054 <malloc>
 8009442:	4602      	mov	r2, r0
 8009444:	f8c9 001c 	str.w	r0, [r9, #28]
 8009448:	b920      	cbnz	r0, 8009454 <_dtoa_r+0x34>
 800944a:	4ba9      	ldr	r3, [pc, #676]	@ (80096f0 <_dtoa_r+0x2d0>)
 800944c:	21ef      	movs	r1, #239	@ 0xef
 800944e:	48a9      	ldr	r0, [pc, #676]	@ (80096f4 <_dtoa_r+0x2d4>)
 8009450:	f001 fc6c 	bl	800ad2c <__assert_func>
 8009454:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009458:	6007      	str	r7, [r0, #0]
 800945a:	60c7      	str	r7, [r0, #12]
 800945c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009460:	6819      	ldr	r1, [r3, #0]
 8009462:	b159      	cbz	r1, 800947c <_dtoa_r+0x5c>
 8009464:	685a      	ldr	r2, [r3, #4]
 8009466:	604a      	str	r2, [r1, #4]
 8009468:	2301      	movs	r3, #1
 800946a:	4093      	lsls	r3, r2
 800946c:	608b      	str	r3, [r1, #8]
 800946e:	4648      	mov	r0, r9
 8009470:	f000 fee6 	bl	800a240 <_Bfree>
 8009474:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	1e2b      	subs	r3, r5, #0
 800947e:	bfb9      	ittee	lt
 8009480:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009484:	9305      	strlt	r3, [sp, #20]
 8009486:	2300      	movge	r3, #0
 8009488:	6033      	strge	r3, [r6, #0]
 800948a:	9f05      	ldr	r7, [sp, #20]
 800948c:	4b9a      	ldr	r3, [pc, #616]	@ (80096f8 <_dtoa_r+0x2d8>)
 800948e:	bfbc      	itt	lt
 8009490:	2201      	movlt	r2, #1
 8009492:	6032      	strlt	r2, [r6, #0]
 8009494:	43bb      	bics	r3, r7
 8009496:	d112      	bne.n	80094be <_dtoa_r+0x9e>
 8009498:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800949a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094a4:	4323      	orrs	r3, r4
 80094a6:	f000 855a 	beq.w	8009f5e <_dtoa_r+0xb3e>
 80094aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800970c <_dtoa_r+0x2ec>
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 855c 	beq.w	8009f6e <_dtoa_r+0xb4e>
 80094b6:	f10a 0303 	add.w	r3, sl, #3
 80094ba:	f000 bd56 	b.w	8009f6a <_dtoa_r+0xb4a>
 80094be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80094c2:	2200      	movs	r2, #0
 80094c4:	ec51 0b17 	vmov	r0, r1, d7
 80094c8:	2300      	movs	r3, #0
 80094ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80094ce:	f7f7 fb03 	bl	8000ad8 <__aeabi_dcmpeq>
 80094d2:	4680      	mov	r8, r0
 80094d4:	b158      	cbz	r0, 80094ee <_dtoa_r+0xce>
 80094d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094d8:	2301      	movs	r3, #1
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094de:	b113      	cbz	r3, 80094e6 <_dtoa_r+0xc6>
 80094e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80094e2:	4b86      	ldr	r3, [pc, #536]	@ (80096fc <_dtoa_r+0x2dc>)
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009710 <_dtoa_r+0x2f0>
 80094ea:	f000 bd40 	b.w	8009f6e <_dtoa_r+0xb4e>
 80094ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80094f2:	aa14      	add	r2, sp, #80	@ 0x50
 80094f4:	a915      	add	r1, sp, #84	@ 0x54
 80094f6:	4648      	mov	r0, r9
 80094f8:	f001 f984 	bl	800a804 <__d2b>
 80094fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009500:	9002      	str	r0, [sp, #8]
 8009502:	2e00      	cmp	r6, #0
 8009504:	d078      	beq.n	80095f8 <_dtoa_r+0x1d8>
 8009506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009508:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800950c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009514:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009518:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800951c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009520:	4619      	mov	r1, r3
 8009522:	2200      	movs	r2, #0
 8009524:	4b76      	ldr	r3, [pc, #472]	@ (8009700 <_dtoa_r+0x2e0>)
 8009526:	f7f6 feb7 	bl	8000298 <__aeabi_dsub>
 800952a:	a36b      	add	r3, pc, #428	@ (adr r3, 80096d8 <_dtoa_r+0x2b8>)
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f7f7 f86a 	bl	8000608 <__aeabi_dmul>
 8009534:	a36a      	add	r3, pc, #424	@ (adr r3, 80096e0 <_dtoa_r+0x2c0>)
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f7f6 feaf 	bl	800029c <__adddf3>
 800953e:	4604      	mov	r4, r0
 8009540:	4630      	mov	r0, r6
 8009542:	460d      	mov	r5, r1
 8009544:	f7f6 fff6 	bl	8000534 <__aeabi_i2d>
 8009548:	a367      	add	r3, pc, #412	@ (adr r3, 80096e8 <_dtoa_r+0x2c8>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f7f7 f85b 	bl	8000608 <__aeabi_dmul>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4620      	mov	r0, r4
 8009558:	4629      	mov	r1, r5
 800955a:	f7f6 fe9f 	bl	800029c <__adddf3>
 800955e:	4604      	mov	r4, r0
 8009560:	460d      	mov	r5, r1
 8009562:	f7f7 fb01 	bl	8000b68 <__aeabi_d2iz>
 8009566:	2200      	movs	r2, #0
 8009568:	4607      	mov	r7, r0
 800956a:	2300      	movs	r3, #0
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	f7f7 fabc 	bl	8000aec <__aeabi_dcmplt>
 8009574:	b140      	cbz	r0, 8009588 <_dtoa_r+0x168>
 8009576:	4638      	mov	r0, r7
 8009578:	f7f6 ffdc 	bl	8000534 <__aeabi_i2d>
 800957c:	4622      	mov	r2, r4
 800957e:	462b      	mov	r3, r5
 8009580:	f7f7 faaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8009584:	b900      	cbnz	r0, 8009588 <_dtoa_r+0x168>
 8009586:	3f01      	subs	r7, #1
 8009588:	2f16      	cmp	r7, #22
 800958a:	d852      	bhi.n	8009632 <_dtoa_r+0x212>
 800958c:	4b5d      	ldr	r3, [pc, #372]	@ (8009704 <_dtoa_r+0x2e4>)
 800958e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800959a:	f7f7 faa7 	bl	8000aec <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d049      	beq.n	8009636 <_dtoa_r+0x216>
 80095a2:	3f01      	subs	r7, #1
 80095a4:	2300      	movs	r3, #0
 80095a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80095a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095aa:	1b9b      	subs	r3, r3, r6
 80095ac:	1e5a      	subs	r2, r3, #1
 80095ae:	bf45      	ittet	mi
 80095b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80095b4:	9300      	strmi	r3, [sp, #0]
 80095b6:	2300      	movpl	r3, #0
 80095b8:	2300      	movmi	r3, #0
 80095ba:	9206      	str	r2, [sp, #24]
 80095bc:	bf54      	ite	pl
 80095be:	9300      	strpl	r3, [sp, #0]
 80095c0:	9306      	strmi	r3, [sp, #24]
 80095c2:	2f00      	cmp	r7, #0
 80095c4:	db39      	blt.n	800963a <_dtoa_r+0x21a>
 80095c6:	9b06      	ldr	r3, [sp, #24]
 80095c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80095ca:	443b      	add	r3, r7
 80095cc:	9306      	str	r3, [sp, #24]
 80095ce:	2300      	movs	r3, #0
 80095d0:	9308      	str	r3, [sp, #32]
 80095d2:	9b07      	ldr	r3, [sp, #28]
 80095d4:	2b09      	cmp	r3, #9
 80095d6:	d863      	bhi.n	80096a0 <_dtoa_r+0x280>
 80095d8:	2b05      	cmp	r3, #5
 80095da:	bfc4      	itt	gt
 80095dc:	3b04      	subgt	r3, #4
 80095de:	9307      	strgt	r3, [sp, #28]
 80095e0:	9b07      	ldr	r3, [sp, #28]
 80095e2:	f1a3 0302 	sub.w	r3, r3, #2
 80095e6:	bfcc      	ite	gt
 80095e8:	2400      	movgt	r4, #0
 80095ea:	2401      	movle	r4, #1
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d863      	bhi.n	80096b8 <_dtoa_r+0x298>
 80095f0:	e8df f003 	tbb	[pc, r3]
 80095f4:	2b375452 	.word	0x2b375452
 80095f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80095fc:	441e      	add	r6, r3
 80095fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009602:	2b20      	cmp	r3, #32
 8009604:	bfc1      	itttt	gt
 8009606:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800960a:	409f      	lslgt	r7, r3
 800960c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009610:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009614:	bfd6      	itet	le
 8009616:	f1c3 0320 	rsble	r3, r3, #32
 800961a:	ea47 0003 	orrgt.w	r0, r7, r3
 800961e:	fa04 f003 	lslle.w	r0, r4, r3
 8009622:	f7f6 ff77 	bl	8000514 <__aeabi_ui2d>
 8009626:	2201      	movs	r2, #1
 8009628:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800962c:	3e01      	subs	r6, #1
 800962e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009630:	e776      	b.n	8009520 <_dtoa_r+0x100>
 8009632:	2301      	movs	r3, #1
 8009634:	e7b7      	b.n	80095a6 <_dtoa_r+0x186>
 8009636:	9010      	str	r0, [sp, #64]	@ 0x40
 8009638:	e7b6      	b.n	80095a8 <_dtoa_r+0x188>
 800963a:	9b00      	ldr	r3, [sp, #0]
 800963c:	1bdb      	subs	r3, r3, r7
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	427b      	negs	r3, r7
 8009642:	9308      	str	r3, [sp, #32]
 8009644:	2300      	movs	r3, #0
 8009646:	930d      	str	r3, [sp, #52]	@ 0x34
 8009648:	e7c3      	b.n	80095d2 <_dtoa_r+0x1b2>
 800964a:	2301      	movs	r3, #1
 800964c:	9309      	str	r3, [sp, #36]	@ 0x24
 800964e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009650:	eb07 0b03 	add.w	fp, r7, r3
 8009654:	f10b 0301 	add.w	r3, fp, #1
 8009658:	2b01      	cmp	r3, #1
 800965a:	9303      	str	r3, [sp, #12]
 800965c:	bfb8      	it	lt
 800965e:	2301      	movlt	r3, #1
 8009660:	e006      	b.n	8009670 <_dtoa_r+0x250>
 8009662:	2301      	movs	r3, #1
 8009664:	9309      	str	r3, [sp, #36]	@ 0x24
 8009666:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009668:	2b00      	cmp	r3, #0
 800966a:	dd28      	ble.n	80096be <_dtoa_r+0x29e>
 800966c:	469b      	mov	fp, r3
 800966e:	9303      	str	r3, [sp, #12]
 8009670:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009674:	2100      	movs	r1, #0
 8009676:	2204      	movs	r2, #4
 8009678:	f102 0514 	add.w	r5, r2, #20
 800967c:	429d      	cmp	r5, r3
 800967e:	d926      	bls.n	80096ce <_dtoa_r+0x2ae>
 8009680:	6041      	str	r1, [r0, #4]
 8009682:	4648      	mov	r0, r9
 8009684:	f000 fd9c 	bl	800a1c0 <_Balloc>
 8009688:	4682      	mov	sl, r0
 800968a:	2800      	cmp	r0, #0
 800968c:	d142      	bne.n	8009714 <_dtoa_r+0x2f4>
 800968e:	4b1e      	ldr	r3, [pc, #120]	@ (8009708 <_dtoa_r+0x2e8>)
 8009690:	4602      	mov	r2, r0
 8009692:	f240 11af 	movw	r1, #431	@ 0x1af
 8009696:	e6da      	b.n	800944e <_dtoa_r+0x2e>
 8009698:	2300      	movs	r3, #0
 800969a:	e7e3      	b.n	8009664 <_dtoa_r+0x244>
 800969c:	2300      	movs	r3, #0
 800969e:	e7d5      	b.n	800964c <_dtoa_r+0x22c>
 80096a0:	2401      	movs	r4, #1
 80096a2:	2300      	movs	r3, #0
 80096a4:	9307      	str	r3, [sp, #28]
 80096a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80096a8:	f04f 3bff 	mov.w	fp, #4294967295
 80096ac:	2200      	movs	r2, #0
 80096ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80096b2:	2312      	movs	r3, #18
 80096b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80096b6:	e7db      	b.n	8009670 <_dtoa_r+0x250>
 80096b8:	2301      	movs	r3, #1
 80096ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80096bc:	e7f4      	b.n	80096a8 <_dtoa_r+0x288>
 80096be:	f04f 0b01 	mov.w	fp, #1
 80096c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80096c6:	465b      	mov	r3, fp
 80096c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80096cc:	e7d0      	b.n	8009670 <_dtoa_r+0x250>
 80096ce:	3101      	adds	r1, #1
 80096d0:	0052      	lsls	r2, r2, #1
 80096d2:	e7d1      	b.n	8009678 <_dtoa_r+0x258>
 80096d4:	f3af 8000 	nop.w
 80096d8:	636f4361 	.word	0x636f4361
 80096dc:	3fd287a7 	.word	0x3fd287a7
 80096e0:	8b60c8b3 	.word	0x8b60c8b3
 80096e4:	3fc68a28 	.word	0x3fc68a28
 80096e8:	509f79fb 	.word	0x509f79fb
 80096ec:	3fd34413 	.word	0x3fd34413
 80096f0:	0800b8f2 	.word	0x0800b8f2
 80096f4:	0800b909 	.word	0x0800b909
 80096f8:	7ff00000 	.word	0x7ff00000
 80096fc:	0800b8c2 	.word	0x0800b8c2
 8009700:	3ff80000 	.word	0x3ff80000
 8009704:	0800ba58 	.word	0x0800ba58
 8009708:	0800b961 	.word	0x0800b961
 800970c:	0800b8ee 	.word	0x0800b8ee
 8009710:	0800b8c1 	.word	0x0800b8c1
 8009714:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009718:	6018      	str	r0, [r3, #0]
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	2b0e      	cmp	r3, #14
 800971e:	f200 80a1 	bhi.w	8009864 <_dtoa_r+0x444>
 8009722:	2c00      	cmp	r4, #0
 8009724:	f000 809e 	beq.w	8009864 <_dtoa_r+0x444>
 8009728:	2f00      	cmp	r7, #0
 800972a:	dd33      	ble.n	8009794 <_dtoa_r+0x374>
 800972c:	4b9c      	ldr	r3, [pc, #624]	@ (80099a0 <_dtoa_r+0x580>)
 800972e:	f007 020f 	and.w	r2, r7, #15
 8009732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009736:	ed93 7b00 	vldr	d7, [r3]
 800973a:	05f8      	lsls	r0, r7, #23
 800973c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009740:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009744:	d516      	bpl.n	8009774 <_dtoa_r+0x354>
 8009746:	4b97      	ldr	r3, [pc, #604]	@ (80099a4 <_dtoa_r+0x584>)
 8009748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800974c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009750:	f7f7 f884 	bl	800085c <__aeabi_ddiv>
 8009754:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009758:	f004 040f 	and.w	r4, r4, #15
 800975c:	2603      	movs	r6, #3
 800975e:	4d91      	ldr	r5, [pc, #580]	@ (80099a4 <_dtoa_r+0x584>)
 8009760:	b954      	cbnz	r4, 8009778 <_dtoa_r+0x358>
 8009762:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800976a:	f7f7 f877 	bl	800085c <__aeabi_ddiv>
 800976e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009772:	e028      	b.n	80097c6 <_dtoa_r+0x3a6>
 8009774:	2602      	movs	r6, #2
 8009776:	e7f2      	b.n	800975e <_dtoa_r+0x33e>
 8009778:	07e1      	lsls	r1, r4, #31
 800977a:	d508      	bpl.n	800978e <_dtoa_r+0x36e>
 800977c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009780:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009784:	f7f6 ff40 	bl	8000608 <__aeabi_dmul>
 8009788:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800978c:	3601      	adds	r6, #1
 800978e:	1064      	asrs	r4, r4, #1
 8009790:	3508      	adds	r5, #8
 8009792:	e7e5      	b.n	8009760 <_dtoa_r+0x340>
 8009794:	f000 80af 	beq.w	80098f6 <_dtoa_r+0x4d6>
 8009798:	427c      	negs	r4, r7
 800979a:	4b81      	ldr	r3, [pc, #516]	@ (80099a0 <_dtoa_r+0x580>)
 800979c:	4d81      	ldr	r5, [pc, #516]	@ (80099a4 <_dtoa_r+0x584>)
 800979e:	f004 020f 	and.w	r2, r4, #15
 80097a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097ae:	f7f6 ff2b 	bl	8000608 <__aeabi_dmul>
 80097b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097b6:	1124      	asrs	r4, r4, #4
 80097b8:	2300      	movs	r3, #0
 80097ba:	2602      	movs	r6, #2
 80097bc:	2c00      	cmp	r4, #0
 80097be:	f040 808f 	bne.w	80098e0 <_dtoa_r+0x4c0>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1d3      	bne.n	800976e <_dtoa_r+0x34e>
 80097c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 8094 	beq.w	80098fa <_dtoa_r+0x4da>
 80097d2:	4b75      	ldr	r3, [pc, #468]	@ (80099a8 <_dtoa_r+0x588>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	f7f7 f987 	bl	8000aec <__aeabi_dcmplt>
 80097de:	2800      	cmp	r0, #0
 80097e0:	f000 808b 	beq.w	80098fa <_dtoa_r+0x4da>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 8087 	beq.w	80098fa <_dtoa_r+0x4da>
 80097ec:	f1bb 0f00 	cmp.w	fp, #0
 80097f0:	dd34      	ble.n	800985c <_dtoa_r+0x43c>
 80097f2:	4620      	mov	r0, r4
 80097f4:	4b6d      	ldr	r3, [pc, #436]	@ (80099ac <_dtoa_r+0x58c>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f6 ff05 	bl	8000608 <__aeabi_dmul>
 80097fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009802:	f107 38ff 	add.w	r8, r7, #4294967295
 8009806:	3601      	adds	r6, #1
 8009808:	465c      	mov	r4, fp
 800980a:	4630      	mov	r0, r6
 800980c:	f7f6 fe92 	bl	8000534 <__aeabi_i2d>
 8009810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009814:	f7f6 fef8 	bl	8000608 <__aeabi_dmul>
 8009818:	4b65      	ldr	r3, [pc, #404]	@ (80099b0 <_dtoa_r+0x590>)
 800981a:	2200      	movs	r2, #0
 800981c:	f7f6 fd3e 	bl	800029c <__adddf3>
 8009820:	4605      	mov	r5, r0
 8009822:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009826:	2c00      	cmp	r4, #0
 8009828:	d16a      	bne.n	8009900 <_dtoa_r+0x4e0>
 800982a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800982e:	4b61      	ldr	r3, [pc, #388]	@ (80099b4 <_dtoa_r+0x594>)
 8009830:	2200      	movs	r2, #0
 8009832:	f7f6 fd31 	bl	8000298 <__aeabi_dsub>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800983e:	462a      	mov	r2, r5
 8009840:	4633      	mov	r3, r6
 8009842:	f7f7 f971 	bl	8000b28 <__aeabi_dcmpgt>
 8009846:	2800      	cmp	r0, #0
 8009848:	f040 8298 	bne.w	8009d7c <_dtoa_r+0x95c>
 800984c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009850:	462a      	mov	r2, r5
 8009852:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009856:	f7f7 f949 	bl	8000aec <__aeabi_dcmplt>
 800985a:	bb38      	cbnz	r0, 80098ac <_dtoa_r+0x48c>
 800985c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009860:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009864:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009866:	2b00      	cmp	r3, #0
 8009868:	f2c0 8157 	blt.w	8009b1a <_dtoa_r+0x6fa>
 800986c:	2f0e      	cmp	r7, #14
 800986e:	f300 8154 	bgt.w	8009b1a <_dtoa_r+0x6fa>
 8009872:	4b4b      	ldr	r3, [pc, #300]	@ (80099a0 <_dtoa_r+0x580>)
 8009874:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009878:	ed93 7b00 	vldr	d7, [r3]
 800987c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800987e:	2b00      	cmp	r3, #0
 8009880:	ed8d 7b00 	vstr	d7, [sp]
 8009884:	f280 80e5 	bge.w	8009a52 <_dtoa_r+0x632>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f300 80e1 	bgt.w	8009a52 <_dtoa_r+0x632>
 8009890:	d10c      	bne.n	80098ac <_dtoa_r+0x48c>
 8009892:	4b48      	ldr	r3, [pc, #288]	@ (80099b4 <_dtoa_r+0x594>)
 8009894:	2200      	movs	r2, #0
 8009896:	ec51 0b17 	vmov	r0, r1, d7
 800989a:	f7f6 feb5 	bl	8000608 <__aeabi_dmul>
 800989e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098a2:	f7f7 f937 	bl	8000b14 <__aeabi_dcmpge>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f000 8266 	beq.w	8009d78 <_dtoa_r+0x958>
 80098ac:	2400      	movs	r4, #0
 80098ae:	4625      	mov	r5, r4
 80098b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098b2:	4656      	mov	r6, sl
 80098b4:	ea6f 0803 	mvn.w	r8, r3
 80098b8:	2700      	movs	r7, #0
 80098ba:	4621      	mov	r1, r4
 80098bc:	4648      	mov	r0, r9
 80098be:	f000 fcbf 	bl	800a240 <_Bfree>
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	f000 80bd 	beq.w	8009a42 <_dtoa_r+0x622>
 80098c8:	b12f      	cbz	r7, 80098d6 <_dtoa_r+0x4b6>
 80098ca:	42af      	cmp	r7, r5
 80098cc:	d003      	beq.n	80098d6 <_dtoa_r+0x4b6>
 80098ce:	4639      	mov	r1, r7
 80098d0:	4648      	mov	r0, r9
 80098d2:	f000 fcb5 	bl	800a240 <_Bfree>
 80098d6:	4629      	mov	r1, r5
 80098d8:	4648      	mov	r0, r9
 80098da:	f000 fcb1 	bl	800a240 <_Bfree>
 80098de:	e0b0      	b.n	8009a42 <_dtoa_r+0x622>
 80098e0:	07e2      	lsls	r2, r4, #31
 80098e2:	d505      	bpl.n	80098f0 <_dtoa_r+0x4d0>
 80098e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098e8:	f7f6 fe8e 	bl	8000608 <__aeabi_dmul>
 80098ec:	3601      	adds	r6, #1
 80098ee:	2301      	movs	r3, #1
 80098f0:	1064      	asrs	r4, r4, #1
 80098f2:	3508      	adds	r5, #8
 80098f4:	e762      	b.n	80097bc <_dtoa_r+0x39c>
 80098f6:	2602      	movs	r6, #2
 80098f8:	e765      	b.n	80097c6 <_dtoa_r+0x3a6>
 80098fa:	9c03      	ldr	r4, [sp, #12]
 80098fc:	46b8      	mov	r8, r7
 80098fe:	e784      	b.n	800980a <_dtoa_r+0x3ea>
 8009900:	4b27      	ldr	r3, [pc, #156]	@ (80099a0 <_dtoa_r+0x580>)
 8009902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009904:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009908:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800990c:	4454      	add	r4, sl
 800990e:	2900      	cmp	r1, #0
 8009910:	d054      	beq.n	80099bc <_dtoa_r+0x59c>
 8009912:	4929      	ldr	r1, [pc, #164]	@ (80099b8 <_dtoa_r+0x598>)
 8009914:	2000      	movs	r0, #0
 8009916:	f7f6 ffa1 	bl	800085c <__aeabi_ddiv>
 800991a:	4633      	mov	r3, r6
 800991c:	462a      	mov	r2, r5
 800991e:	f7f6 fcbb 	bl	8000298 <__aeabi_dsub>
 8009922:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009926:	4656      	mov	r6, sl
 8009928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800992c:	f7f7 f91c 	bl	8000b68 <__aeabi_d2iz>
 8009930:	4605      	mov	r5, r0
 8009932:	f7f6 fdff 	bl	8000534 <__aeabi_i2d>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800993e:	f7f6 fcab 	bl	8000298 <__aeabi_dsub>
 8009942:	3530      	adds	r5, #48	@ 0x30
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800994c:	f806 5b01 	strb.w	r5, [r6], #1
 8009950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009954:	f7f7 f8ca 	bl	8000aec <__aeabi_dcmplt>
 8009958:	2800      	cmp	r0, #0
 800995a:	d172      	bne.n	8009a42 <_dtoa_r+0x622>
 800995c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009960:	4911      	ldr	r1, [pc, #68]	@ (80099a8 <_dtoa_r+0x588>)
 8009962:	2000      	movs	r0, #0
 8009964:	f7f6 fc98 	bl	8000298 <__aeabi_dsub>
 8009968:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800996c:	f7f7 f8be 	bl	8000aec <__aeabi_dcmplt>
 8009970:	2800      	cmp	r0, #0
 8009972:	f040 80b4 	bne.w	8009ade <_dtoa_r+0x6be>
 8009976:	42a6      	cmp	r6, r4
 8009978:	f43f af70 	beq.w	800985c <_dtoa_r+0x43c>
 800997c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009980:	4b0a      	ldr	r3, [pc, #40]	@ (80099ac <_dtoa_r+0x58c>)
 8009982:	2200      	movs	r2, #0
 8009984:	f7f6 fe40 	bl	8000608 <__aeabi_dmul>
 8009988:	4b08      	ldr	r3, [pc, #32]	@ (80099ac <_dtoa_r+0x58c>)
 800998a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800998e:	2200      	movs	r2, #0
 8009990:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009994:	f7f6 fe38 	bl	8000608 <__aeabi_dmul>
 8009998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800999c:	e7c4      	b.n	8009928 <_dtoa_r+0x508>
 800999e:	bf00      	nop
 80099a0:	0800ba58 	.word	0x0800ba58
 80099a4:	0800ba30 	.word	0x0800ba30
 80099a8:	3ff00000 	.word	0x3ff00000
 80099ac:	40240000 	.word	0x40240000
 80099b0:	401c0000 	.word	0x401c0000
 80099b4:	40140000 	.word	0x40140000
 80099b8:	3fe00000 	.word	0x3fe00000
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	f7f6 fe22 	bl	8000608 <__aeabi_dmul>
 80099c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80099ca:	4656      	mov	r6, sl
 80099cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099d0:	f7f7 f8ca 	bl	8000b68 <__aeabi_d2iz>
 80099d4:	4605      	mov	r5, r0
 80099d6:	f7f6 fdad 	bl	8000534 <__aeabi_i2d>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099e2:	f7f6 fc59 	bl	8000298 <__aeabi_dsub>
 80099e6:	3530      	adds	r5, #48	@ 0x30
 80099e8:	f806 5b01 	strb.w	r5, [r6], #1
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	42a6      	cmp	r6, r4
 80099f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099f6:	f04f 0200 	mov.w	r2, #0
 80099fa:	d124      	bne.n	8009a46 <_dtoa_r+0x626>
 80099fc:	4baf      	ldr	r3, [pc, #700]	@ (8009cbc <_dtoa_r+0x89c>)
 80099fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a02:	f7f6 fc4b 	bl	800029c <__adddf3>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a0e:	f7f7 f88b 	bl	8000b28 <__aeabi_dcmpgt>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d163      	bne.n	8009ade <_dtoa_r+0x6be>
 8009a16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a1a:	49a8      	ldr	r1, [pc, #672]	@ (8009cbc <_dtoa_r+0x89c>)
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f7f6 fc3b 	bl	8000298 <__aeabi_dsub>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a2a:	f7f7 f85f 	bl	8000aec <__aeabi_dcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f43f af14 	beq.w	800985c <_dtoa_r+0x43c>
 8009a34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a36:	1e73      	subs	r3, r6, #1
 8009a38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a3e:	2b30      	cmp	r3, #48	@ 0x30
 8009a40:	d0f8      	beq.n	8009a34 <_dtoa_r+0x614>
 8009a42:	4647      	mov	r7, r8
 8009a44:	e03b      	b.n	8009abe <_dtoa_r+0x69e>
 8009a46:	4b9e      	ldr	r3, [pc, #632]	@ (8009cc0 <_dtoa_r+0x8a0>)
 8009a48:	f7f6 fdde 	bl	8000608 <__aeabi_dmul>
 8009a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a50:	e7bc      	b.n	80099cc <_dtoa_r+0x5ac>
 8009a52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009a56:	4656      	mov	r6, sl
 8009a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fefc 	bl	800085c <__aeabi_ddiv>
 8009a64:	f7f7 f880 	bl	8000b68 <__aeabi_d2iz>
 8009a68:	4680      	mov	r8, r0
 8009a6a:	f7f6 fd63 	bl	8000534 <__aeabi_i2d>
 8009a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a72:	f7f6 fdc9 	bl	8000608 <__aeabi_dmul>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a82:	f7f6 fc09 	bl	8000298 <__aeabi_dsub>
 8009a86:	f806 4b01 	strb.w	r4, [r6], #1
 8009a8a:	9d03      	ldr	r5, [sp, #12]
 8009a8c:	eba6 040a 	sub.w	r4, r6, sl
 8009a90:	42a5      	cmp	r5, r4
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	d133      	bne.n	8009b00 <_dtoa_r+0x6e0>
 8009a98:	f7f6 fc00 	bl	800029c <__adddf3>
 8009a9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	460d      	mov	r5, r1
 8009aa4:	f7f7 f840 	bl	8000b28 <__aeabi_dcmpgt>
 8009aa8:	b9c0      	cbnz	r0, 8009adc <_dtoa_r+0x6bc>
 8009aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7f7 f811 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ab6:	b110      	cbz	r0, 8009abe <_dtoa_r+0x69e>
 8009ab8:	f018 0f01 	tst.w	r8, #1
 8009abc:	d10e      	bne.n	8009adc <_dtoa_r+0x6bc>
 8009abe:	9902      	ldr	r1, [sp, #8]
 8009ac0:	4648      	mov	r0, r9
 8009ac2:	f000 fbbd 	bl	800a240 <_Bfree>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	7033      	strb	r3, [r6, #0]
 8009aca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009acc:	3701      	adds	r7, #1
 8009ace:	601f      	str	r7, [r3, #0]
 8009ad0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 824b 	beq.w	8009f6e <_dtoa_r+0xb4e>
 8009ad8:	601e      	str	r6, [r3, #0]
 8009ada:	e248      	b.n	8009f6e <_dtoa_r+0xb4e>
 8009adc:	46b8      	mov	r8, r7
 8009ade:	4633      	mov	r3, r6
 8009ae0:	461e      	mov	r6, r3
 8009ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ae6:	2a39      	cmp	r2, #57	@ 0x39
 8009ae8:	d106      	bne.n	8009af8 <_dtoa_r+0x6d8>
 8009aea:	459a      	cmp	sl, r3
 8009aec:	d1f8      	bne.n	8009ae0 <_dtoa_r+0x6c0>
 8009aee:	2230      	movs	r2, #48	@ 0x30
 8009af0:	f108 0801 	add.w	r8, r8, #1
 8009af4:	f88a 2000 	strb.w	r2, [sl]
 8009af8:	781a      	ldrb	r2, [r3, #0]
 8009afa:	3201      	adds	r2, #1
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	e7a0      	b.n	8009a42 <_dtoa_r+0x622>
 8009b00:	4b6f      	ldr	r3, [pc, #444]	@ (8009cc0 <_dtoa_r+0x8a0>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	f7f6 fd80 	bl	8000608 <__aeabi_dmul>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	460d      	mov	r5, r1
 8009b10:	f7f6 ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d09f      	beq.n	8009a58 <_dtoa_r+0x638>
 8009b18:	e7d1      	b.n	8009abe <_dtoa_r+0x69e>
 8009b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b1c:	2a00      	cmp	r2, #0
 8009b1e:	f000 80ea 	beq.w	8009cf6 <_dtoa_r+0x8d6>
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	2a01      	cmp	r2, #1
 8009b26:	f300 80cd 	bgt.w	8009cc4 <_dtoa_r+0x8a4>
 8009b2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	f000 80c1 	beq.w	8009cb4 <_dtoa_r+0x894>
 8009b32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b36:	9c08      	ldr	r4, [sp, #32]
 8009b38:	9e00      	ldr	r6, [sp, #0]
 8009b3a:	9a00      	ldr	r2, [sp, #0]
 8009b3c:	441a      	add	r2, r3
 8009b3e:	9200      	str	r2, [sp, #0]
 8009b40:	9a06      	ldr	r2, [sp, #24]
 8009b42:	2101      	movs	r1, #1
 8009b44:	441a      	add	r2, r3
 8009b46:	4648      	mov	r0, r9
 8009b48:	9206      	str	r2, [sp, #24]
 8009b4a:	f000 fc2d 	bl	800a3a8 <__i2b>
 8009b4e:	4605      	mov	r5, r0
 8009b50:	b166      	cbz	r6, 8009b6c <_dtoa_r+0x74c>
 8009b52:	9b06      	ldr	r3, [sp, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	dd09      	ble.n	8009b6c <_dtoa_r+0x74c>
 8009b58:	42b3      	cmp	r3, r6
 8009b5a:	9a00      	ldr	r2, [sp, #0]
 8009b5c:	bfa8      	it	ge
 8009b5e:	4633      	movge	r3, r6
 8009b60:	1ad2      	subs	r2, r2, r3
 8009b62:	9200      	str	r2, [sp, #0]
 8009b64:	9a06      	ldr	r2, [sp, #24]
 8009b66:	1af6      	subs	r6, r6, r3
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	9306      	str	r3, [sp, #24]
 8009b6c:	9b08      	ldr	r3, [sp, #32]
 8009b6e:	b30b      	cbz	r3, 8009bb4 <_dtoa_r+0x794>
 8009b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 80c6 	beq.w	8009d04 <_dtoa_r+0x8e4>
 8009b78:	2c00      	cmp	r4, #0
 8009b7a:	f000 80c0 	beq.w	8009cfe <_dtoa_r+0x8de>
 8009b7e:	4629      	mov	r1, r5
 8009b80:	4622      	mov	r2, r4
 8009b82:	4648      	mov	r0, r9
 8009b84:	f000 fcc8 	bl	800a518 <__pow5mult>
 8009b88:	9a02      	ldr	r2, [sp, #8]
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	4648      	mov	r0, r9
 8009b90:	f000 fc20 	bl	800a3d4 <__multiply>
 8009b94:	9902      	ldr	r1, [sp, #8]
 8009b96:	4680      	mov	r8, r0
 8009b98:	4648      	mov	r0, r9
 8009b9a:	f000 fb51 	bl	800a240 <_Bfree>
 8009b9e:	9b08      	ldr	r3, [sp, #32]
 8009ba0:	1b1b      	subs	r3, r3, r4
 8009ba2:	9308      	str	r3, [sp, #32]
 8009ba4:	f000 80b1 	beq.w	8009d0a <_dtoa_r+0x8ea>
 8009ba8:	9a08      	ldr	r2, [sp, #32]
 8009baa:	4641      	mov	r1, r8
 8009bac:	4648      	mov	r0, r9
 8009bae:	f000 fcb3 	bl	800a518 <__pow5mult>
 8009bb2:	9002      	str	r0, [sp, #8]
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	4648      	mov	r0, r9
 8009bb8:	f000 fbf6 	bl	800a3a8 <__i2b>
 8009bbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 81d8 	beq.w	8009f76 <_dtoa_r+0xb56>
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	4601      	mov	r1, r0
 8009bca:	4648      	mov	r0, r9
 8009bcc:	f000 fca4 	bl	800a518 <__pow5mult>
 8009bd0:	9b07      	ldr	r3, [sp, #28]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	f300 809f 	bgt.w	8009d18 <_dtoa_r+0x8f8>
 8009bda:	9b04      	ldr	r3, [sp, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f040 8097 	bne.w	8009d10 <_dtoa_r+0x8f0>
 8009be2:	9b05      	ldr	r3, [sp, #20]
 8009be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f040 8093 	bne.w	8009d14 <_dtoa_r+0x8f4>
 8009bee:	9b05      	ldr	r3, [sp, #20]
 8009bf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bf4:	0d1b      	lsrs	r3, r3, #20
 8009bf6:	051b      	lsls	r3, r3, #20
 8009bf8:	b133      	cbz	r3, 8009c08 <_dtoa_r+0x7e8>
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	9b06      	ldr	r3, [sp, #24]
 8009c02:	3301      	adds	r3, #1
 8009c04:	9306      	str	r3, [sp, #24]
 8009c06:	2301      	movs	r3, #1
 8009c08:	9308      	str	r3, [sp, #32]
 8009c0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 81b8 	beq.w	8009f82 <_dtoa_r+0xb62>
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c18:	6918      	ldr	r0, [r3, #16]
 8009c1a:	f000 fb79 	bl	800a310 <__hi0bits>
 8009c1e:	f1c0 0020 	rsb	r0, r0, #32
 8009c22:	9b06      	ldr	r3, [sp, #24]
 8009c24:	4418      	add	r0, r3
 8009c26:	f010 001f 	ands.w	r0, r0, #31
 8009c2a:	f000 8082 	beq.w	8009d32 <_dtoa_r+0x912>
 8009c2e:	f1c0 0320 	rsb	r3, r0, #32
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	dd73      	ble.n	8009d1e <_dtoa_r+0x8fe>
 8009c36:	9b00      	ldr	r3, [sp, #0]
 8009c38:	f1c0 001c 	rsb	r0, r0, #28
 8009c3c:	4403      	add	r3, r0
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	9b06      	ldr	r3, [sp, #24]
 8009c42:	4403      	add	r3, r0
 8009c44:	4406      	add	r6, r0
 8009c46:	9306      	str	r3, [sp, #24]
 8009c48:	9b00      	ldr	r3, [sp, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	dd05      	ble.n	8009c5a <_dtoa_r+0x83a>
 8009c4e:	9902      	ldr	r1, [sp, #8]
 8009c50:	461a      	mov	r2, r3
 8009c52:	4648      	mov	r0, r9
 8009c54:	f000 fcba 	bl	800a5cc <__lshift>
 8009c58:	9002      	str	r0, [sp, #8]
 8009c5a:	9b06      	ldr	r3, [sp, #24]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	dd05      	ble.n	8009c6c <_dtoa_r+0x84c>
 8009c60:	4621      	mov	r1, r4
 8009c62:	461a      	mov	r2, r3
 8009c64:	4648      	mov	r0, r9
 8009c66:	f000 fcb1 	bl	800a5cc <__lshift>
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d061      	beq.n	8009d36 <_dtoa_r+0x916>
 8009c72:	9802      	ldr	r0, [sp, #8]
 8009c74:	4621      	mov	r1, r4
 8009c76:	f000 fd15 	bl	800a6a4 <__mcmp>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	da5b      	bge.n	8009d36 <_dtoa_r+0x916>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	9902      	ldr	r1, [sp, #8]
 8009c82:	220a      	movs	r2, #10
 8009c84:	4648      	mov	r0, r9
 8009c86:	f000 fafd 	bl	800a284 <__multadd>
 8009c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c8c:	9002      	str	r0, [sp, #8]
 8009c8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 8177 	beq.w	8009f86 <_dtoa_r+0xb66>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	220a      	movs	r2, #10
 8009c9e:	4648      	mov	r0, r9
 8009ca0:	f000 faf0 	bl	800a284 <__multadd>
 8009ca4:	f1bb 0f00 	cmp.w	fp, #0
 8009ca8:	4605      	mov	r5, r0
 8009caa:	dc6f      	bgt.n	8009d8c <_dtoa_r+0x96c>
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	dc49      	bgt.n	8009d46 <_dtoa_r+0x926>
 8009cb2:	e06b      	b.n	8009d8c <_dtoa_r+0x96c>
 8009cb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cba:	e73c      	b.n	8009b36 <_dtoa_r+0x716>
 8009cbc:	3fe00000 	.word	0x3fe00000
 8009cc0:	40240000 	.word	0x40240000
 8009cc4:	9b03      	ldr	r3, [sp, #12]
 8009cc6:	1e5c      	subs	r4, r3, #1
 8009cc8:	9b08      	ldr	r3, [sp, #32]
 8009cca:	42a3      	cmp	r3, r4
 8009ccc:	db09      	blt.n	8009ce2 <_dtoa_r+0x8c2>
 8009cce:	1b1c      	subs	r4, r3, r4
 8009cd0:	9b03      	ldr	r3, [sp, #12]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f6bf af30 	bge.w	8009b38 <_dtoa_r+0x718>
 8009cd8:	9b00      	ldr	r3, [sp, #0]
 8009cda:	9a03      	ldr	r2, [sp, #12]
 8009cdc:	1a9e      	subs	r6, r3, r2
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e72b      	b.n	8009b3a <_dtoa_r+0x71a>
 8009ce2:	9b08      	ldr	r3, [sp, #32]
 8009ce4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ce6:	9408      	str	r4, [sp, #32]
 8009ce8:	1ae3      	subs	r3, r4, r3
 8009cea:	441a      	add	r2, r3
 8009cec:	9e00      	ldr	r6, [sp, #0]
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	920d      	str	r2, [sp, #52]	@ 0x34
 8009cf2:	2400      	movs	r4, #0
 8009cf4:	e721      	b.n	8009b3a <_dtoa_r+0x71a>
 8009cf6:	9c08      	ldr	r4, [sp, #32]
 8009cf8:	9e00      	ldr	r6, [sp, #0]
 8009cfa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009cfc:	e728      	b.n	8009b50 <_dtoa_r+0x730>
 8009cfe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d02:	e751      	b.n	8009ba8 <_dtoa_r+0x788>
 8009d04:	9a08      	ldr	r2, [sp, #32]
 8009d06:	9902      	ldr	r1, [sp, #8]
 8009d08:	e750      	b.n	8009bac <_dtoa_r+0x78c>
 8009d0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009d0e:	e751      	b.n	8009bb4 <_dtoa_r+0x794>
 8009d10:	2300      	movs	r3, #0
 8009d12:	e779      	b.n	8009c08 <_dtoa_r+0x7e8>
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	e777      	b.n	8009c08 <_dtoa_r+0x7e8>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9308      	str	r3, [sp, #32]
 8009d1c:	e779      	b.n	8009c12 <_dtoa_r+0x7f2>
 8009d1e:	d093      	beq.n	8009c48 <_dtoa_r+0x828>
 8009d20:	9a00      	ldr	r2, [sp, #0]
 8009d22:	331c      	adds	r3, #28
 8009d24:	441a      	add	r2, r3
 8009d26:	9200      	str	r2, [sp, #0]
 8009d28:	9a06      	ldr	r2, [sp, #24]
 8009d2a:	441a      	add	r2, r3
 8009d2c:	441e      	add	r6, r3
 8009d2e:	9206      	str	r2, [sp, #24]
 8009d30:	e78a      	b.n	8009c48 <_dtoa_r+0x828>
 8009d32:	4603      	mov	r3, r0
 8009d34:	e7f4      	b.n	8009d20 <_dtoa_r+0x900>
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	46b8      	mov	r8, r7
 8009d3c:	dc20      	bgt.n	8009d80 <_dtoa_r+0x960>
 8009d3e:	469b      	mov	fp, r3
 8009d40:	9b07      	ldr	r3, [sp, #28]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	dd1e      	ble.n	8009d84 <_dtoa_r+0x964>
 8009d46:	f1bb 0f00 	cmp.w	fp, #0
 8009d4a:	f47f adb1 	bne.w	80098b0 <_dtoa_r+0x490>
 8009d4e:	4621      	mov	r1, r4
 8009d50:	465b      	mov	r3, fp
 8009d52:	2205      	movs	r2, #5
 8009d54:	4648      	mov	r0, r9
 8009d56:	f000 fa95 	bl	800a284 <__multadd>
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	9802      	ldr	r0, [sp, #8]
 8009d60:	f000 fca0 	bl	800a6a4 <__mcmp>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	f77f ada3 	ble.w	80098b0 <_dtoa_r+0x490>
 8009d6a:	4656      	mov	r6, sl
 8009d6c:	2331      	movs	r3, #49	@ 0x31
 8009d6e:	f806 3b01 	strb.w	r3, [r6], #1
 8009d72:	f108 0801 	add.w	r8, r8, #1
 8009d76:	e59f      	b.n	80098b8 <_dtoa_r+0x498>
 8009d78:	9c03      	ldr	r4, [sp, #12]
 8009d7a:	46b8      	mov	r8, r7
 8009d7c:	4625      	mov	r5, r4
 8009d7e:	e7f4      	b.n	8009d6a <_dtoa_r+0x94a>
 8009d80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 8101 	beq.w	8009f8e <_dtoa_r+0xb6e>
 8009d8c:	2e00      	cmp	r6, #0
 8009d8e:	dd05      	ble.n	8009d9c <_dtoa_r+0x97c>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4632      	mov	r2, r6
 8009d94:	4648      	mov	r0, r9
 8009d96:	f000 fc19 	bl	800a5cc <__lshift>
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	9b08      	ldr	r3, [sp, #32]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d05c      	beq.n	8009e5c <_dtoa_r+0xa3c>
 8009da2:	6869      	ldr	r1, [r5, #4]
 8009da4:	4648      	mov	r0, r9
 8009da6:	f000 fa0b 	bl	800a1c0 <_Balloc>
 8009daa:	4606      	mov	r6, r0
 8009dac:	b928      	cbnz	r0, 8009dba <_dtoa_r+0x99a>
 8009dae:	4b82      	ldr	r3, [pc, #520]	@ (8009fb8 <_dtoa_r+0xb98>)
 8009db0:	4602      	mov	r2, r0
 8009db2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009db6:	f7ff bb4a 	b.w	800944e <_dtoa_r+0x2e>
 8009dba:	692a      	ldr	r2, [r5, #16]
 8009dbc:	3202      	adds	r2, #2
 8009dbe:	0092      	lsls	r2, r2, #2
 8009dc0:	f105 010c 	add.w	r1, r5, #12
 8009dc4:	300c      	adds	r0, #12
 8009dc6:	f000 ffa3 	bl	800ad10 <memcpy>
 8009dca:	2201      	movs	r2, #1
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4648      	mov	r0, r9
 8009dd0:	f000 fbfc 	bl	800a5cc <__lshift>
 8009dd4:	f10a 0301 	add.w	r3, sl, #1
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	eb0a 030b 	add.w	r3, sl, fp
 8009dde:	9308      	str	r3, [sp, #32]
 8009de0:	9b04      	ldr	r3, [sp, #16]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	462f      	mov	r7, r5
 8009de8:	9306      	str	r3, [sp, #24]
 8009dea:	4605      	mov	r5, r0
 8009dec:	9b00      	ldr	r3, [sp, #0]
 8009dee:	9802      	ldr	r0, [sp, #8]
 8009df0:	4621      	mov	r1, r4
 8009df2:	f103 3bff 	add.w	fp, r3, #4294967295
 8009df6:	f7ff fa8a 	bl	800930e <quorem>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	3330      	adds	r3, #48	@ 0x30
 8009dfe:	9003      	str	r0, [sp, #12]
 8009e00:	4639      	mov	r1, r7
 8009e02:	9802      	ldr	r0, [sp, #8]
 8009e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e06:	f000 fc4d 	bl	800a6a4 <__mcmp>
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	9004      	str	r0, [sp, #16]
 8009e0e:	4621      	mov	r1, r4
 8009e10:	4648      	mov	r0, r9
 8009e12:	f000 fc63 	bl	800a6dc <__mdiff>
 8009e16:	68c2      	ldr	r2, [r0, #12]
 8009e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	bb02      	cbnz	r2, 8009e60 <_dtoa_r+0xa40>
 8009e1e:	4601      	mov	r1, r0
 8009e20:	9802      	ldr	r0, [sp, #8]
 8009e22:	f000 fc3f 	bl	800a6a4 <__mcmp>
 8009e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e28:	4602      	mov	r2, r0
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4648      	mov	r0, r9
 8009e2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e32:	f000 fa05 	bl	800a240 <_Bfree>
 8009e36:	9b07      	ldr	r3, [sp, #28]
 8009e38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e3a:	9e00      	ldr	r6, [sp, #0]
 8009e3c:	ea42 0103 	orr.w	r1, r2, r3
 8009e40:	9b06      	ldr	r3, [sp, #24]
 8009e42:	4319      	orrs	r1, r3
 8009e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e46:	d10d      	bne.n	8009e64 <_dtoa_r+0xa44>
 8009e48:	2b39      	cmp	r3, #57	@ 0x39
 8009e4a:	d027      	beq.n	8009e9c <_dtoa_r+0xa7c>
 8009e4c:	9a04      	ldr	r2, [sp, #16]
 8009e4e:	2a00      	cmp	r2, #0
 8009e50:	dd01      	ble.n	8009e56 <_dtoa_r+0xa36>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	3331      	adds	r3, #49	@ 0x31
 8009e56:	f88b 3000 	strb.w	r3, [fp]
 8009e5a:	e52e      	b.n	80098ba <_dtoa_r+0x49a>
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	e7b9      	b.n	8009dd4 <_dtoa_r+0x9b4>
 8009e60:	2201      	movs	r2, #1
 8009e62:	e7e2      	b.n	8009e2a <_dtoa_r+0xa0a>
 8009e64:	9904      	ldr	r1, [sp, #16]
 8009e66:	2900      	cmp	r1, #0
 8009e68:	db04      	blt.n	8009e74 <_dtoa_r+0xa54>
 8009e6a:	9807      	ldr	r0, [sp, #28]
 8009e6c:	4301      	orrs	r1, r0
 8009e6e:	9806      	ldr	r0, [sp, #24]
 8009e70:	4301      	orrs	r1, r0
 8009e72:	d120      	bne.n	8009eb6 <_dtoa_r+0xa96>
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	ddee      	ble.n	8009e56 <_dtoa_r+0xa36>
 8009e78:	9902      	ldr	r1, [sp, #8]
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	4648      	mov	r0, r9
 8009e80:	f000 fba4 	bl	800a5cc <__lshift>
 8009e84:	4621      	mov	r1, r4
 8009e86:	9002      	str	r0, [sp, #8]
 8009e88:	f000 fc0c 	bl	800a6a4 <__mcmp>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	9b00      	ldr	r3, [sp, #0]
 8009e90:	dc02      	bgt.n	8009e98 <_dtoa_r+0xa78>
 8009e92:	d1e0      	bne.n	8009e56 <_dtoa_r+0xa36>
 8009e94:	07da      	lsls	r2, r3, #31
 8009e96:	d5de      	bpl.n	8009e56 <_dtoa_r+0xa36>
 8009e98:	2b39      	cmp	r3, #57	@ 0x39
 8009e9a:	d1da      	bne.n	8009e52 <_dtoa_r+0xa32>
 8009e9c:	2339      	movs	r3, #57	@ 0x39
 8009e9e:	f88b 3000 	strb.w	r3, [fp]
 8009ea2:	4633      	mov	r3, r6
 8009ea4:	461e      	mov	r6, r3
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009eac:	2a39      	cmp	r2, #57	@ 0x39
 8009eae:	d04e      	beq.n	8009f4e <_dtoa_r+0xb2e>
 8009eb0:	3201      	adds	r2, #1
 8009eb2:	701a      	strb	r2, [r3, #0]
 8009eb4:	e501      	b.n	80098ba <_dtoa_r+0x49a>
 8009eb6:	2a00      	cmp	r2, #0
 8009eb8:	dd03      	ble.n	8009ec2 <_dtoa_r+0xaa2>
 8009eba:	2b39      	cmp	r3, #57	@ 0x39
 8009ebc:	d0ee      	beq.n	8009e9c <_dtoa_r+0xa7c>
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	e7c9      	b.n	8009e56 <_dtoa_r+0xa36>
 8009ec2:	9a00      	ldr	r2, [sp, #0]
 8009ec4:	9908      	ldr	r1, [sp, #32]
 8009ec6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009eca:	428a      	cmp	r2, r1
 8009ecc:	d028      	beq.n	8009f20 <_dtoa_r+0xb00>
 8009ece:	9902      	ldr	r1, [sp, #8]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	220a      	movs	r2, #10
 8009ed4:	4648      	mov	r0, r9
 8009ed6:	f000 f9d5 	bl	800a284 <__multadd>
 8009eda:	42af      	cmp	r7, r5
 8009edc:	9002      	str	r0, [sp, #8]
 8009ede:	f04f 0300 	mov.w	r3, #0
 8009ee2:	f04f 020a 	mov.w	r2, #10
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	4648      	mov	r0, r9
 8009eea:	d107      	bne.n	8009efc <_dtoa_r+0xadc>
 8009eec:	f000 f9ca 	bl	800a284 <__multadd>
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	9b00      	ldr	r3, [sp, #0]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	e777      	b.n	8009dec <_dtoa_r+0x9cc>
 8009efc:	f000 f9c2 	bl	800a284 <__multadd>
 8009f00:	4629      	mov	r1, r5
 8009f02:	4607      	mov	r7, r0
 8009f04:	2300      	movs	r3, #0
 8009f06:	220a      	movs	r2, #10
 8009f08:	4648      	mov	r0, r9
 8009f0a:	f000 f9bb 	bl	800a284 <__multadd>
 8009f0e:	4605      	mov	r5, r0
 8009f10:	e7f0      	b.n	8009ef4 <_dtoa_r+0xad4>
 8009f12:	f1bb 0f00 	cmp.w	fp, #0
 8009f16:	bfcc      	ite	gt
 8009f18:	465e      	movgt	r6, fp
 8009f1a:	2601      	movle	r6, #1
 8009f1c:	4456      	add	r6, sl
 8009f1e:	2700      	movs	r7, #0
 8009f20:	9902      	ldr	r1, [sp, #8]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	2201      	movs	r2, #1
 8009f26:	4648      	mov	r0, r9
 8009f28:	f000 fb50 	bl	800a5cc <__lshift>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	9002      	str	r0, [sp, #8]
 8009f30:	f000 fbb8 	bl	800a6a4 <__mcmp>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	dcb4      	bgt.n	8009ea2 <_dtoa_r+0xa82>
 8009f38:	d102      	bne.n	8009f40 <_dtoa_r+0xb20>
 8009f3a:	9b00      	ldr	r3, [sp, #0]
 8009f3c:	07db      	lsls	r3, r3, #31
 8009f3e:	d4b0      	bmi.n	8009ea2 <_dtoa_r+0xa82>
 8009f40:	4633      	mov	r3, r6
 8009f42:	461e      	mov	r6, r3
 8009f44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f48:	2a30      	cmp	r2, #48	@ 0x30
 8009f4a:	d0fa      	beq.n	8009f42 <_dtoa_r+0xb22>
 8009f4c:	e4b5      	b.n	80098ba <_dtoa_r+0x49a>
 8009f4e:	459a      	cmp	sl, r3
 8009f50:	d1a8      	bne.n	8009ea4 <_dtoa_r+0xa84>
 8009f52:	2331      	movs	r3, #49	@ 0x31
 8009f54:	f108 0801 	add.w	r8, r8, #1
 8009f58:	f88a 3000 	strb.w	r3, [sl]
 8009f5c:	e4ad      	b.n	80098ba <_dtoa_r+0x49a>
 8009f5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009fbc <_dtoa_r+0xb9c>
 8009f64:	b11b      	cbz	r3, 8009f6e <_dtoa_r+0xb4e>
 8009f66:	f10a 0308 	add.w	r3, sl, #8
 8009f6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009f6c:	6013      	str	r3, [r2, #0]
 8009f6e:	4650      	mov	r0, sl
 8009f70:	b017      	add	sp, #92	@ 0x5c
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	9b07      	ldr	r3, [sp, #28]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	f77f ae2e 	ble.w	8009bda <_dtoa_r+0x7ba>
 8009f7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f80:	9308      	str	r3, [sp, #32]
 8009f82:	2001      	movs	r0, #1
 8009f84:	e64d      	b.n	8009c22 <_dtoa_r+0x802>
 8009f86:	f1bb 0f00 	cmp.w	fp, #0
 8009f8a:	f77f aed9 	ble.w	8009d40 <_dtoa_r+0x920>
 8009f8e:	4656      	mov	r6, sl
 8009f90:	9802      	ldr	r0, [sp, #8]
 8009f92:	4621      	mov	r1, r4
 8009f94:	f7ff f9bb 	bl	800930e <quorem>
 8009f98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009f9c:	f806 3b01 	strb.w	r3, [r6], #1
 8009fa0:	eba6 020a 	sub.w	r2, r6, sl
 8009fa4:	4593      	cmp	fp, r2
 8009fa6:	ddb4      	ble.n	8009f12 <_dtoa_r+0xaf2>
 8009fa8:	9902      	ldr	r1, [sp, #8]
 8009faa:	2300      	movs	r3, #0
 8009fac:	220a      	movs	r2, #10
 8009fae:	4648      	mov	r0, r9
 8009fb0:	f000 f968 	bl	800a284 <__multadd>
 8009fb4:	9002      	str	r0, [sp, #8]
 8009fb6:	e7eb      	b.n	8009f90 <_dtoa_r+0xb70>
 8009fb8:	0800b961 	.word	0x0800b961
 8009fbc:	0800b8e5 	.word	0x0800b8e5

08009fc0 <_free_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	2900      	cmp	r1, #0
 8009fc6:	d041      	beq.n	800a04c <_free_r+0x8c>
 8009fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fcc:	1f0c      	subs	r4, r1, #4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	bfb8      	it	lt
 8009fd2:	18e4      	addlt	r4, r4, r3
 8009fd4:	f000 f8e8 	bl	800a1a8 <__malloc_lock>
 8009fd8:	4a1d      	ldr	r2, [pc, #116]	@ (800a050 <_free_r+0x90>)
 8009fda:	6813      	ldr	r3, [r2, #0]
 8009fdc:	b933      	cbnz	r3, 8009fec <_free_r+0x2c>
 8009fde:	6063      	str	r3, [r4, #4]
 8009fe0:	6014      	str	r4, [r2, #0]
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fe8:	f000 b8e4 	b.w	800a1b4 <__malloc_unlock>
 8009fec:	42a3      	cmp	r3, r4
 8009fee:	d908      	bls.n	800a002 <_free_r+0x42>
 8009ff0:	6820      	ldr	r0, [r4, #0]
 8009ff2:	1821      	adds	r1, r4, r0
 8009ff4:	428b      	cmp	r3, r1
 8009ff6:	bf01      	itttt	eq
 8009ff8:	6819      	ldreq	r1, [r3, #0]
 8009ffa:	685b      	ldreq	r3, [r3, #4]
 8009ffc:	1809      	addeq	r1, r1, r0
 8009ffe:	6021      	streq	r1, [r4, #0]
 800a000:	e7ed      	b.n	8009fde <_free_r+0x1e>
 800a002:	461a      	mov	r2, r3
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	b10b      	cbz	r3, 800a00c <_free_r+0x4c>
 800a008:	42a3      	cmp	r3, r4
 800a00a:	d9fa      	bls.n	800a002 <_free_r+0x42>
 800a00c:	6811      	ldr	r1, [r2, #0]
 800a00e:	1850      	adds	r0, r2, r1
 800a010:	42a0      	cmp	r0, r4
 800a012:	d10b      	bne.n	800a02c <_free_r+0x6c>
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	4401      	add	r1, r0
 800a018:	1850      	adds	r0, r2, r1
 800a01a:	4283      	cmp	r3, r0
 800a01c:	6011      	str	r1, [r2, #0]
 800a01e:	d1e0      	bne.n	8009fe2 <_free_r+0x22>
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	6053      	str	r3, [r2, #4]
 800a026:	4408      	add	r0, r1
 800a028:	6010      	str	r0, [r2, #0]
 800a02a:	e7da      	b.n	8009fe2 <_free_r+0x22>
 800a02c:	d902      	bls.n	800a034 <_free_r+0x74>
 800a02e:	230c      	movs	r3, #12
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	e7d6      	b.n	8009fe2 <_free_r+0x22>
 800a034:	6820      	ldr	r0, [r4, #0]
 800a036:	1821      	adds	r1, r4, r0
 800a038:	428b      	cmp	r3, r1
 800a03a:	bf04      	itt	eq
 800a03c:	6819      	ldreq	r1, [r3, #0]
 800a03e:	685b      	ldreq	r3, [r3, #4]
 800a040:	6063      	str	r3, [r4, #4]
 800a042:	bf04      	itt	eq
 800a044:	1809      	addeq	r1, r1, r0
 800a046:	6021      	streq	r1, [r4, #0]
 800a048:	6054      	str	r4, [r2, #4]
 800a04a:	e7ca      	b.n	8009fe2 <_free_r+0x22>
 800a04c:	bd38      	pop	{r3, r4, r5, pc}
 800a04e:	bf00      	nop
 800a050:	200007f8 	.word	0x200007f8

0800a054 <malloc>:
 800a054:	4b02      	ldr	r3, [pc, #8]	@ (800a060 <malloc+0xc>)
 800a056:	4601      	mov	r1, r0
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f000 b825 	b.w	800a0a8 <_malloc_r>
 800a05e:	bf00      	nop
 800a060:	20000070 	.word	0x20000070

0800a064 <sbrk_aligned>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	4e0f      	ldr	r6, [pc, #60]	@ (800a0a4 <sbrk_aligned+0x40>)
 800a068:	460c      	mov	r4, r1
 800a06a:	6831      	ldr	r1, [r6, #0]
 800a06c:	4605      	mov	r5, r0
 800a06e:	b911      	cbnz	r1, 800a076 <sbrk_aligned+0x12>
 800a070:	f000 fe3e 	bl	800acf0 <_sbrk_r>
 800a074:	6030      	str	r0, [r6, #0]
 800a076:	4621      	mov	r1, r4
 800a078:	4628      	mov	r0, r5
 800a07a:	f000 fe39 	bl	800acf0 <_sbrk_r>
 800a07e:	1c43      	adds	r3, r0, #1
 800a080:	d103      	bne.n	800a08a <sbrk_aligned+0x26>
 800a082:	f04f 34ff 	mov.w	r4, #4294967295
 800a086:	4620      	mov	r0, r4
 800a088:	bd70      	pop	{r4, r5, r6, pc}
 800a08a:	1cc4      	adds	r4, r0, #3
 800a08c:	f024 0403 	bic.w	r4, r4, #3
 800a090:	42a0      	cmp	r0, r4
 800a092:	d0f8      	beq.n	800a086 <sbrk_aligned+0x22>
 800a094:	1a21      	subs	r1, r4, r0
 800a096:	4628      	mov	r0, r5
 800a098:	f000 fe2a 	bl	800acf0 <_sbrk_r>
 800a09c:	3001      	adds	r0, #1
 800a09e:	d1f2      	bne.n	800a086 <sbrk_aligned+0x22>
 800a0a0:	e7ef      	b.n	800a082 <sbrk_aligned+0x1e>
 800a0a2:	bf00      	nop
 800a0a4:	200007f4 	.word	0x200007f4

0800a0a8 <_malloc_r>:
 800a0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ac:	1ccd      	adds	r5, r1, #3
 800a0ae:	f025 0503 	bic.w	r5, r5, #3
 800a0b2:	3508      	adds	r5, #8
 800a0b4:	2d0c      	cmp	r5, #12
 800a0b6:	bf38      	it	cc
 800a0b8:	250c      	movcc	r5, #12
 800a0ba:	2d00      	cmp	r5, #0
 800a0bc:	4606      	mov	r6, r0
 800a0be:	db01      	blt.n	800a0c4 <_malloc_r+0x1c>
 800a0c0:	42a9      	cmp	r1, r5
 800a0c2:	d904      	bls.n	800a0ce <_malloc_r+0x26>
 800a0c4:	230c      	movs	r3, #12
 800a0c6:	6033      	str	r3, [r6, #0]
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1a4 <_malloc_r+0xfc>
 800a0d2:	f000 f869 	bl	800a1a8 <__malloc_lock>
 800a0d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a0da:	461c      	mov	r4, r3
 800a0dc:	bb44      	cbnz	r4, 800a130 <_malloc_r+0x88>
 800a0de:	4629      	mov	r1, r5
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7ff ffbf 	bl	800a064 <sbrk_aligned>
 800a0e6:	1c43      	adds	r3, r0, #1
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	d158      	bne.n	800a19e <_malloc_r+0xf6>
 800a0ec:	f8d8 4000 	ldr.w	r4, [r8]
 800a0f0:	4627      	mov	r7, r4
 800a0f2:	2f00      	cmp	r7, #0
 800a0f4:	d143      	bne.n	800a17e <_malloc_r+0xd6>
 800a0f6:	2c00      	cmp	r4, #0
 800a0f8:	d04b      	beq.n	800a192 <_malloc_r+0xea>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	4630      	mov	r0, r6
 800a100:	eb04 0903 	add.w	r9, r4, r3
 800a104:	f000 fdf4 	bl	800acf0 <_sbrk_r>
 800a108:	4581      	cmp	r9, r0
 800a10a:	d142      	bne.n	800a192 <_malloc_r+0xea>
 800a10c:	6821      	ldr	r1, [r4, #0]
 800a10e:	1a6d      	subs	r5, r5, r1
 800a110:	4629      	mov	r1, r5
 800a112:	4630      	mov	r0, r6
 800a114:	f7ff ffa6 	bl	800a064 <sbrk_aligned>
 800a118:	3001      	adds	r0, #1
 800a11a:	d03a      	beq.n	800a192 <_malloc_r+0xea>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	442b      	add	r3, r5
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	f8d8 3000 	ldr.w	r3, [r8]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	bb62      	cbnz	r2, 800a184 <_malloc_r+0xdc>
 800a12a:	f8c8 7000 	str.w	r7, [r8]
 800a12e:	e00f      	b.n	800a150 <_malloc_r+0xa8>
 800a130:	6822      	ldr	r2, [r4, #0]
 800a132:	1b52      	subs	r2, r2, r5
 800a134:	d420      	bmi.n	800a178 <_malloc_r+0xd0>
 800a136:	2a0b      	cmp	r2, #11
 800a138:	d917      	bls.n	800a16a <_malloc_r+0xc2>
 800a13a:	1961      	adds	r1, r4, r5
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	6025      	str	r5, [r4, #0]
 800a140:	bf18      	it	ne
 800a142:	6059      	strne	r1, [r3, #4]
 800a144:	6863      	ldr	r3, [r4, #4]
 800a146:	bf08      	it	eq
 800a148:	f8c8 1000 	streq.w	r1, [r8]
 800a14c:	5162      	str	r2, [r4, r5]
 800a14e:	604b      	str	r3, [r1, #4]
 800a150:	4630      	mov	r0, r6
 800a152:	f000 f82f 	bl	800a1b4 <__malloc_unlock>
 800a156:	f104 000b 	add.w	r0, r4, #11
 800a15a:	1d23      	adds	r3, r4, #4
 800a15c:	f020 0007 	bic.w	r0, r0, #7
 800a160:	1ac2      	subs	r2, r0, r3
 800a162:	bf1c      	itt	ne
 800a164:	1a1b      	subne	r3, r3, r0
 800a166:	50a3      	strne	r3, [r4, r2]
 800a168:	e7af      	b.n	800a0ca <_malloc_r+0x22>
 800a16a:	6862      	ldr	r2, [r4, #4]
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	bf0c      	ite	eq
 800a170:	f8c8 2000 	streq.w	r2, [r8]
 800a174:	605a      	strne	r2, [r3, #4]
 800a176:	e7eb      	b.n	800a150 <_malloc_r+0xa8>
 800a178:	4623      	mov	r3, r4
 800a17a:	6864      	ldr	r4, [r4, #4]
 800a17c:	e7ae      	b.n	800a0dc <_malloc_r+0x34>
 800a17e:	463c      	mov	r4, r7
 800a180:	687f      	ldr	r7, [r7, #4]
 800a182:	e7b6      	b.n	800a0f2 <_malloc_r+0x4a>
 800a184:	461a      	mov	r2, r3
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	42a3      	cmp	r3, r4
 800a18a:	d1fb      	bne.n	800a184 <_malloc_r+0xdc>
 800a18c:	2300      	movs	r3, #0
 800a18e:	6053      	str	r3, [r2, #4]
 800a190:	e7de      	b.n	800a150 <_malloc_r+0xa8>
 800a192:	230c      	movs	r3, #12
 800a194:	6033      	str	r3, [r6, #0]
 800a196:	4630      	mov	r0, r6
 800a198:	f000 f80c 	bl	800a1b4 <__malloc_unlock>
 800a19c:	e794      	b.n	800a0c8 <_malloc_r+0x20>
 800a19e:	6005      	str	r5, [r0, #0]
 800a1a0:	e7d6      	b.n	800a150 <_malloc_r+0xa8>
 800a1a2:	bf00      	nop
 800a1a4:	200007f8 	.word	0x200007f8

0800a1a8 <__malloc_lock>:
 800a1a8:	4801      	ldr	r0, [pc, #4]	@ (800a1b0 <__malloc_lock+0x8>)
 800a1aa:	f7ff b8ae 	b.w	800930a <__retarget_lock_acquire_recursive>
 800a1ae:	bf00      	nop
 800a1b0:	200007f0 	.word	0x200007f0

0800a1b4 <__malloc_unlock>:
 800a1b4:	4801      	ldr	r0, [pc, #4]	@ (800a1bc <__malloc_unlock+0x8>)
 800a1b6:	f7ff b8a9 	b.w	800930c <__retarget_lock_release_recursive>
 800a1ba:	bf00      	nop
 800a1bc:	200007f0 	.word	0x200007f0

0800a1c0 <_Balloc>:
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	69c6      	ldr	r6, [r0, #28]
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	b976      	cbnz	r6, 800a1e8 <_Balloc+0x28>
 800a1ca:	2010      	movs	r0, #16
 800a1cc:	f7ff ff42 	bl	800a054 <malloc>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	61e0      	str	r0, [r4, #28]
 800a1d4:	b920      	cbnz	r0, 800a1e0 <_Balloc+0x20>
 800a1d6:	4b18      	ldr	r3, [pc, #96]	@ (800a238 <_Balloc+0x78>)
 800a1d8:	4818      	ldr	r0, [pc, #96]	@ (800a23c <_Balloc+0x7c>)
 800a1da:	216b      	movs	r1, #107	@ 0x6b
 800a1dc:	f000 fda6 	bl	800ad2c <__assert_func>
 800a1e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1e4:	6006      	str	r6, [r0, #0]
 800a1e6:	60c6      	str	r6, [r0, #12]
 800a1e8:	69e6      	ldr	r6, [r4, #28]
 800a1ea:	68f3      	ldr	r3, [r6, #12]
 800a1ec:	b183      	cbz	r3, 800a210 <_Balloc+0x50>
 800a1ee:	69e3      	ldr	r3, [r4, #28]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1f6:	b9b8      	cbnz	r0, 800a228 <_Balloc+0x68>
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	fa01 f605 	lsl.w	r6, r1, r5
 800a1fe:	1d72      	adds	r2, r6, #5
 800a200:	0092      	lsls	r2, r2, #2
 800a202:	4620      	mov	r0, r4
 800a204:	f000 fdb0 	bl	800ad68 <_calloc_r>
 800a208:	b160      	cbz	r0, 800a224 <_Balloc+0x64>
 800a20a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a20e:	e00e      	b.n	800a22e <_Balloc+0x6e>
 800a210:	2221      	movs	r2, #33	@ 0x21
 800a212:	2104      	movs	r1, #4
 800a214:	4620      	mov	r0, r4
 800a216:	f000 fda7 	bl	800ad68 <_calloc_r>
 800a21a:	69e3      	ldr	r3, [r4, #28]
 800a21c:	60f0      	str	r0, [r6, #12]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e4      	bne.n	800a1ee <_Balloc+0x2e>
 800a224:	2000      	movs	r0, #0
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	6802      	ldr	r2, [r0, #0]
 800a22a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a22e:	2300      	movs	r3, #0
 800a230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a234:	e7f7      	b.n	800a226 <_Balloc+0x66>
 800a236:	bf00      	nop
 800a238:	0800b8f2 	.word	0x0800b8f2
 800a23c:	0800b972 	.word	0x0800b972

0800a240 <_Bfree>:
 800a240:	b570      	push	{r4, r5, r6, lr}
 800a242:	69c6      	ldr	r6, [r0, #28]
 800a244:	4605      	mov	r5, r0
 800a246:	460c      	mov	r4, r1
 800a248:	b976      	cbnz	r6, 800a268 <_Bfree+0x28>
 800a24a:	2010      	movs	r0, #16
 800a24c:	f7ff ff02 	bl	800a054 <malloc>
 800a250:	4602      	mov	r2, r0
 800a252:	61e8      	str	r0, [r5, #28]
 800a254:	b920      	cbnz	r0, 800a260 <_Bfree+0x20>
 800a256:	4b09      	ldr	r3, [pc, #36]	@ (800a27c <_Bfree+0x3c>)
 800a258:	4809      	ldr	r0, [pc, #36]	@ (800a280 <_Bfree+0x40>)
 800a25a:	218f      	movs	r1, #143	@ 0x8f
 800a25c:	f000 fd66 	bl	800ad2c <__assert_func>
 800a260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a264:	6006      	str	r6, [r0, #0]
 800a266:	60c6      	str	r6, [r0, #12]
 800a268:	b13c      	cbz	r4, 800a27a <_Bfree+0x3a>
 800a26a:	69eb      	ldr	r3, [r5, #28]
 800a26c:	6862      	ldr	r2, [r4, #4]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a274:	6021      	str	r1, [r4, #0]
 800a276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a27a:	bd70      	pop	{r4, r5, r6, pc}
 800a27c:	0800b8f2 	.word	0x0800b8f2
 800a280:	0800b972 	.word	0x0800b972

0800a284 <__multadd>:
 800a284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a288:	690d      	ldr	r5, [r1, #16]
 800a28a:	4607      	mov	r7, r0
 800a28c:	460c      	mov	r4, r1
 800a28e:	461e      	mov	r6, r3
 800a290:	f101 0c14 	add.w	ip, r1, #20
 800a294:	2000      	movs	r0, #0
 800a296:	f8dc 3000 	ldr.w	r3, [ip]
 800a29a:	b299      	uxth	r1, r3
 800a29c:	fb02 6101 	mla	r1, r2, r1, r6
 800a2a0:	0c1e      	lsrs	r6, r3, #16
 800a2a2:	0c0b      	lsrs	r3, r1, #16
 800a2a4:	fb02 3306 	mla	r3, r2, r6, r3
 800a2a8:	b289      	uxth	r1, r1
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2b0:	4285      	cmp	r5, r0
 800a2b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a2b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2ba:	dcec      	bgt.n	800a296 <__multadd+0x12>
 800a2bc:	b30e      	cbz	r6, 800a302 <__multadd+0x7e>
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	42ab      	cmp	r3, r5
 800a2c2:	dc19      	bgt.n	800a2f8 <__multadd+0x74>
 800a2c4:	6861      	ldr	r1, [r4, #4]
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	3101      	adds	r1, #1
 800a2ca:	f7ff ff79 	bl	800a1c0 <_Balloc>
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	b928      	cbnz	r0, 800a2de <__multadd+0x5a>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a308 <__multadd+0x84>)
 800a2d6:	480d      	ldr	r0, [pc, #52]	@ (800a30c <__multadd+0x88>)
 800a2d8:	21ba      	movs	r1, #186	@ 0xba
 800a2da:	f000 fd27 	bl	800ad2c <__assert_func>
 800a2de:	6922      	ldr	r2, [r4, #16]
 800a2e0:	3202      	adds	r2, #2
 800a2e2:	f104 010c 	add.w	r1, r4, #12
 800a2e6:	0092      	lsls	r2, r2, #2
 800a2e8:	300c      	adds	r0, #12
 800a2ea:	f000 fd11 	bl	800ad10 <memcpy>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4638      	mov	r0, r7
 800a2f2:	f7ff ffa5 	bl	800a240 <_Bfree>
 800a2f6:	4644      	mov	r4, r8
 800a2f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2fc:	3501      	adds	r5, #1
 800a2fe:	615e      	str	r6, [r3, #20]
 800a300:	6125      	str	r5, [r4, #16]
 800a302:	4620      	mov	r0, r4
 800a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a308:	0800b961 	.word	0x0800b961
 800a30c:	0800b972 	.word	0x0800b972

0800a310 <__hi0bits>:
 800a310:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a314:	4603      	mov	r3, r0
 800a316:	bf36      	itet	cc
 800a318:	0403      	lslcc	r3, r0, #16
 800a31a:	2000      	movcs	r0, #0
 800a31c:	2010      	movcc	r0, #16
 800a31e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a322:	bf3c      	itt	cc
 800a324:	021b      	lslcc	r3, r3, #8
 800a326:	3008      	addcc	r0, #8
 800a328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a32c:	bf3c      	itt	cc
 800a32e:	011b      	lslcc	r3, r3, #4
 800a330:	3004      	addcc	r0, #4
 800a332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a336:	bf3c      	itt	cc
 800a338:	009b      	lslcc	r3, r3, #2
 800a33a:	3002      	addcc	r0, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	db05      	blt.n	800a34c <__hi0bits+0x3c>
 800a340:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a344:	f100 0001 	add.w	r0, r0, #1
 800a348:	bf08      	it	eq
 800a34a:	2020      	moveq	r0, #32
 800a34c:	4770      	bx	lr

0800a34e <__lo0bits>:
 800a34e:	6803      	ldr	r3, [r0, #0]
 800a350:	4602      	mov	r2, r0
 800a352:	f013 0007 	ands.w	r0, r3, #7
 800a356:	d00b      	beq.n	800a370 <__lo0bits+0x22>
 800a358:	07d9      	lsls	r1, r3, #31
 800a35a:	d421      	bmi.n	800a3a0 <__lo0bits+0x52>
 800a35c:	0798      	lsls	r0, r3, #30
 800a35e:	bf49      	itett	mi
 800a360:	085b      	lsrmi	r3, r3, #1
 800a362:	089b      	lsrpl	r3, r3, #2
 800a364:	2001      	movmi	r0, #1
 800a366:	6013      	strmi	r3, [r2, #0]
 800a368:	bf5c      	itt	pl
 800a36a:	6013      	strpl	r3, [r2, #0]
 800a36c:	2002      	movpl	r0, #2
 800a36e:	4770      	bx	lr
 800a370:	b299      	uxth	r1, r3
 800a372:	b909      	cbnz	r1, 800a378 <__lo0bits+0x2a>
 800a374:	0c1b      	lsrs	r3, r3, #16
 800a376:	2010      	movs	r0, #16
 800a378:	b2d9      	uxtb	r1, r3
 800a37a:	b909      	cbnz	r1, 800a380 <__lo0bits+0x32>
 800a37c:	3008      	adds	r0, #8
 800a37e:	0a1b      	lsrs	r3, r3, #8
 800a380:	0719      	lsls	r1, r3, #28
 800a382:	bf04      	itt	eq
 800a384:	091b      	lsreq	r3, r3, #4
 800a386:	3004      	addeq	r0, #4
 800a388:	0799      	lsls	r1, r3, #30
 800a38a:	bf04      	itt	eq
 800a38c:	089b      	lsreq	r3, r3, #2
 800a38e:	3002      	addeq	r0, #2
 800a390:	07d9      	lsls	r1, r3, #31
 800a392:	d403      	bmi.n	800a39c <__lo0bits+0x4e>
 800a394:	085b      	lsrs	r3, r3, #1
 800a396:	f100 0001 	add.w	r0, r0, #1
 800a39a:	d003      	beq.n	800a3a4 <__lo0bits+0x56>
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	4770      	bx	lr
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	4770      	bx	lr
 800a3a4:	2020      	movs	r0, #32
 800a3a6:	4770      	bx	lr

0800a3a8 <__i2b>:
 800a3a8:	b510      	push	{r4, lr}
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	f7ff ff07 	bl	800a1c0 <_Balloc>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	b928      	cbnz	r0, 800a3c2 <__i2b+0x1a>
 800a3b6:	4b05      	ldr	r3, [pc, #20]	@ (800a3cc <__i2b+0x24>)
 800a3b8:	4805      	ldr	r0, [pc, #20]	@ (800a3d0 <__i2b+0x28>)
 800a3ba:	f240 1145 	movw	r1, #325	@ 0x145
 800a3be:	f000 fcb5 	bl	800ad2c <__assert_func>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	6144      	str	r4, [r0, #20]
 800a3c6:	6103      	str	r3, [r0, #16]
 800a3c8:	bd10      	pop	{r4, pc}
 800a3ca:	bf00      	nop
 800a3cc:	0800b961 	.word	0x0800b961
 800a3d0:	0800b972 	.word	0x0800b972

0800a3d4 <__multiply>:
 800a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d8:	4617      	mov	r7, r2
 800a3da:	690a      	ldr	r2, [r1, #16]
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	bfa8      	it	ge
 800a3e2:	463b      	movge	r3, r7
 800a3e4:	4689      	mov	r9, r1
 800a3e6:	bfa4      	itt	ge
 800a3e8:	460f      	movge	r7, r1
 800a3ea:	4699      	movge	r9, r3
 800a3ec:	693d      	ldr	r5, [r7, #16]
 800a3ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	eb05 060a 	add.w	r6, r5, sl
 800a3fa:	42b3      	cmp	r3, r6
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	bfb8      	it	lt
 800a400:	3101      	addlt	r1, #1
 800a402:	f7ff fedd 	bl	800a1c0 <_Balloc>
 800a406:	b930      	cbnz	r0, 800a416 <__multiply+0x42>
 800a408:	4602      	mov	r2, r0
 800a40a:	4b41      	ldr	r3, [pc, #260]	@ (800a510 <__multiply+0x13c>)
 800a40c:	4841      	ldr	r0, [pc, #260]	@ (800a514 <__multiply+0x140>)
 800a40e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a412:	f000 fc8b 	bl	800ad2c <__assert_func>
 800a416:	f100 0414 	add.w	r4, r0, #20
 800a41a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a41e:	4623      	mov	r3, r4
 800a420:	2200      	movs	r2, #0
 800a422:	4573      	cmp	r3, lr
 800a424:	d320      	bcc.n	800a468 <__multiply+0x94>
 800a426:	f107 0814 	add.w	r8, r7, #20
 800a42a:	f109 0114 	add.w	r1, r9, #20
 800a42e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a432:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a436:	9302      	str	r3, [sp, #8]
 800a438:	1beb      	subs	r3, r5, r7
 800a43a:	3b15      	subs	r3, #21
 800a43c:	f023 0303 	bic.w	r3, r3, #3
 800a440:	3304      	adds	r3, #4
 800a442:	3715      	adds	r7, #21
 800a444:	42bd      	cmp	r5, r7
 800a446:	bf38      	it	cc
 800a448:	2304      	movcc	r3, #4
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	9b02      	ldr	r3, [sp, #8]
 800a44e:	9103      	str	r1, [sp, #12]
 800a450:	428b      	cmp	r3, r1
 800a452:	d80c      	bhi.n	800a46e <__multiply+0x9a>
 800a454:	2e00      	cmp	r6, #0
 800a456:	dd03      	ble.n	800a460 <__multiply+0x8c>
 800a458:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d055      	beq.n	800a50c <__multiply+0x138>
 800a460:	6106      	str	r6, [r0, #16]
 800a462:	b005      	add	sp, #20
 800a464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a468:	f843 2b04 	str.w	r2, [r3], #4
 800a46c:	e7d9      	b.n	800a422 <__multiply+0x4e>
 800a46e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a472:	f1ba 0f00 	cmp.w	sl, #0
 800a476:	d01f      	beq.n	800a4b8 <__multiply+0xe4>
 800a478:	46c4      	mov	ip, r8
 800a47a:	46a1      	mov	r9, r4
 800a47c:	2700      	movs	r7, #0
 800a47e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a482:	f8d9 3000 	ldr.w	r3, [r9]
 800a486:	fa1f fb82 	uxth.w	fp, r2
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a490:	443b      	add	r3, r7
 800a492:	f8d9 7000 	ldr.w	r7, [r9]
 800a496:	0c12      	lsrs	r2, r2, #16
 800a498:	0c3f      	lsrs	r7, r7, #16
 800a49a:	fb0a 7202 	mla	r2, sl, r2, r7
 800a49e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4a8:	4565      	cmp	r5, ip
 800a4aa:	f849 3b04 	str.w	r3, [r9], #4
 800a4ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a4b2:	d8e4      	bhi.n	800a47e <__multiply+0xaa>
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	50e7      	str	r7, [r4, r3]
 800a4b8:	9b03      	ldr	r3, [sp, #12]
 800a4ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a4be:	3104      	adds	r1, #4
 800a4c0:	f1b9 0f00 	cmp.w	r9, #0
 800a4c4:	d020      	beq.n	800a508 <__multiply+0x134>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	4647      	mov	r7, r8
 800a4ca:	46a4      	mov	ip, r4
 800a4cc:	f04f 0a00 	mov.w	sl, #0
 800a4d0:	f8b7 b000 	ldrh.w	fp, [r7]
 800a4d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a4d8:	fb09 220b 	mla	r2, r9, fp, r2
 800a4dc:	4452      	add	r2, sl
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4e4:	f84c 3b04 	str.w	r3, [ip], #4
 800a4e8:	f857 3b04 	ldr.w	r3, [r7], #4
 800a4ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4f0:	f8bc 3000 	ldrh.w	r3, [ip]
 800a4f4:	fb09 330a 	mla	r3, r9, sl, r3
 800a4f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a4fc:	42bd      	cmp	r5, r7
 800a4fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a502:	d8e5      	bhi.n	800a4d0 <__multiply+0xfc>
 800a504:	9a01      	ldr	r2, [sp, #4]
 800a506:	50a3      	str	r3, [r4, r2]
 800a508:	3404      	adds	r4, #4
 800a50a:	e79f      	b.n	800a44c <__multiply+0x78>
 800a50c:	3e01      	subs	r6, #1
 800a50e:	e7a1      	b.n	800a454 <__multiply+0x80>
 800a510:	0800b961 	.word	0x0800b961
 800a514:	0800b972 	.word	0x0800b972

0800a518 <__pow5mult>:
 800a518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a51c:	4615      	mov	r5, r2
 800a51e:	f012 0203 	ands.w	r2, r2, #3
 800a522:	4607      	mov	r7, r0
 800a524:	460e      	mov	r6, r1
 800a526:	d007      	beq.n	800a538 <__pow5mult+0x20>
 800a528:	4c25      	ldr	r4, [pc, #148]	@ (800a5c0 <__pow5mult+0xa8>)
 800a52a:	3a01      	subs	r2, #1
 800a52c:	2300      	movs	r3, #0
 800a52e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a532:	f7ff fea7 	bl	800a284 <__multadd>
 800a536:	4606      	mov	r6, r0
 800a538:	10ad      	asrs	r5, r5, #2
 800a53a:	d03d      	beq.n	800a5b8 <__pow5mult+0xa0>
 800a53c:	69fc      	ldr	r4, [r7, #28]
 800a53e:	b97c      	cbnz	r4, 800a560 <__pow5mult+0x48>
 800a540:	2010      	movs	r0, #16
 800a542:	f7ff fd87 	bl	800a054 <malloc>
 800a546:	4602      	mov	r2, r0
 800a548:	61f8      	str	r0, [r7, #28]
 800a54a:	b928      	cbnz	r0, 800a558 <__pow5mult+0x40>
 800a54c:	4b1d      	ldr	r3, [pc, #116]	@ (800a5c4 <__pow5mult+0xac>)
 800a54e:	481e      	ldr	r0, [pc, #120]	@ (800a5c8 <__pow5mult+0xb0>)
 800a550:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a554:	f000 fbea 	bl	800ad2c <__assert_func>
 800a558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a55c:	6004      	str	r4, [r0, #0]
 800a55e:	60c4      	str	r4, [r0, #12]
 800a560:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a568:	b94c      	cbnz	r4, 800a57e <__pow5mult+0x66>
 800a56a:	f240 2171 	movw	r1, #625	@ 0x271
 800a56e:	4638      	mov	r0, r7
 800a570:	f7ff ff1a 	bl	800a3a8 <__i2b>
 800a574:	2300      	movs	r3, #0
 800a576:	f8c8 0008 	str.w	r0, [r8, #8]
 800a57a:	4604      	mov	r4, r0
 800a57c:	6003      	str	r3, [r0, #0]
 800a57e:	f04f 0900 	mov.w	r9, #0
 800a582:	07eb      	lsls	r3, r5, #31
 800a584:	d50a      	bpl.n	800a59c <__pow5mult+0x84>
 800a586:	4631      	mov	r1, r6
 800a588:	4622      	mov	r2, r4
 800a58a:	4638      	mov	r0, r7
 800a58c:	f7ff ff22 	bl	800a3d4 <__multiply>
 800a590:	4631      	mov	r1, r6
 800a592:	4680      	mov	r8, r0
 800a594:	4638      	mov	r0, r7
 800a596:	f7ff fe53 	bl	800a240 <_Bfree>
 800a59a:	4646      	mov	r6, r8
 800a59c:	106d      	asrs	r5, r5, #1
 800a59e:	d00b      	beq.n	800a5b8 <__pow5mult+0xa0>
 800a5a0:	6820      	ldr	r0, [r4, #0]
 800a5a2:	b938      	cbnz	r0, 800a5b4 <__pow5mult+0x9c>
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	f7ff ff13 	bl	800a3d4 <__multiply>
 800a5ae:	6020      	str	r0, [r4, #0]
 800a5b0:	f8c0 9000 	str.w	r9, [r0]
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	e7e4      	b.n	800a582 <__pow5mult+0x6a>
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5be:	bf00      	nop
 800a5c0:	0800ba24 	.word	0x0800ba24
 800a5c4:	0800b8f2 	.word	0x0800b8f2
 800a5c8:	0800b972 	.word	0x0800b972

0800a5cc <__lshift>:
 800a5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	6849      	ldr	r1, [r1, #4]
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5da:	68a3      	ldr	r3, [r4, #8]
 800a5dc:	4607      	mov	r7, r0
 800a5de:	4691      	mov	r9, r2
 800a5e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5e4:	f108 0601 	add.w	r6, r8, #1
 800a5e8:	42b3      	cmp	r3, r6
 800a5ea:	db0b      	blt.n	800a604 <__lshift+0x38>
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	f7ff fde7 	bl	800a1c0 <_Balloc>
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	b948      	cbnz	r0, 800a60a <__lshift+0x3e>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	4b28      	ldr	r3, [pc, #160]	@ (800a69c <__lshift+0xd0>)
 800a5fa:	4829      	ldr	r0, [pc, #164]	@ (800a6a0 <__lshift+0xd4>)
 800a5fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a600:	f000 fb94 	bl	800ad2c <__assert_func>
 800a604:	3101      	adds	r1, #1
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	e7ee      	b.n	800a5e8 <__lshift+0x1c>
 800a60a:	2300      	movs	r3, #0
 800a60c:	f100 0114 	add.w	r1, r0, #20
 800a610:	f100 0210 	add.w	r2, r0, #16
 800a614:	4618      	mov	r0, r3
 800a616:	4553      	cmp	r3, sl
 800a618:	db33      	blt.n	800a682 <__lshift+0xb6>
 800a61a:	6920      	ldr	r0, [r4, #16]
 800a61c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a620:	f104 0314 	add.w	r3, r4, #20
 800a624:	f019 091f 	ands.w	r9, r9, #31
 800a628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a62c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a630:	d02b      	beq.n	800a68a <__lshift+0xbe>
 800a632:	f1c9 0e20 	rsb	lr, r9, #32
 800a636:	468a      	mov	sl, r1
 800a638:	2200      	movs	r2, #0
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	fa00 f009 	lsl.w	r0, r0, r9
 800a640:	4310      	orrs	r0, r2
 800a642:	f84a 0b04 	str.w	r0, [sl], #4
 800a646:	f853 2b04 	ldr.w	r2, [r3], #4
 800a64a:	459c      	cmp	ip, r3
 800a64c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a650:	d8f3      	bhi.n	800a63a <__lshift+0x6e>
 800a652:	ebac 0304 	sub.w	r3, ip, r4
 800a656:	3b15      	subs	r3, #21
 800a658:	f023 0303 	bic.w	r3, r3, #3
 800a65c:	3304      	adds	r3, #4
 800a65e:	f104 0015 	add.w	r0, r4, #21
 800a662:	4560      	cmp	r0, ip
 800a664:	bf88      	it	hi
 800a666:	2304      	movhi	r3, #4
 800a668:	50ca      	str	r2, [r1, r3]
 800a66a:	b10a      	cbz	r2, 800a670 <__lshift+0xa4>
 800a66c:	f108 0602 	add.w	r6, r8, #2
 800a670:	3e01      	subs	r6, #1
 800a672:	4638      	mov	r0, r7
 800a674:	612e      	str	r6, [r5, #16]
 800a676:	4621      	mov	r1, r4
 800a678:	f7ff fde2 	bl	800a240 <_Bfree>
 800a67c:	4628      	mov	r0, r5
 800a67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a682:	f842 0f04 	str.w	r0, [r2, #4]!
 800a686:	3301      	adds	r3, #1
 800a688:	e7c5      	b.n	800a616 <__lshift+0x4a>
 800a68a:	3904      	subs	r1, #4
 800a68c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a690:	f841 2f04 	str.w	r2, [r1, #4]!
 800a694:	459c      	cmp	ip, r3
 800a696:	d8f9      	bhi.n	800a68c <__lshift+0xc0>
 800a698:	e7ea      	b.n	800a670 <__lshift+0xa4>
 800a69a:	bf00      	nop
 800a69c:	0800b961 	.word	0x0800b961
 800a6a0:	0800b972 	.word	0x0800b972

0800a6a4 <__mcmp>:
 800a6a4:	690a      	ldr	r2, [r1, #16]
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	6900      	ldr	r0, [r0, #16]
 800a6aa:	1a80      	subs	r0, r0, r2
 800a6ac:	b530      	push	{r4, r5, lr}
 800a6ae:	d10e      	bne.n	800a6ce <__mcmp+0x2a>
 800a6b0:	3314      	adds	r3, #20
 800a6b2:	3114      	adds	r1, #20
 800a6b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a6b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a6bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6c4:	4295      	cmp	r5, r2
 800a6c6:	d003      	beq.n	800a6d0 <__mcmp+0x2c>
 800a6c8:	d205      	bcs.n	800a6d6 <__mcmp+0x32>
 800a6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ce:	bd30      	pop	{r4, r5, pc}
 800a6d0:	42a3      	cmp	r3, r4
 800a6d2:	d3f3      	bcc.n	800a6bc <__mcmp+0x18>
 800a6d4:	e7fb      	b.n	800a6ce <__mcmp+0x2a>
 800a6d6:	2001      	movs	r0, #1
 800a6d8:	e7f9      	b.n	800a6ce <__mcmp+0x2a>
	...

0800a6dc <__mdiff>:
 800a6dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e0:	4689      	mov	r9, r1
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	4648      	mov	r0, r9
 800a6e8:	4614      	mov	r4, r2
 800a6ea:	f7ff ffdb 	bl	800a6a4 <__mcmp>
 800a6ee:	1e05      	subs	r5, r0, #0
 800a6f0:	d112      	bne.n	800a718 <__mdiff+0x3c>
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f7ff fd63 	bl	800a1c0 <_Balloc>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	b928      	cbnz	r0, 800a70a <__mdiff+0x2e>
 800a6fe:	4b3f      	ldr	r3, [pc, #252]	@ (800a7fc <__mdiff+0x120>)
 800a700:	f240 2137 	movw	r1, #567	@ 0x237
 800a704:	483e      	ldr	r0, [pc, #248]	@ (800a800 <__mdiff+0x124>)
 800a706:	f000 fb11 	bl	800ad2c <__assert_func>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a710:	4610      	mov	r0, r2
 800a712:	b003      	add	sp, #12
 800a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a718:	bfbc      	itt	lt
 800a71a:	464b      	movlt	r3, r9
 800a71c:	46a1      	movlt	r9, r4
 800a71e:	4630      	mov	r0, r6
 800a720:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a724:	bfba      	itte	lt
 800a726:	461c      	movlt	r4, r3
 800a728:	2501      	movlt	r5, #1
 800a72a:	2500      	movge	r5, #0
 800a72c:	f7ff fd48 	bl	800a1c0 <_Balloc>
 800a730:	4602      	mov	r2, r0
 800a732:	b918      	cbnz	r0, 800a73c <__mdiff+0x60>
 800a734:	4b31      	ldr	r3, [pc, #196]	@ (800a7fc <__mdiff+0x120>)
 800a736:	f240 2145 	movw	r1, #581	@ 0x245
 800a73a:	e7e3      	b.n	800a704 <__mdiff+0x28>
 800a73c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a740:	6926      	ldr	r6, [r4, #16]
 800a742:	60c5      	str	r5, [r0, #12]
 800a744:	f109 0310 	add.w	r3, r9, #16
 800a748:	f109 0514 	add.w	r5, r9, #20
 800a74c:	f104 0e14 	add.w	lr, r4, #20
 800a750:	f100 0b14 	add.w	fp, r0, #20
 800a754:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a758:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a75c:	9301      	str	r3, [sp, #4]
 800a75e:	46d9      	mov	r9, fp
 800a760:	f04f 0c00 	mov.w	ip, #0
 800a764:	9b01      	ldr	r3, [sp, #4]
 800a766:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a76a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a76e:	9301      	str	r3, [sp, #4]
 800a770:	fa1f f38a 	uxth.w	r3, sl
 800a774:	4619      	mov	r1, r3
 800a776:	b283      	uxth	r3, r0
 800a778:	1acb      	subs	r3, r1, r3
 800a77a:	0c00      	lsrs	r0, r0, #16
 800a77c:	4463      	add	r3, ip
 800a77e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a782:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a786:	b29b      	uxth	r3, r3
 800a788:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a78c:	4576      	cmp	r6, lr
 800a78e:	f849 3b04 	str.w	r3, [r9], #4
 800a792:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a796:	d8e5      	bhi.n	800a764 <__mdiff+0x88>
 800a798:	1b33      	subs	r3, r6, r4
 800a79a:	3b15      	subs	r3, #21
 800a79c:	f023 0303 	bic.w	r3, r3, #3
 800a7a0:	3415      	adds	r4, #21
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	42a6      	cmp	r6, r4
 800a7a6:	bf38      	it	cc
 800a7a8:	2304      	movcc	r3, #4
 800a7aa:	441d      	add	r5, r3
 800a7ac:	445b      	add	r3, fp
 800a7ae:	461e      	mov	r6, r3
 800a7b0:	462c      	mov	r4, r5
 800a7b2:	4544      	cmp	r4, r8
 800a7b4:	d30e      	bcc.n	800a7d4 <__mdiff+0xf8>
 800a7b6:	f108 0103 	add.w	r1, r8, #3
 800a7ba:	1b49      	subs	r1, r1, r5
 800a7bc:	f021 0103 	bic.w	r1, r1, #3
 800a7c0:	3d03      	subs	r5, #3
 800a7c2:	45a8      	cmp	r8, r5
 800a7c4:	bf38      	it	cc
 800a7c6:	2100      	movcc	r1, #0
 800a7c8:	440b      	add	r3, r1
 800a7ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7ce:	b191      	cbz	r1, 800a7f6 <__mdiff+0x11a>
 800a7d0:	6117      	str	r7, [r2, #16]
 800a7d2:	e79d      	b.n	800a710 <__mdiff+0x34>
 800a7d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7d8:	46e6      	mov	lr, ip
 800a7da:	0c08      	lsrs	r0, r1, #16
 800a7dc:	fa1c fc81 	uxtah	ip, ip, r1
 800a7e0:	4471      	add	r1, lr
 800a7e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7e6:	b289      	uxth	r1, r1
 800a7e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7ec:	f846 1b04 	str.w	r1, [r6], #4
 800a7f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7f4:	e7dd      	b.n	800a7b2 <__mdiff+0xd6>
 800a7f6:	3f01      	subs	r7, #1
 800a7f8:	e7e7      	b.n	800a7ca <__mdiff+0xee>
 800a7fa:	bf00      	nop
 800a7fc:	0800b961 	.word	0x0800b961
 800a800:	0800b972 	.word	0x0800b972

0800a804 <__d2b>:
 800a804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a808:	460f      	mov	r7, r1
 800a80a:	2101      	movs	r1, #1
 800a80c:	ec59 8b10 	vmov	r8, r9, d0
 800a810:	4616      	mov	r6, r2
 800a812:	f7ff fcd5 	bl	800a1c0 <_Balloc>
 800a816:	4604      	mov	r4, r0
 800a818:	b930      	cbnz	r0, 800a828 <__d2b+0x24>
 800a81a:	4602      	mov	r2, r0
 800a81c:	4b23      	ldr	r3, [pc, #140]	@ (800a8ac <__d2b+0xa8>)
 800a81e:	4824      	ldr	r0, [pc, #144]	@ (800a8b0 <__d2b+0xac>)
 800a820:	f240 310f 	movw	r1, #783	@ 0x30f
 800a824:	f000 fa82 	bl	800ad2c <__assert_func>
 800a828:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a82c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a830:	b10d      	cbz	r5, 800a836 <__d2b+0x32>
 800a832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	f1b8 0300 	subs.w	r3, r8, #0
 800a83c:	d023      	beq.n	800a886 <__d2b+0x82>
 800a83e:	4668      	mov	r0, sp
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	f7ff fd84 	bl	800a34e <__lo0bits>
 800a846:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a84a:	b1d0      	cbz	r0, 800a882 <__d2b+0x7e>
 800a84c:	f1c0 0320 	rsb	r3, r0, #32
 800a850:	fa02 f303 	lsl.w	r3, r2, r3
 800a854:	430b      	orrs	r3, r1
 800a856:	40c2      	lsrs	r2, r0
 800a858:	6163      	str	r3, [r4, #20]
 800a85a:	9201      	str	r2, [sp, #4]
 800a85c:	9b01      	ldr	r3, [sp, #4]
 800a85e:	61a3      	str	r3, [r4, #24]
 800a860:	2b00      	cmp	r3, #0
 800a862:	bf0c      	ite	eq
 800a864:	2201      	moveq	r2, #1
 800a866:	2202      	movne	r2, #2
 800a868:	6122      	str	r2, [r4, #16]
 800a86a:	b1a5      	cbz	r5, 800a896 <__d2b+0x92>
 800a86c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a870:	4405      	add	r5, r0
 800a872:	603d      	str	r5, [r7, #0]
 800a874:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a878:	6030      	str	r0, [r6, #0]
 800a87a:	4620      	mov	r0, r4
 800a87c:	b003      	add	sp, #12
 800a87e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a882:	6161      	str	r1, [r4, #20]
 800a884:	e7ea      	b.n	800a85c <__d2b+0x58>
 800a886:	a801      	add	r0, sp, #4
 800a888:	f7ff fd61 	bl	800a34e <__lo0bits>
 800a88c:	9b01      	ldr	r3, [sp, #4]
 800a88e:	6163      	str	r3, [r4, #20]
 800a890:	3020      	adds	r0, #32
 800a892:	2201      	movs	r2, #1
 800a894:	e7e8      	b.n	800a868 <__d2b+0x64>
 800a896:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a89a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a89e:	6038      	str	r0, [r7, #0]
 800a8a0:	6918      	ldr	r0, [r3, #16]
 800a8a2:	f7ff fd35 	bl	800a310 <__hi0bits>
 800a8a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8aa:	e7e5      	b.n	800a878 <__d2b+0x74>
 800a8ac:	0800b961 	.word	0x0800b961
 800a8b0:	0800b972 	.word	0x0800b972

0800a8b4 <__ssputs_r>:
 800a8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	688e      	ldr	r6, [r1, #8]
 800a8ba:	461f      	mov	r7, r3
 800a8bc:	42be      	cmp	r6, r7
 800a8be:	680b      	ldr	r3, [r1, #0]
 800a8c0:	4682      	mov	sl, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	4690      	mov	r8, r2
 800a8c6:	d82d      	bhi.n	800a924 <__ssputs_r+0x70>
 800a8c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8d0:	d026      	beq.n	800a920 <__ssputs_r+0x6c>
 800a8d2:	6965      	ldr	r5, [r4, #20]
 800a8d4:	6909      	ldr	r1, [r1, #16]
 800a8d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8da:	eba3 0901 	sub.w	r9, r3, r1
 800a8de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8e2:	1c7b      	adds	r3, r7, #1
 800a8e4:	444b      	add	r3, r9
 800a8e6:	106d      	asrs	r5, r5, #1
 800a8e8:	429d      	cmp	r5, r3
 800a8ea:	bf38      	it	cc
 800a8ec:	461d      	movcc	r5, r3
 800a8ee:	0553      	lsls	r3, r2, #21
 800a8f0:	d527      	bpl.n	800a942 <__ssputs_r+0x8e>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	f7ff fbd8 	bl	800a0a8 <_malloc_r>
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	b360      	cbz	r0, 800a956 <__ssputs_r+0xa2>
 800a8fc:	6921      	ldr	r1, [r4, #16]
 800a8fe:	464a      	mov	r2, r9
 800a900:	f000 fa06 	bl	800ad10 <memcpy>
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a90e:	81a3      	strh	r3, [r4, #12]
 800a910:	6126      	str	r6, [r4, #16]
 800a912:	6165      	str	r5, [r4, #20]
 800a914:	444e      	add	r6, r9
 800a916:	eba5 0509 	sub.w	r5, r5, r9
 800a91a:	6026      	str	r6, [r4, #0]
 800a91c:	60a5      	str	r5, [r4, #8]
 800a91e:	463e      	mov	r6, r7
 800a920:	42be      	cmp	r6, r7
 800a922:	d900      	bls.n	800a926 <__ssputs_r+0x72>
 800a924:	463e      	mov	r6, r7
 800a926:	6820      	ldr	r0, [r4, #0]
 800a928:	4632      	mov	r2, r6
 800a92a:	4641      	mov	r1, r8
 800a92c:	f000 f9c6 	bl	800acbc <memmove>
 800a930:	68a3      	ldr	r3, [r4, #8]
 800a932:	1b9b      	subs	r3, r3, r6
 800a934:	60a3      	str	r3, [r4, #8]
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	4433      	add	r3, r6
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	2000      	movs	r0, #0
 800a93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a942:	462a      	mov	r2, r5
 800a944:	f000 fa36 	bl	800adb4 <_realloc_r>
 800a948:	4606      	mov	r6, r0
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d1e0      	bne.n	800a910 <__ssputs_r+0x5c>
 800a94e:	6921      	ldr	r1, [r4, #16]
 800a950:	4650      	mov	r0, sl
 800a952:	f7ff fb35 	bl	8009fc0 <_free_r>
 800a956:	230c      	movs	r3, #12
 800a958:	f8ca 3000 	str.w	r3, [sl]
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a962:	81a3      	strh	r3, [r4, #12]
 800a964:	f04f 30ff 	mov.w	r0, #4294967295
 800a968:	e7e9      	b.n	800a93e <__ssputs_r+0x8a>
	...

0800a96c <_svfiprintf_r>:
 800a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	4698      	mov	r8, r3
 800a972:	898b      	ldrh	r3, [r1, #12]
 800a974:	061b      	lsls	r3, r3, #24
 800a976:	b09d      	sub	sp, #116	@ 0x74
 800a978:	4607      	mov	r7, r0
 800a97a:	460d      	mov	r5, r1
 800a97c:	4614      	mov	r4, r2
 800a97e:	d510      	bpl.n	800a9a2 <_svfiprintf_r+0x36>
 800a980:	690b      	ldr	r3, [r1, #16]
 800a982:	b973      	cbnz	r3, 800a9a2 <_svfiprintf_r+0x36>
 800a984:	2140      	movs	r1, #64	@ 0x40
 800a986:	f7ff fb8f 	bl	800a0a8 <_malloc_r>
 800a98a:	6028      	str	r0, [r5, #0]
 800a98c:	6128      	str	r0, [r5, #16]
 800a98e:	b930      	cbnz	r0, 800a99e <_svfiprintf_r+0x32>
 800a990:	230c      	movs	r3, #12
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	f04f 30ff 	mov.w	r0, #4294967295
 800a998:	b01d      	add	sp, #116	@ 0x74
 800a99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99e:	2340      	movs	r3, #64	@ 0x40
 800a9a0:	616b      	str	r3, [r5, #20]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9a6:	2320      	movs	r3, #32
 800a9a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9b0:	2330      	movs	r3, #48	@ 0x30
 800a9b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab50 <_svfiprintf_r+0x1e4>
 800a9b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9ba:	f04f 0901 	mov.w	r9, #1
 800a9be:	4623      	mov	r3, r4
 800a9c0:	469a      	mov	sl, r3
 800a9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9c6:	b10a      	cbz	r2, 800a9cc <_svfiprintf_r+0x60>
 800a9c8:	2a25      	cmp	r2, #37	@ 0x25
 800a9ca:	d1f9      	bne.n	800a9c0 <_svfiprintf_r+0x54>
 800a9cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a9d0:	d00b      	beq.n	800a9ea <_svfiprintf_r+0x7e>
 800a9d2:	465b      	mov	r3, fp
 800a9d4:	4622      	mov	r2, r4
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f7ff ff6b 	bl	800a8b4 <__ssputs_r>
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f000 80a7 	beq.w	800ab32 <_svfiprintf_r+0x1c6>
 800a9e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9e6:	445a      	add	r2, fp
 800a9e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 809f 	beq.w	800ab32 <_svfiprintf_r+0x1c6>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9fe:	f10a 0a01 	add.w	sl, sl, #1
 800aa02:	9304      	str	r3, [sp, #16]
 800aa04:	9307      	str	r3, [sp, #28]
 800aa06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa0c:	4654      	mov	r4, sl
 800aa0e:	2205      	movs	r2, #5
 800aa10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa14:	484e      	ldr	r0, [pc, #312]	@ (800ab50 <_svfiprintf_r+0x1e4>)
 800aa16:	f7f5 fbe3 	bl	80001e0 <memchr>
 800aa1a:	9a04      	ldr	r2, [sp, #16]
 800aa1c:	b9d8      	cbnz	r0, 800aa56 <_svfiprintf_r+0xea>
 800aa1e:	06d0      	lsls	r0, r2, #27
 800aa20:	bf44      	itt	mi
 800aa22:	2320      	movmi	r3, #32
 800aa24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa28:	0711      	lsls	r1, r2, #28
 800aa2a:	bf44      	itt	mi
 800aa2c:	232b      	movmi	r3, #43	@ 0x2b
 800aa2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa32:	f89a 3000 	ldrb.w	r3, [sl]
 800aa36:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa38:	d015      	beq.n	800aa66 <_svfiprintf_r+0xfa>
 800aa3a:	9a07      	ldr	r2, [sp, #28]
 800aa3c:	4654      	mov	r4, sl
 800aa3e:	2000      	movs	r0, #0
 800aa40:	f04f 0c0a 	mov.w	ip, #10
 800aa44:	4621      	mov	r1, r4
 800aa46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa4a:	3b30      	subs	r3, #48	@ 0x30
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	d94b      	bls.n	800aae8 <_svfiprintf_r+0x17c>
 800aa50:	b1b0      	cbz	r0, 800aa80 <_svfiprintf_r+0x114>
 800aa52:	9207      	str	r2, [sp, #28]
 800aa54:	e014      	b.n	800aa80 <_svfiprintf_r+0x114>
 800aa56:	eba0 0308 	sub.w	r3, r0, r8
 800aa5a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	46a2      	mov	sl, r4
 800aa64:	e7d2      	b.n	800aa0c <_svfiprintf_r+0xa0>
 800aa66:	9b03      	ldr	r3, [sp, #12]
 800aa68:	1d19      	adds	r1, r3, #4
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	9103      	str	r1, [sp, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	bfbb      	ittet	lt
 800aa72:	425b      	neglt	r3, r3
 800aa74:	f042 0202 	orrlt.w	r2, r2, #2
 800aa78:	9307      	strge	r3, [sp, #28]
 800aa7a:	9307      	strlt	r3, [sp, #28]
 800aa7c:	bfb8      	it	lt
 800aa7e:	9204      	strlt	r2, [sp, #16]
 800aa80:	7823      	ldrb	r3, [r4, #0]
 800aa82:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa84:	d10a      	bne.n	800aa9c <_svfiprintf_r+0x130>
 800aa86:	7863      	ldrb	r3, [r4, #1]
 800aa88:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa8a:	d132      	bne.n	800aaf2 <_svfiprintf_r+0x186>
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	1d1a      	adds	r2, r3, #4
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	9203      	str	r2, [sp, #12]
 800aa94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa98:	3402      	adds	r4, #2
 800aa9a:	9305      	str	r3, [sp, #20]
 800aa9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab60 <_svfiprintf_r+0x1f4>
 800aaa0:	7821      	ldrb	r1, [r4, #0]
 800aaa2:	2203      	movs	r2, #3
 800aaa4:	4650      	mov	r0, sl
 800aaa6:	f7f5 fb9b 	bl	80001e0 <memchr>
 800aaaa:	b138      	cbz	r0, 800aabc <_svfiprintf_r+0x150>
 800aaac:	9b04      	ldr	r3, [sp, #16]
 800aaae:	eba0 000a 	sub.w	r0, r0, sl
 800aab2:	2240      	movs	r2, #64	@ 0x40
 800aab4:	4082      	lsls	r2, r0
 800aab6:	4313      	orrs	r3, r2
 800aab8:	3401      	adds	r4, #1
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac0:	4824      	ldr	r0, [pc, #144]	@ (800ab54 <_svfiprintf_r+0x1e8>)
 800aac2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aac6:	2206      	movs	r2, #6
 800aac8:	f7f5 fb8a 	bl	80001e0 <memchr>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d036      	beq.n	800ab3e <_svfiprintf_r+0x1d2>
 800aad0:	4b21      	ldr	r3, [pc, #132]	@ (800ab58 <_svfiprintf_r+0x1ec>)
 800aad2:	bb1b      	cbnz	r3, 800ab1c <_svfiprintf_r+0x1b0>
 800aad4:	9b03      	ldr	r3, [sp, #12]
 800aad6:	3307      	adds	r3, #7
 800aad8:	f023 0307 	bic.w	r3, r3, #7
 800aadc:	3308      	adds	r3, #8
 800aade:	9303      	str	r3, [sp, #12]
 800aae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aae2:	4433      	add	r3, r6
 800aae4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aae6:	e76a      	b.n	800a9be <_svfiprintf_r+0x52>
 800aae8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaec:	460c      	mov	r4, r1
 800aaee:	2001      	movs	r0, #1
 800aaf0:	e7a8      	b.n	800aa44 <_svfiprintf_r+0xd8>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	3401      	adds	r4, #1
 800aaf6:	9305      	str	r3, [sp, #20]
 800aaf8:	4619      	mov	r1, r3
 800aafa:	f04f 0c0a 	mov.w	ip, #10
 800aafe:	4620      	mov	r0, r4
 800ab00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab04:	3a30      	subs	r2, #48	@ 0x30
 800ab06:	2a09      	cmp	r2, #9
 800ab08:	d903      	bls.n	800ab12 <_svfiprintf_r+0x1a6>
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0c6      	beq.n	800aa9c <_svfiprintf_r+0x130>
 800ab0e:	9105      	str	r1, [sp, #20]
 800ab10:	e7c4      	b.n	800aa9c <_svfiprintf_r+0x130>
 800ab12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab16:	4604      	mov	r4, r0
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e7f0      	b.n	800aafe <_svfiprintf_r+0x192>
 800ab1c:	ab03      	add	r3, sp, #12
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	462a      	mov	r2, r5
 800ab22:	4b0e      	ldr	r3, [pc, #56]	@ (800ab5c <_svfiprintf_r+0x1f0>)
 800ab24:	a904      	add	r1, sp, #16
 800ab26:	4638      	mov	r0, r7
 800ab28:	f7fd fe82 	bl	8008830 <_printf_float>
 800ab2c:	1c42      	adds	r2, r0, #1
 800ab2e:	4606      	mov	r6, r0
 800ab30:	d1d6      	bne.n	800aae0 <_svfiprintf_r+0x174>
 800ab32:	89ab      	ldrh	r3, [r5, #12]
 800ab34:	065b      	lsls	r3, r3, #25
 800ab36:	f53f af2d 	bmi.w	800a994 <_svfiprintf_r+0x28>
 800ab3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab3c:	e72c      	b.n	800a998 <_svfiprintf_r+0x2c>
 800ab3e:	ab03      	add	r3, sp, #12
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	462a      	mov	r2, r5
 800ab44:	4b05      	ldr	r3, [pc, #20]	@ (800ab5c <_svfiprintf_r+0x1f0>)
 800ab46:	a904      	add	r1, sp, #16
 800ab48:	4638      	mov	r0, r7
 800ab4a:	f7fe f909 	bl	8008d60 <_printf_i>
 800ab4e:	e7ed      	b.n	800ab2c <_svfiprintf_r+0x1c0>
 800ab50:	0800b9cb 	.word	0x0800b9cb
 800ab54:	0800b9d5 	.word	0x0800b9d5
 800ab58:	08008831 	.word	0x08008831
 800ab5c:	0800a8b5 	.word	0x0800a8b5
 800ab60:	0800b9d1 	.word	0x0800b9d1

0800ab64 <__sflush_r>:
 800ab64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6c:	0716      	lsls	r6, r2, #28
 800ab6e:	4605      	mov	r5, r0
 800ab70:	460c      	mov	r4, r1
 800ab72:	d454      	bmi.n	800ac1e <__sflush_r+0xba>
 800ab74:	684b      	ldr	r3, [r1, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	dc02      	bgt.n	800ab80 <__sflush_r+0x1c>
 800ab7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	dd48      	ble.n	800ac12 <__sflush_r+0xae>
 800ab80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab82:	2e00      	cmp	r6, #0
 800ab84:	d045      	beq.n	800ac12 <__sflush_r+0xae>
 800ab86:	2300      	movs	r3, #0
 800ab88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab8c:	682f      	ldr	r7, [r5, #0]
 800ab8e:	6a21      	ldr	r1, [r4, #32]
 800ab90:	602b      	str	r3, [r5, #0]
 800ab92:	d030      	beq.n	800abf6 <__sflush_r+0x92>
 800ab94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	0759      	lsls	r1, r3, #29
 800ab9a:	d505      	bpl.n	800aba8 <__sflush_r+0x44>
 800ab9c:	6863      	ldr	r3, [r4, #4]
 800ab9e:	1ad2      	subs	r2, r2, r3
 800aba0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aba2:	b10b      	cbz	r3, 800aba8 <__sflush_r+0x44>
 800aba4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aba6:	1ad2      	subs	r2, r2, r3
 800aba8:	2300      	movs	r3, #0
 800abaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abac:	6a21      	ldr	r1, [r4, #32]
 800abae:	4628      	mov	r0, r5
 800abb0:	47b0      	blx	r6
 800abb2:	1c43      	adds	r3, r0, #1
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	d106      	bne.n	800abc6 <__sflush_r+0x62>
 800abb8:	6829      	ldr	r1, [r5, #0]
 800abba:	291d      	cmp	r1, #29
 800abbc:	d82b      	bhi.n	800ac16 <__sflush_r+0xb2>
 800abbe:	4a2a      	ldr	r2, [pc, #168]	@ (800ac68 <__sflush_r+0x104>)
 800abc0:	40ca      	lsrs	r2, r1
 800abc2:	07d6      	lsls	r6, r2, #31
 800abc4:	d527      	bpl.n	800ac16 <__sflush_r+0xb2>
 800abc6:	2200      	movs	r2, #0
 800abc8:	6062      	str	r2, [r4, #4]
 800abca:	04d9      	lsls	r1, r3, #19
 800abcc:	6922      	ldr	r2, [r4, #16]
 800abce:	6022      	str	r2, [r4, #0]
 800abd0:	d504      	bpl.n	800abdc <__sflush_r+0x78>
 800abd2:	1c42      	adds	r2, r0, #1
 800abd4:	d101      	bne.n	800abda <__sflush_r+0x76>
 800abd6:	682b      	ldr	r3, [r5, #0]
 800abd8:	b903      	cbnz	r3, 800abdc <__sflush_r+0x78>
 800abda:	6560      	str	r0, [r4, #84]	@ 0x54
 800abdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abde:	602f      	str	r7, [r5, #0]
 800abe0:	b1b9      	cbz	r1, 800ac12 <__sflush_r+0xae>
 800abe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abe6:	4299      	cmp	r1, r3
 800abe8:	d002      	beq.n	800abf0 <__sflush_r+0x8c>
 800abea:	4628      	mov	r0, r5
 800abec:	f7ff f9e8 	bl	8009fc0 <_free_r>
 800abf0:	2300      	movs	r3, #0
 800abf2:	6363      	str	r3, [r4, #52]	@ 0x34
 800abf4:	e00d      	b.n	800ac12 <__sflush_r+0xae>
 800abf6:	2301      	movs	r3, #1
 800abf8:	4628      	mov	r0, r5
 800abfa:	47b0      	blx	r6
 800abfc:	4602      	mov	r2, r0
 800abfe:	1c50      	adds	r0, r2, #1
 800ac00:	d1c9      	bne.n	800ab96 <__sflush_r+0x32>
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0c6      	beq.n	800ab96 <__sflush_r+0x32>
 800ac08:	2b1d      	cmp	r3, #29
 800ac0a:	d001      	beq.n	800ac10 <__sflush_r+0xac>
 800ac0c:	2b16      	cmp	r3, #22
 800ac0e:	d11e      	bne.n	800ac4e <__sflush_r+0xea>
 800ac10:	602f      	str	r7, [r5, #0]
 800ac12:	2000      	movs	r0, #0
 800ac14:	e022      	b.n	800ac5c <__sflush_r+0xf8>
 800ac16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac1a:	b21b      	sxth	r3, r3
 800ac1c:	e01b      	b.n	800ac56 <__sflush_r+0xf2>
 800ac1e:	690f      	ldr	r7, [r1, #16]
 800ac20:	2f00      	cmp	r7, #0
 800ac22:	d0f6      	beq.n	800ac12 <__sflush_r+0xae>
 800ac24:	0793      	lsls	r3, r2, #30
 800ac26:	680e      	ldr	r6, [r1, #0]
 800ac28:	bf08      	it	eq
 800ac2a:	694b      	ldreq	r3, [r1, #20]
 800ac2c:	600f      	str	r7, [r1, #0]
 800ac2e:	bf18      	it	ne
 800ac30:	2300      	movne	r3, #0
 800ac32:	eba6 0807 	sub.w	r8, r6, r7
 800ac36:	608b      	str	r3, [r1, #8]
 800ac38:	f1b8 0f00 	cmp.w	r8, #0
 800ac3c:	dde9      	ble.n	800ac12 <__sflush_r+0xae>
 800ac3e:	6a21      	ldr	r1, [r4, #32]
 800ac40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac42:	4643      	mov	r3, r8
 800ac44:	463a      	mov	r2, r7
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b0      	blx	r6
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	dc08      	bgt.n	800ac60 <__sflush_r+0xfc>
 800ac4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac56:	81a3      	strh	r3, [r4, #12]
 800ac58:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac60:	4407      	add	r7, r0
 800ac62:	eba8 0800 	sub.w	r8, r8, r0
 800ac66:	e7e7      	b.n	800ac38 <__sflush_r+0xd4>
 800ac68:	20400001 	.word	0x20400001

0800ac6c <_fflush_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	690b      	ldr	r3, [r1, #16]
 800ac70:	4605      	mov	r5, r0
 800ac72:	460c      	mov	r4, r1
 800ac74:	b913      	cbnz	r3, 800ac7c <_fflush_r+0x10>
 800ac76:	2500      	movs	r5, #0
 800ac78:	4628      	mov	r0, r5
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
 800ac7c:	b118      	cbz	r0, 800ac86 <_fflush_r+0x1a>
 800ac7e:	6a03      	ldr	r3, [r0, #32]
 800ac80:	b90b      	cbnz	r3, 800ac86 <_fflush_r+0x1a>
 800ac82:	f7fe fa17 	bl	80090b4 <__sinit>
 800ac86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0f3      	beq.n	800ac76 <_fflush_r+0xa>
 800ac8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac90:	07d0      	lsls	r0, r2, #31
 800ac92:	d404      	bmi.n	800ac9e <_fflush_r+0x32>
 800ac94:	0599      	lsls	r1, r3, #22
 800ac96:	d402      	bmi.n	800ac9e <_fflush_r+0x32>
 800ac98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac9a:	f7fe fb36 	bl	800930a <__retarget_lock_acquire_recursive>
 800ac9e:	4628      	mov	r0, r5
 800aca0:	4621      	mov	r1, r4
 800aca2:	f7ff ff5f 	bl	800ab64 <__sflush_r>
 800aca6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aca8:	07da      	lsls	r2, r3, #31
 800acaa:	4605      	mov	r5, r0
 800acac:	d4e4      	bmi.n	800ac78 <_fflush_r+0xc>
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	059b      	lsls	r3, r3, #22
 800acb2:	d4e1      	bmi.n	800ac78 <_fflush_r+0xc>
 800acb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acb6:	f7fe fb29 	bl	800930c <__retarget_lock_release_recursive>
 800acba:	e7dd      	b.n	800ac78 <_fflush_r+0xc>

0800acbc <memmove>:
 800acbc:	4288      	cmp	r0, r1
 800acbe:	b510      	push	{r4, lr}
 800acc0:	eb01 0402 	add.w	r4, r1, r2
 800acc4:	d902      	bls.n	800accc <memmove+0x10>
 800acc6:	4284      	cmp	r4, r0
 800acc8:	4623      	mov	r3, r4
 800acca:	d807      	bhi.n	800acdc <memmove+0x20>
 800accc:	1e43      	subs	r3, r0, #1
 800acce:	42a1      	cmp	r1, r4
 800acd0:	d008      	beq.n	800ace4 <memmove+0x28>
 800acd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acda:	e7f8      	b.n	800acce <memmove+0x12>
 800acdc:	4402      	add	r2, r0
 800acde:	4601      	mov	r1, r0
 800ace0:	428a      	cmp	r2, r1
 800ace2:	d100      	bne.n	800ace6 <memmove+0x2a>
 800ace4:	bd10      	pop	{r4, pc}
 800ace6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acee:	e7f7      	b.n	800ace0 <memmove+0x24>

0800acf0 <_sbrk_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d06      	ldr	r5, [pc, #24]	@ (800ad0c <_sbrk_r+0x1c>)
 800acf4:	2300      	movs	r3, #0
 800acf6:	4604      	mov	r4, r0
 800acf8:	4608      	mov	r0, r1
 800acfa:	602b      	str	r3, [r5, #0]
 800acfc:	f7f8 fb72 	bl	80033e4 <_sbrk>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d102      	bne.n	800ad0a <_sbrk_r+0x1a>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	b103      	cbz	r3, 800ad0a <_sbrk_r+0x1a>
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	200007ec 	.word	0x200007ec

0800ad10 <memcpy>:
 800ad10:	440a      	add	r2, r1
 800ad12:	4291      	cmp	r1, r2
 800ad14:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad18:	d100      	bne.n	800ad1c <memcpy+0xc>
 800ad1a:	4770      	bx	lr
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad26:	4291      	cmp	r1, r2
 800ad28:	d1f9      	bne.n	800ad1e <memcpy+0xe>
 800ad2a:	bd10      	pop	{r4, pc}

0800ad2c <__assert_func>:
 800ad2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad2e:	4614      	mov	r4, r2
 800ad30:	461a      	mov	r2, r3
 800ad32:	4b09      	ldr	r3, [pc, #36]	@ (800ad58 <__assert_func+0x2c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4605      	mov	r5, r0
 800ad38:	68d8      	ldr	r0, [r3, #12]
 800ad3a:	b14c      	cbz	r4, 800ad50 <__assert_func+0x24>
 800ad3c:	4b07      	ldr	r3, [pc, #28]	@ (800ad5c <__assert_func+0x30>)
 800ad3e:	9100      	str	r1, [sp, #0]
 800ad40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad44:	4906      	ldr	r1, [pc, #24]	@ (800ad60 <__assert_func+0x34>)
 800ad46:	462b      	mov	r3, r5
 800ad48:	f000 f870 	bl	800ae2c <fiprintf>
 800ad4c:	f000 f880 	bl	800ae50 <abort>
 800ad50:	4b04      	ldr	r3, [pc, #16]	@ (800ad64 <__assert_func+0x38>)
 800ad52:	461c      	mov	r4, r3
 800ad54:	e7f3      	b.n	800ad3e <__assert_func+0x12>
 800ad56:	bf00      	nop
 800ad58:	20000070 	.word	0x20000070
 800ad5c:	0800b9e6 	.word	0x0800b9e6
 800ad60:	0800b9f3 	.word	0x0800b9f3
 800ad64:	0800ba21 	.word	0x0800ba21

0800ad68 <_calloc_r>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	fba1 5402 	umull	r5, r4, r1, r2
 800ad6e:	b934      	cbnz	r4, 800ad7e <_calloc_r+0x16>
 800ad70:	4629      	mov	r1, r5
 800ad72:	f7ff f999 	bl	800a0a8 <_malloc_r>
 800ad76:	4606      	mov	r6, r0
 800ad78:	b928      	cbnz	r0, 800ad86 <_calloc_r+0x1e>
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	bd70      	pop	{r4, r5, r6, pc}
 800ad7e:	220c      	movs	r2, #12
 800ad80:	6002      	str	r2, [r0, #0]
 800ad82:	2600      	movs	r6, #0
 800ad84:	e7f9      	b.n	800ad7a <_calloc_r+0x12>
 800ad86:	462a      	mov	r2, r5
 800ad88:	4621      	mov	r1, r4
 800ad8a:	f7fe fa2e 	bl	80091ea <memset>
 800ad8e:	e7f4      	b.n	800ad7a <_calloc_r+0x12>

0800ad90 <__ascii_mbtowc>:
 800ad90:	b082      	sub	sp, #8
 800ad92:	b901      	cbnz	r1, 800ad96 <__ascii_mbtowc+0x6>
 800ad94:	a901      	add	r1, sp, #4
 800ad96:	b142      	cbz	r2, 800adaa <__ascii_mbtowc+0x1a>
 800ad98:	b14b      	cbz	r3, 800adae <__ascii_mbtowc+0x1e>
 800ad9a:	7813      	ldrb	r3, [r2, #0]
 800ad9c:	600b      	str	r3, [r1, #0]
 800ad9e:	7812      	ldrb	r2, [r2, #0]
 800ada0:	1e10      	subs	r0, r2, #0
 800ada2:	bf18      	it	ne
 800ada4:	2001      	movne	r0, #1
 800ada6:	b002      	add	sp, #8
 800ada8:	4770      	bx	lr
 800adaa:	4610      	mov	r0, r2
 800adac:	e7fb      	b.n	800ada6 <__ascii_mbtowc+0x16>
 800adae:	f06f 0001 	mvn.w	r0, #1
 800adb2:	e7f8      	b.n	800ada6 <__ascii_mbtowc+0x16>

0800adb4 <_realloc_r>:
 800adb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb8:	4607      	mov	r7, r0
 800adba:	4614      	mov	r4, r2
 800adbc:	460d      	mov	r5, r1
 800adbe:	b921      	cbnz	r1, 800adca <_realloc_r+0x16>
 800adc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adc4:	4611      	mov	r1, r2
 800adc6:	f7ff b96f 	b.w	800a0a8 <_malloc_r>
 800adca:	b92a      	cbnz	r2, 800add8 <_realloc_r+0x24>
 800adcc:	f7ff f8f8 	bl	8009fc0 <_free_r>
 800add0:	4625      	mov	r5, r4
 800add2:	4628      	mov	r0, r5
 800add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add8:	f000 f841 	bl	800ae5e <_malloc_usable_size_r>
 800addc:	4284      	cmp	r4, r0
 800adde:	4606      	mov	r6, r0
 800ade0:	d802      	bhi.n	800ade8 <_realloc_r+0x34>
 800ade2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ade6:	d8f4      	bhi.n	800add2 <_realloc_r+0x1e>
 800ade8:	4621      	mov	r1, r4
 800adea:	4638      	mov	r0, r7
 800adec:	f7ff f95c 	bl	800a0a8 <_malloc_r>
 800adf0:	4680      	mov	r8, r0
 800adf2:	b908      	cbnz	r0, 800adf8 <_realloc_r+0x44>
 800adf4:	4645      	mov	r5, r8
 800adf6:	e7ec      	b.n	800add2 <_realloc_r+0x1e>
 800adf8:	42b4      	cmp	r4, r6
 800adfa:	4622      	mov	r2, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	bf28      	it	cs
 800ae00:	4632      	movcs	r2, r6
 800ae02:	f7ff ff85 	bl	800ad10 <memcpy>
 800ae06:	4629      	mov	r1, r5
 800ae08:	4638      	mov	r0, r7
 800ae0a:	f7ff f8d9 	bl	8009fc0 <_free_r>
 800ae0e:	e7f1      	b.n	800adf4 <_realloc_r+0x40>

0800ae10 <__ascii_wctomb>:
 800ae10:	4603      	mov	r3, r0
 800ae12:	4608      	mov	r0, r1
 800ae14:	b141      	cbz	r1, 800ae28 <__ascii_wctomb+0x18>
 800ae16:	2aff      	cmp	r2, #255	@ 0xff
 800ae18:	d904      	bls.n	800ae24 <__ascii_wctomb+0x14>
 800ae1a:	228a      	movs	r2, #138	@ 0x8a
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae22:	4770      	bx	lr
 800ae24:	700a      	strb	r2, [r1, #0]
 800ae26:	2001      	movs	r0, #1
 800ae28:	4770      	bx	lr
	...

0800ae2c <fiprintf>:
 800ae2c:	b40e      	push	{r1, r2, r3}
 800ae2e:	b503      	push	{r0, r1, lr}
 800ae30:	4601      	mov	r1, r0
 800ae32:	ab03      	add	r3, sp, #12
 800ae34:	4805      	ldr	r0, [pc, #20]	@ (800ae4c <fiprintf+0x20>)
 800ae36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae3a:	6800      	ldr	r0, [r0, #0]
 800ae3c:	9301      	str	r3, [sp, #4]
 800ae3e:	f000 f83f 	bl	800aec0 <_vfiprintf_r>
 800ae42:	b002      	add	sp, #8
 800ae44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae48:	b003      	add	sp, #12
 800ae4a:	4770      	bx	lr
 800ae4c:	20000070 	.word	0x20000070

0800ae50 <abort>:
 800ae50:	b508      	push	{r3, lr}
 800ae52:	2006      	movs	r0, #6
 800ae54:	f000 fa08 	bl	800b268 <raise>
 800ae58:	2001      	movs	r0, #1
 800ae5a:	f7f8 fa4b 	bl	80032f4 <_exit>

0800ae5e <_malloc_usable_size_r>:
 800ae5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae62:	1f18      	subs	r0, r3, #4
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	bfbc      	itt	lt
 800ae68:	580b      	ldrlt	r3, [r1, r0]
 800ae6a:	18c0      	addlt	r0, r0, r3
 800ae6c:	4770      	bx	lr

0800ae6e <__sfputc_r>:
 800ae6e:	6893      	ldr	r3, [r2, #8]
 800ae70:	3b01      	subs	r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	b410      	push	{r4}
 800ae76:	6093      	str	r3, [r2, #8]
 800ae78:	da08      	bge.n	800ae8c <__sfputc_r+0x1e>
 800ae7a:	6994      	ldr	r4, [r2, #24]
 800ae7c:	42a3      	cmp	r3, r4
 800ae7e:	db01      	blt.n	800ae84 <__sfputc_r+0x16>
 800ae80:	290a      	cmp	r1, #10
 800ae82:	d103      	bne.n	800ae8c <__sfputc_r+0x1e>
 800ae84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae88:	f000 b932 	b.w	800b0f0 <__swbuf_r>
 800ae8c:	6813      	ldr	r3, [r2, #0]
 800ae8e:	1c58      	adds	r0, r3, #1
 800ae90:	6010      	str	r0, [r2, #0]
 800ae92:	7019      	strb	r1, [r3, #0]
 800ae94:	4608      	mov	r0, r1
 800ae96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <__sfputs_r>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	4606      	mov	r6, r0
 800aea0:	460f      	mov	r7, r1
 800aea2:	4614      	mov	r4, r2
 800aea4:	18d5      	adds	r5, r2, r3
 800aea6:	42ac      	cmp	r4, r5
 800aea8:	d101      	bne.n	800aeae <__sfputs_r+0x12>
 800aeaa:	2000      	movs	r0, #0
 800aeac:	e007      	b.n	800aebe <__sfputs_r+0x22>
 800aeae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb2:	463a      	mov	r2, r7
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f7ff ffda 	bl	800ae6e <__sfputc_r>
 800aeba:	1c43      	adds	r3, r0, #1
 800aebc:	d1f3      	bne.n	800aea6 <__sfputs_r+0xa>
 800aebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aec0 <_vfiprintf_r>:
 800aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	460d      	mov	r5, r1
 800aec6:	b09d      	sub	sp, #116	@ 0x74
 800aec8:	4614      	mov	r4, r2
 800aeca:	4698      	mov	r8, r3
 800aecc:	4606      	mov	r6, r0
 800aece:	b118      	cbz	r0, 800aed8 <_vfiprintf_r+0x18>
 800aed0:	6a03      	ldr	r3, [r0, #32]
 800aed2:	b90b      	cbnz	r3, 800aed8 <_vfiprintf_r+0x18>
 800aed4:	f7fe f8ee 	bl	80090b4 <__sinit>
 800aed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aeda:	07d9      	lsls	r1, r3, #31
 800aedc:	d405      	bmi.n	800aeea <_vfiprintf_r+0x2a>
 800aede:	89ab      	ldrh	r3, [r5, #12]
 800aee0:	059a      	lsls	r2, r3, #22
 800aee2:	d402      	bmi.n	800aeea <_vfiprintf_r+0x2a>
 800aee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aee6:	f7fe fa10 	bl	800930a <__retarget_lock_acquire_recursive>
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	071b      	lsls	r3, r3, #28
 800aeee:	d501      	bpl.n	800aef4 <_vfiprintf_r+0x34>
 800aef0:	692b      	ldr	r3, [r5, #16]
 800aef2:	b99b      	cbnz	r3, 800af1c <_vfiprintf_r+0x5c>
 800aef4:	4629      	mov	r1, r5
 800aef6:	4630      	mov	r0, r6
 800aef8:	f000 f938 	bl	800b16c <__swsetup_r>
 800aefc:	b170      	cbz	r0, 800af1c <_vfiprintf_r+0x5c>
 800aefe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af00:	07dc      	lsls	r4, r3, #31
 800af02:	d504      	bpl.n	800af0e <_vfiprintf_r+0x4e>
 800af04:	f04f 30ff 	mov.w	r0, #4294967295
 800af08:	b01d      	add	sp, #116	@ 0x74
 800af0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0e:	89ab      	ldrh	r3, [r5, #12]
 800af10:	0598      	lsls	r0, r3, #22
 800af12:	d4f7      	bmi.n	800af04 <_vfiprintf_r+0x44>
 800af14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af16:	f7fe f9f9 	bl	800930c <__retarget_lock_release_recursive>
 800af1a:	e7f3      	b.n	800af04 <_vfiprintf_r+0x44>
 800af1c:	2300      	movs	r3, #0
 800af1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af20:	2320      	movs	r3, #32
 800af22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af26:	f8cd 800c 	str.w	r8, [sp, #12]
 800af2a:	2330      	movs	r3, #48	@ 0x30
 800af2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b0dc <_vfiprintf_r+0x21c>
 800af30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af34:	f04f 0901 	mov.w	r9, #1
 800af38:	4623      	mov	r3, r4
 800af3a:	469a      	mov	sl, r3
 800af3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af40:	b10a      	cbz	r2, 800af46 <_vfiprintf_r+0x86>
 800af42:	2a25      	cmp	r2, #37	@ 0x25
 800af44:	d1f9      	bne.n	800af3a <_vfiprintf_r+0x7a>
 800af46:	ebba 0b04 	subs.w	fp, sl, r4
 800af4a:	d00b      	beq.n	800af64 <_vfiprintf_r+0xa4>
 800af4c:	465b      	mov	r3, fp
 800af4e:	4622      	mov	r2, r4
 800af50:	4629      	mov	r1, r5
 800af52:	4630      	mov	r0, r6
 800af54:	f7ff ffa2 	bl	800ae9c <__sfputs_r>
 800af58:	3001      	adds	r0, #1
 800af5a:	f000 80a7 	beq.w	800b0ac <_vfiprintf_r+0x1ec>
 800af5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af60:	445a      	add	r2, fp
 800af62:	9209      	str	r2, [sp, #36]	@ 0x24
 800af64:	f89a 3000 	ldrb.w	r3, [sl]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f000 809f 	beq.w	800b0ac <_vfiprintf_r+0x1ec>
 800af6e:	2300      	movs	r3, #0
 800af70:	f04f 32ff 	mov.w	r2, #4294967295
 800af74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af78:	f10a 0a01 	add.w	sl, sl, #1
 800af7c:	9304      	str	r3, [sp, #16]
 800af7e:	9307      	str	r3, [sp, #28]
 800af80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af84:	931a      	str	r3, [sp, #104]	@ 0x68
 800af86:	4654      	mov	r4, sl
 800af88:	2205      	movs	r2, #5
 800af8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af8e:	4853      	ldr	r0, [pc, #332]	@ (800b0dc <_vfiprintf_r+0x21c>)
 800af90:	f7f5 f926 	bl	80001e0 <memchr>
 800af94:	9a04      	ldr	r2, [sp, #16]
 800af96:	b9d8      	cbnz	r0, 800afd0 <_vfiprintf_r+0x110>
 800af98:	06d1      	lsls	r1, r2, #27
 800af9a:	bf44      	itt	mi
 800af9c:	2320      	movmi	r3, #32
 800af9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afa2:	0713      	lsls	r3, r2, #28
 800afa4:	bf44      	itt	mi
 800afa6:	232b      	movmi	r3, #43	@ 0x2b
 800afa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afac:	f89a 3000 	ldrb.w	r3, [sl]
 800afb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800afb2:	d015      	beq.n	800afe0 <_vfiprintf_r+0x120>
 800afb4:	9a07      	ldr	r2, [sp, #28]
 800afb6:	4654      	mov	r4, sl
 800afb8:	2000      	movs	r0, #0
 800afba:	f04f 0c0a 	mov.w	ip, #10
 800afbe:	4621      	mov	r1, r4
 800afc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afc4:	3b30      	subs	r3, #48	@ 0x30
 800afc6:	2b09      	cmp	r3, #9
 800afc8:	d94b      	bls.n	800b062 <_vfiprintf_r+0x1a2>
 800afca:	b1b0      	cbz	r0, 800affa <_vfiprintf_r+0x13a>
 800afcc:	9207      	str	r2, [sp, #28]
 800afce:	e014      	b.n	800affa <_vfiprintf_r+0x13a>
 800afd0:	eba0 0308 	sub.w	r3, r0, r8
 800afd4:	fa09 f303 	lsl.w	r3, r9, r3
 800afd8:	4313      	orrs	r3, r2
 800afda:	9304      	str	r3, [sp, #16]
 800afdc:	46a2      	mov	sl, r4
 800afde:	e7d2      	b.n	800af86 <_vfiprintf_r+0xc6>
 800afe0:	9b03      	ldr	r3, [sp, #12]
 800afe2:	1d19      	adds	r1, r3, #4
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	9103      	str	r1, [sp, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	bfbb      	ittet	lt
 800afec:	425b      	neglt	r3, r3
 800afee:	f042 0202 	orrlt.w	r2, r2, #2
 800aff2:	9307      	strge	r3, [sp, #28]
 800aff4:	9307      	strlt	r3, [sp, #28]
 800aff6:	bfb8      	it	lt
 800aff8:	9204      	strlt	r2, [sp, #16]
 800affa:	7823      	ldrb	r3, [r4, #0]
 800affc:	2b2e      	cmp	r3, #46	@ 0x2e
 800affe:	d10a      	bne.n	800b016 <_vfiprintf_r+0x156>
 800b000:	7863      	ldrb	r3, [r4, #1]
 800b002:	2b2a      	cmp	r3, #42	@ 0x2a
 800b004:	d132      	bne.n	800b06c <_vfiprintf_r+0x1ac>
 800b006:	9b03      	ldr	r3, [sp, #12]
 800b008:	1d1a      	adds	r2, r3, #4
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	9203      	str	r2, [sp, #12]
 800b00e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b012:	3402      	adds	r4, #2
 800b014:	9305      	str	r3, [sp, #20]
 800b016:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b0ec <_vfiprintf_r+0x22c>
 800b01a:	7821      	ldrb	r1, [r4, #0]
 800b01c:	2203      	movs	r2, #3
 800b01e:	4650      	mov	r0, sl
 800b020:	f7f5 f8de 	bl	80001e0 <memchr>
 800b024:	b138      	cbz	r0, 800b036 <_vfiprintf_r+0x176>
 800b026:	9b04      	ldr	r3, [sp, #16]
 800b028:	eba0 000a 	sub.w	r0, r0, sl
 800b02c:	2240      	movs	r2, #64	@ 0x40
 800b02e:	4082      	lsls	r2, r0
 800b030:	4313      	orrs	r3, r2
 800b032:	3401      	adds	r4, #1
 800b034:	9304      	str	r3, [sp, #16]
 800b036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03a:	4829      	ldr	r0, [pc, #164]	@ (800b0e0 <_vfiprintf_r+0x220>)
 800b03c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b040:	2206      	movs	r2, #6
 800b042:	f7f5 f8cd 	bl	80001e0 <memchr>
 800b046:	2800      	cmp	r0, #0
 800b048:	d03f      	beq.n	800b0ca <_vfiprintf_r+0x20a>
 800b04a:	4b26      	ldr	r3, [pc, #152]	@ (800b0e4 <_vfiprintf_r+0x224>)
 800b04c:	bb1b      	cbnz	r3, 800b096 <_vfiprintf_r+0x1d6>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	3307      	adds	r3, #7
 800b052:	f023 0307 	bic.w	r3, r3, #7
 800b056:	3308      	adds	r3, #8
 800b058:	9303      	str	r3, [sp, #12]
 800b05a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b05c:	443b      	add	r3, r7
 800b05e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b060:	e76a      	b.n	800af38 <_vfiprintf_r+0x78>
 800b062:	fb0c 3202 	mla	r2, ip, r2, r3
 800b066:	460c      	mov	r4, r1
 800b068:	2001      	movs	r0, #1
 800b06a:	e7a8      	b.n	800afbe <_vfiprintf_r+0xfe>
 800b06c:	2300      	movs	r3, #0
 800b06e:	3401      	adds	r4, #1
 800b070:	9305      	str	r3, [sp, #20]
 800b072:	4619      	mov	r1, r3
 800b074:	f04f 0c0a 	mov.w	ip, #10
 800b078:	4620      	mov	r0, r4
 800b07a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b07e:	3a30      	subs	r2, #48	@ 0x30
 800b080:	2a09      	cmp	r2, #9
 800b082:	d903      	bls.n	800b08c <_vfiprintf_r+0x1cc>
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0c6      	beq.n	800b016 <_vfiprintf_r+0x156>
 800b088:	9105      	str	r1, [sp, #20]
 800b08a:	e7c4      	b.n	800b016 <_vfiprintf_r+0x156>
 800b08c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b090:	4604      	mov	r4, r0
 800b092:	2301      	movs	r3, #1
 800b094:	e7f0      	b.n	800b078 <_vfiprintf_r+0x1b8>
 800b096:	ab03      	add	r3, sp, #12
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	462a      	mov	r2, r5
 800b09c:	4b12      	ldr	r3, [pc, #72]	@ (800b0e8 <_vfiprintf_r+0x228>)
 800b09e:	a904      	add	r1, sp, #16
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f7fd fbc5 	bl	8008830 <_printf_float>
 800b0a6:	4607      	mov	r7, r0
 800b0a8:	1c78      	adds	r0, r7, #1
 800b0aa:	d1d6      	bne.n	800b05a <_vfiprintf_r+0x19a>
 800b0ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0ae:	07d9      	lsls	r1, r3, #31
 800b0b0:	d405      	bmi.n	800b0be <_vfiprintf_r+0x1fe>
 800b0b2:	89ab      	ldrh	r3, [r5, #12]
 800b0b4:	059a      	lsls	r2, r3, #22
 800b0b6:	d402      	bmi.n	800b0be <_vfiprintf_r+0x1fe>
 800b0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0ba:	f7fe f927 	bl	800930c <__retarget_lock_release_recursive>
 800b0be:	89ab      	ldrh	r3, [r5, #12]
 800b0c0:	065b      	lsls	r3, r3, #25
 800b0c2:	f53f af1f 	bmi.w	800af04 <_vfiprintf_r+0x44>
 800b0c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0c8:	e71e      	b.n	800af08 <_vfiprintf_r+0x48>
 800b0ca:	ab03      	add	r3, sp, #12
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	462a      	mov	r2, r5
 800b0d0:	4b05      	ldr	r3, [pc, #20]	@ (800b0e8 <_vfiprintf_r+0x228>)
 800b0d2:	a904      	add	r1, sp, #16
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7fd fe43 	bl	8008d60 <_printf_i>
 800b0da:	e7e4      	b.n	800b0a6 <_vfiprintf_r+0x1e6>
 800b0dc:	0800b9cb 	.word	0x0800b9cb
 800b0e0:	0800b9d5 	.word	0x0800b9d5
 800b0e4:	08008831 	.word	0x08008831
 800b0e8:	0800ae9d 	.word	0x0800ae9d
 800b0ec:	0800b9d1 	.word	0x0800b9d1

0800b0f0 <__swbuf_r>:
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f2:	460e      	mov	r6, r1
 800b0f4:	4614      	mov	r4, r2
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	b118      	cbz	r0, 800b102 <__swbuf_r+0x12>
 800b0fa:	6a03      	ldr	r3, [r0, #32]
 800b0fc:	b90b      	cbnz	r3, 800b102 <__swbuf_r+0x12>
 800b0fe:	f7fd ffd9 	bl	80090b4 <__sinit>
 800b102:	69a3      	ldr	r3, [r4, #24]
 800b104:	60a3      	str	r3, [r4, #8]
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	071a      	lsls	r2, r3, #28
 800b10a:	d501      	bpl.n	800b110 <__swbuf_r+0x20>
 800b10c:	6923      	ldr	r3, [r4, #16]
 800b10e:	b943      	cbnz	r3, 800b122 <__swbuf_r+0x32>
 800b110:	4621      	mov	r1, r4
 800b112:	4628      	mov	r0, r5
 800b114:	f000 f82a 	bl	800b16c <__swsetup_r>
 800b118:	b118      	cbz	r0, 800b122 <__swbuf_r+0x32>
 800b11a:	f04f 37ff 	mov.w	r7, #4294967295
 800b11e:	4638      	mov	r0, r7
 800b120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b122:	6823      	ldr	r3, [r4, #0]
 800b124:	6922      	ldr	r2, [r4, #16]
 800b126:	1a98      	subs	r0, r3, r2
 800b128:	6963      	ldr	r3, [r4, #20]
 800b12a:	b2f6      	uxtb	r6, r6
 800b12c:	4283      	cmp	r3, r0
 800b12e:	4637      	mov	r7, r6
 800b130:	dc05      	bgt.n	800b13e <__swbuf_r+0x4e>
 800b132:	4621      	mov	r1, r4
 800b134:	4628      	mov	r0, r5
 800b136:	f7ff fd99 	bl	800ac6c <_fflush_r>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d1ed      	bne.n	800b11a <__swbuf_r+0x2a>
 800b13e:	68a3      	ldr	r3, [r4, #8]
 800b140:	3b01      	subs	r3, #1
 800b142:	60a3      	str	r3, [r4, #8]
 800b144:	6823      	ldr	r3, [r4, #0]
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	6022      	str	r2, [r4, #0]
 800b14a:	701e      	strb	r6, [r3, #0]
 800b14c:	6962      	ldr	r2, [r4, #20]
 800b14e:	1c43      	adds	r3, r0, #1
 800b150:	429a      	cmp	r2, r3
 800b152:	d004      	beq.n	800b15e <__swbuf_r+0x6e>
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	07db      	lsls	r3, r3, #31
 800b158:	d5e1      	bpl.n	800b11e <__swbuf_r+0x2e>
 800b15a:	2e0a      	cmp	r6, #10
 800b15c:	d1df      	bne.n	800b11e <__swbuf_r+0x2e>
 800b15e:	4621      	mov	r1, r4
 800b160:	4628      	mov	r0, r5
 800b162:	f7ff fd83 	bl	800ac6c <_fflush_r>
 800b166:	2800      	cmp	r0, #0
 800b168:	d0d9      	beq.n	800b11e <__swbuf_r+0x2e>
 800b16a:	e7d6      	b.n	800b11a <__swbuf_r+0x2a>

0800b16c <__swsetup_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4b29      	ldr	r3, [pc, #164]	@ (800b214 <__swsetup_r+0xa8>)
 800b170:	4605      	mov	r5, r0
 800b172:	6818      	ldr	r0, [r3, #0]
 800b174:	460c      	mov	r4, r1
 800b176:	b118      	cbz	r0, 800b180 <__swsetup_r+0x14>
 800b178:	6a03      	ldr	r3, [r0, #32]
 800b17a:	b90b      	cbnz	r3, 800b180 <__swsetup_r+0x14>
 800b17c:	f7fd ff9a 	bl	80090b4 <__sinit>
 800b180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b184:	0719      	lsls	r1, r3, #28
 800b186:	d422      	bmi.n	800b1ce <__swsetup_r+0x62>
 800b188:	06da      	lsls	r2, r3, #27
 800b18a:	d407      	bmi.n	800b19c <__swsetup_r+0x30>
 800b18c:	2209      	movs	r2, #9
 800b18e:	602a      	str	r2, [r5, #0]
 800b190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b194:	81a3      	strh	r3, [r4, #12]
 800b196:	f04f 30ff 	mov.w	r0, #4294967295
 800b19a:	e033      	b.n	800b204 <__swsetup_r+0x98>
 800b19c:	0758      	lsls	r0, r3, #29
 800b19e:	d512      	bpl.n	800b1c6 <__swsetup_r+0x5a>
 800b1a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1a2:	b141      	cbz	r1, 800b1b6 <__swsetup_r+0x4a>
 800b1a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1a8:	4299      	cmp	r1, r3
 800b1aa:	d002      	beq.n	800b1b2 <__swsetup_r+0x46>
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	f7fe ff07 	bl	8009fc0 <_free_r>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1b6:	89a3      	ldrh	r3, [r4, #12]
 800b1b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b1bc:	81a3      	strh	r3, [r4, #12]
 800b1be:	2300      	movs	r3, #0
 800b1c0:	6063      	str	r3, [r4, #4]
 800b1c2:	6923      	ldr	r3, [r4, #16]
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	f043 0308 	orr.w	r3, r3, #8
 800b1cc:	81a3      	strh	r3, [r4, #12]
 800b1ce:	6923      	ldr	r3, [r4, #16]
 800b1d0:	b94b      	cbnz	r3, 800b1e6 <__swsetup_r+0x7a>
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b1d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1dc:	d003      	beq.n	800b1e6 <__swsetup_r+0x7a>
 800b1de:	4621      	mov	r1, r4
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f000 f883 	bl	800b2ec <__smakebuf_r>
 800b1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ea:	f013 0201 	ands.w	r2, r3, #1
 800b1ee:	d00a      	beq.n	800b206 <__swsetup_r+0x9a>
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	60a2      	str	r2, [r4, #8]
 800b1f4:	6962      	ldr	r2, [r4, #20]
 800b1f6:	4252      	negs	r2, r2
 800b1f8:	61a2      	str	r2, [r4, #24]
 800b1fa:	6922      	ldr	r2, [r4, #16]
 800b1fc:	b942      	cbnz	r2, 800b210 <__swsetup_r+0xa4>
 800b1fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b202:	d1c5      	bne.n	800b190 <__swsetup_r+0x24>
 800b204:	bd38      	pop	{r3, r4, r5, pc}
 800b206:	0799      	lsls	r1, r3, #30
 800b208:	bf58      	it	pl
 800b20a:	6962      	ldrpl	r2, [r4, #20]
 800b20c:	60a2      	str	r2, [r4, #8]
 800b20e:	e7f4      	b.n	800b1fa <__swsetup_r+0x8e>
 800b210:	2000      	movs	r0, #0
 800b212:	e7f7      	b.n	800b204 <__swsetup_r+0x98>
 800b214:	20000070 	.word	0x20000070

0800b218 <_raise_r>:
 800b218:	291f      	cmp	r1, #31
 800b21a:	b538      	push	{r3, r4, r5, lr}
 800b21c:	4605      	mov	r5, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	d904      	bls.n	800b22c <_raise_r+0x14>
 800b222:	2316      	movs	r3, #22
 800b224:	6003      	str	r3, [r0, #0]
 800b226:	f04f 30ff 	mov.w	r0, #4294967295
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b22e:	b112      	cbz	r2, 800b236 <_raise_r+0x1e>
 800b230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b234:	b94b      	cbnz	r3, 800b24a <_raise_r+0x32>
 800b236:	4628      	mov	r0, r5
 800b238:	f000 f830 	bl	800b29c <_getpid_r>
 800b23c:	4622      	mov	r2, r4
 800b23e:	4601      	mov	r1, r0
 800b240:	4628      	mov	r0, r5
 800b242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b246:	f000 b817 	b.w	800b278 <_kill_r>
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d00a      	beq.n	800b264 <_raise_r+0x4c>
 800b24e:	1c59      	adds	r1, r3, #1
 800b250:	d103      	bne.n	800b25a <_raise_r+0x42>
 800b252:	2316      	movs	r3, #22
 800b254:	6003      	str	r3, [r0, #0]
 800b256:	2001      	movs	r0, #1
 800b258:	e7e7      	b.n	800b22a <_raise_r+0x12>
 800b25a:	2100      	movs	r1, #0
 800b25c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b260:	4620      	mov	r0, r4
 800b262:	4798      	blx	r3
 800b264:	2000      	movs	r0, #0
 800b266:	e7e0      	b.n	800b22a <_raise_r+0x12>

0800b268 <raise>:
 800b268:	4b02      	ldr	r3, [pc, #8]	@ (800b274 <raise+0xc>)
 800b26a:	4601      	mov	r1, r0
 800b26c:	6818      	ldr	r0, [r3, #0]
 800b26e:	f7ff bfd3 	b.w	800b218 <_raise_r>
 800b272:	bf00      	nop
 800b274:	20000070 	.word	0x20000070

0800b278 <_kill_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d07      	ldr	r5, [pc, #28]	@ (800b298 <_kill_r+0x20>)
 800b27c:	2300      	movs	r3, #0
 800b27e:	4604      	mov	r4, r0
 800b280:	4608      	mov	r0, r1
 800b282:	4611      	mov	r1, r2
 800b284:	602b      	str	r3, [r5, #0]
 800b286:	f7f8 f825 	bl	80032d4 <_kill>
 800b28a:	1c43      	adds	r3, r0, #1
 800b28c:	d102      	bne.n	800b294 <_kill_r+0x1c>
 800b28e:	682b      	ldr	r3, [r5, #0]
 800b290:	b103      	cbz	r3, 800b294 <_kill_r+0x1c>
 800b292:	6023      	str	r3, [r4, #0]
 800b294:	bd38      	pop	{r3, r4, r5, pc}
 800b296:	bf00      	nop
 800b298:	200007ec 	.word	0x200007ec

0800b29c <_getpid_r>:
 800b29c:	f7f8 b812 	b.w	80032c4 <_getpid>

0800b2a0 <__swhatbuf_r>:
 800b2a0:	b570      	push	{r4, r5, r6, lr}
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a8:	2900      	cmp	r1, #0
 800b2aa:	b096      	sub	sp, #88	@ 0x58
 800b2ac:	4615      	mov	r5, r2
 800b2ae:	461e      	mov	r6, r3
 800b2b0:	da0d      	bge.n	800b2ce <__swhatbuf_r+0x2e>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2b8:	f04f 0100 	mov.w	r1, #0
 800b2bc:	bf14      	ite	ne
 800b2be:	2340      	movne	r3, #64	@ 0x40
 800b2c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	6031      	str	r1, [r6, #0]
 800b2c8:	602b      	str	r3, [r5, #0]
 800b2ca:	b016      	add	sp, #88	@ 0x58
 800b2cc:	bd70      	pop	{r4, r5, r6, pc}
 800b2ce:	466a      	mov	r2, sp
 800b2d0:	f000 f848 	bl	800b364 <_fstat_r>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	dbec      	blt.n	800b2b2 <__swhatbuf_r+0x12>
 800b2d8:	9901      	ldr	r1, [sp, #4]
 800b2da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2e2:	4259      	negs	r1, r3
 800b2e4:	4159      	adcs	r1, r3
 800b2e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2ea:	e7eb      	b.n	800b2c4 <__swhatbuf_r+0x24>

0800b2ec <__smakebuf_r>:
 800b2ec:	898b      	ldrh	r3, [r1, #12]
 800b2ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2f0:	079d      	lsls	r5, r3, #30
 800b2f2:	4606      	mov	r6, r0
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	d507      	bpl.n	800b308 <__smakebuf_r+0x1c>
 800b2f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	6123      	str	r3, [r4, #16]
 800b300:	2301      	movs	r3, #1
 800b302:	6163      	str	r3, [r4, #20]
 800b304:	b003      	add	sp, #12
 800b306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b308:	ab01      	add	r3, sp, #4
 800b30a:	466a      	mov	r2, sp
 800b30c:	f7ff ffc8 	bl	800b2a0 <__swhatbuf_r>
 800b310:	9f00      	ldr	r7, [sp, #0]
 800b312:	4605      	mov	r5, r0
 800b314:	4639      	mov	r1, r7
 800b316:	4630      	mov	r0, r6
 800b318:	f7fe fec6 	bl	800a0a8 <_malloc_r>
 800b31c:	b948      	cbnz	r0, 800b332 <__smakebuf_r+0x46>
 800b31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b322:	059a      	lsls	r2, r3, #22
 800b324:	d4ee      	bmi.n	800b304 <__smakebuf_r+0x18>
 800b326:	f023 0303 	bic.w	r3, r3, #3
 800b32a:	f043 0302 	orr.w	r3, r3, #2
 800b32e:	81a3      	strh	r3, [r4, #12]
 800b330:	e7e2      	b.n	800b2f8 <__smakebuf_r+0xc>
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	6020      	str	r0, [r4, #0]
 800b336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b33a:	81a3      	strh	r3, [r4, #12]
 800b33c:	9b01      	ldr	r3, [sp, #4]
 800b33e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b342:	b15b      	cbz	r3, 800b35c <__smakebuf_r+0x70>
 800b344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b348:	4630      	mov	r0, r6
 800b34a:	f000 f81d 	bl	800b388 <_isatty_r>
 800b34e:	b128      	cbz	r0, 800b35c <__smakebuf_r+0x70>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	f023 0303 	bic.w	r3, r3, #3
 800b356:	f043 0301 	orr.w	r3, r3, #1
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	431d      	orrs	r5, r3
 800b360:	81a5      	strh	r5, [r4, #12]
 800b362:	e7cf      	b.n	800b304 <__smakebuf_r+0x18>

0800b364 <_fstat_r>:
 800b364:	b538      	push	{r3, r4, r5, lr}
 800b366:	4d07      	ldr	r5, [pc, #28]	@ (800b384 <_fstat_r+0x20>)
 800b368:	2300      	movs	r3, #0
 800b36a:	4604      	mov	r4, r0
 800b36c:	4608      	mov	r0, r1
 800b36e:	4611      	mov	r1, r2
 800b370:	602b      	str	r3, [r5, #0]
 800b372:	f7f8 f80f 	bl	8003394 <_fstat>
 800b376:	1c43      	adds	r3, r0, #1
 800b378:	d102      	bne.n	800b380 <_fstat_r+0x1c>
 800b37a:	682b      	ldr	r3, [r5, #0]
 800b37c:	b103      	cbz	r3, 800b380 <_fstat_r+0x1c>
 800b37e:	6023      	str	r3, [r4, #0]
 800b380:	bd38      	pop	{r3, r4, r5, pc}
 800b382:	bf00      	nop
 800b384:	200007ec 	.word	0x200007ec

0800b388 <_isatty_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4d06      	ldr	r5, [pc, #24]	@ (800b3a4 <_isatty_r+0x1c>)
 800b38c:	2300      	movs	r3, #0
 800b38e:	4604      	mov	r4, r0
 800b390:	4608      	mov	r0, r1
 800b392:	602b      	str	r3, [r5, #0]
 800b394:	f7f8 f80e 	bl	80033b4 <_isatty>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d102      	bne.n	800b3a2 <_isatty_r+0x1a>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	b103      	cbz	r3, 800b3a2 <_isatty_r+0x1a>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd38      	pop	{r3, r4, r5, pc}
 800b3a4:	200007ec 	.word	0x200007ec

0800b3a8 <_init>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	bf00      	nop
 800b3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ae:	bc08      	pop	{r3}
 800b3b0:	469e      	mov	lr, r3
 800b3b2:	4770      	bx	lr

0800b3b4 <_fini>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	bf00      	nop
 800b3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ba:	bc08      	pop	{r3}
 800b3bc:	469e      	mov	lr, r3
 800b3be:	4770      	bx	lr
